Efficient Orthogonal Parametrisation of Recurrent Neural Networks
Using Householder Reflections

Zakaria Mhammedi 1 2 Andrew Hellicar 2 Ashfaqur Rahman 2 James Bailey 1

Abstract
The problem of learning long-term dependencies
in sequences using Recurrent Neural Networks
(RNNs) is still a major challenge. Recent methods have been suggested to solve this problem
by constraining the transition matrix to be unitary during training which ensures that its norm
is equal to one and prevents exploding gradients.
These methods either have limited expressiveness or scale poorly with the size of the network
when compared with the simple RNN case, especially when using stochastic gradient descent
with a small mini-batch size. Our contributions
are as follows; we first show that constraining the
transition matrix to be unitary is a special case of
an orthogonal constraint. Then we present a new
parametrisation of the transition matrix which allows efficient training of an RNN while ensuring
that the matrix is always orthogonal. Our results
show that the orthogonal constraint on the transition matrix applied through our parametrisation
gives similar benefits to the unitary constraint,
without the time complexity limitations.

1. Introduction
Recurrent Neural Networks (RNNs) have been successfully
used in many applications involving time series. This is because RNNs are well suited for sequential data as they process inputs one element at a time and store relevant information in their hidden state. In practice, however, training
simple RNNs (sRNN) can be challenging due to the problem of exploding and vanishing gradients (Hochreiter et al.,
2001). It has been shown that exploding gradients can occur when the transition matrix of an RNN has a spectral
norm larger than one (Glorot & Bengio, 2010). This results
1

The University of Melbourne, Parkville, Australia 2 Data61,
CSIRO, Australia. Correspondence to: Zakaria Mhammedi
<zak.mhammedi@data61.csiro.au>.
Proceedings of the 34 th International Conference on Machine
Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017
by the author(s).

in an error surface, associated with some objective function, having very steep walls (Pascanu et al., 2013). On the
other hand, when the spectral norm of the transition matrix
is less than one, the information at one time step tend to
vanish quickly after a few time steps. This makes it challenging to learn long-term dependencies in sequential data.
Different methods have been suggested to solve either the
vanishing or exploding gradient problem. The LSTM has
been specifically designed to help with the vanishing gradient (Hochreiter & Schmidhuber, 1997). This is achieved
by using gate vectors which allow a linear flow of information through the hidden state. However, the LSTM
does not directly address the exploding gradient problem.
One approach to solving this issue is to clip the gradients
(Mikolov, 2012) when their norm exceeds some threshold value. However, this adds an extra hyperparameter to
the model. Furthermore, if exploding gradients can occur
within some parameter search space, the associated error
surface will still have steep walls. This can make training
challenging even with gradient clipping.
Another way to approach this problem is to improve the
shape of the error surface directly by making it smoother,
which can be achieved by constraining the spectral norm of
the transition matrix to be less than or equal to one. However, a value of exactly one is best for the vanishing gradient problem. A good choice of the activation function
between hidden states is also crucial in this case. These
ideas have been investigated in recent works. In particular, the unitary RNN (Arjovsky et al., 2016) uses a special parametrisation to constrain the transition matrix to be
unitary, and hence, of norm one. This parametrisation and
other similar ones (Hyland & Rätsch, 2017; Wisdom et al.,
2016) have some advantages and drawbacks which we will
discuss in more details in the next section.
The main contributions of this work are as follows:
• We first show that constraining the search space of the
transition matrix of an RNN to the set of unitary matrices U(n) is equivalent to limiting the search space
to a subset of O(2n) (O(2n) is the set of 2n × 2n orthogonal matrices) of a new RNN with twice the hidden size. This suggests that it may not be necessary to

Efficient Orthogonal Parametrisation of Recurrent Neural Networks

work with complex matrices.
• We present a simple way to parametrise orthogonal transition matrices of RNNs using Householder
matrices, and we derive the expressions of the
back-propagated gradients with respect to the new
parametrisation. This new parametrisation can also be
used in other deep architectures.
• We develop an algorithm to compute the backpropagated gradients efficiently. Using this algorithm,
we show that the worst case time complexity of one
gradient step is of the same order as that of the sRNN.

2. Related Work
Throughout this work we will refer to elements of the following sRNN architecture.
h(t) = φ(W h(t−1) + V x(t) ),
o

(t)

(t)

=Yh ,

(1)
(2)

where W , V and Y are the hidden-to-hidden, input-tohidden, and hidden-to-output weight matrices. h(t−1) and
h(t) are the hidden vectors at time steps t − 1 and t respectively. Finally, φ is a non-linear activation function. We
have omitted the bias terms for simplicity.
Recent research explored how the initialisation of the transition matrix W influences training and the ability to learn
long-term dependencies. In particular, initialisation with
the identity or an orthogonal matrix can greatly improve
performance (Le et al., 2015). In addition to these initialisation methods, one study also considered removing the
non-linearity between the hidden-to-hidden connections
(Henaff et al., 2016), i.e. the term W h(t−1) in Equation (1)
is outside the activation function φ. This method showed
good results when compared to the LSTM on pathological
problems exhibiting long-term dependencies.
After training a model for a few iterations using gradient
descent, nothing guarantees that the initial structures of the
transition matrix will be held. In fact, its spectral norm can
deviate from one, and exploding and vanishing gradients
can be a problem again. It is possible to constrain the transition matrix to be orthogonal during training using special
parametrisations (Arjovsky et al., 2016; Hyland & Rätsch,
2017), which ensure that its spectral norm is always equal
to one. The unitary RNN (uRNN) (Arjovsky et al., 2016)
is one example where the hidden matrix W ∈ Cn×n is the
product of elementary matrices, consisting of reflection, diagonal, and Fourier transform matrices. When the size of
hidden layer is equal to n, the transition matrix has a total of
only 7n parameters. Another advantage of this parametrisation is computational efficiency - the matrix-vector product W v, for some vector v, can be calculated in time complexity O(n log n). However, it has been shown that this

parametrisation does not allow the transition matrix to span
the full unitary group (Wisdom et al., 2016) when the size
of the hidden layer is greater than 7. This may limit the
expressiveness of the model.
Another interesting parametrisation (Hyland & Rätsch,
2017) has been suggested which takes advantage of the algebraic properties of the unitary group U(n). The idea is
to use the corresponding matrix Lie algebra u(n) of skew
hermitian matrices. In particular,
thei transition matrix can
hP 2
n
be written as W = exp
i=1 λi Ti , where exp is the ex2

ponential matrix map and {Ti }ni=1 are predefined n × n
matrices forming a bases of the Lie algebra u(n). The
learning parameters are the weights {λi }. The fact that the
matrix Lie algebra u(n) is closed and connected ensures
that the exponential mapping from u(n) to U(n) is surjective. Therefore, with this parametrisation the search space
of the transition matrix spans the whole unitary group. This
is one advantage over the original unitary parametrisation
(Arjovsky et al., 2016). However, the cost of computing
the matrix exponential to get W is O(n3 ), where n is the
dimension of the hidden state. .
Another method (Wisdom et al., 2016) performs optimisation directly of the Stiefel manifold using the Cayley
transformation. The corresponding model was called fullcapacity unitary RNN. Using this approach, the transition
matrix can span the full set of unitary matrices. However,
this method involves a matrix inverse as well as matrixmatrix products which have time complexity O(n3 ). This
can be problematic for large neural networks when using
stochastic gradient descent with a small mini-batch size.
A more recent study (Vorontsov et al., 2017) investigated
the effect of soft versus hard orthogonal constraints on the
performance of RNNs. The soft constraint was applied by
specifying an allowable range for the maximum singular
value of the transition matrix. To this end, the transition
matrix was factorised as W = U SV 0 , where U and V are
orthogonal matrices and S is a diagonal matrix containing
the singular values of W . A soft orthogonal constraint consists of specifying small allowable intervals around 1 for
the diagonal elements of S. Similarly to (Wisdom et al.,
2016), the matrices U and V were updated at each training
iteration using the Cayley transformation, which involves a
matrix inverse, to ensure that they remain orthogonal.
All the methods discussed above, except for the original
unitary RNN, involve a step that requires at least a O(n3 )
time complexity. All of them, except for one, require the
use of complex matrices. Table 1 summarises the time
complexities of various methods, including our approach,
for one stochastic gradient step. In the next section, we
show that imposing a unitary constraint on a transition matrix W ∈ Cn×n is equivalent to imposing a special orthog-

Efficient Orthogonal Parametrisation of Recurrent Neural Networks

onal constraint on a new RNN with twice the hidden size.
Furthermore, since the norm of orthogonal matrices is also
always one, using the latter has the same theoretical benefits as using unitary matrices when it comes to the exploding gradient problem.

3. Complex unitary versus orthogonal
We can show that when the transition matrix W ∈ Cn×n of
an RNN is unitary, there exists an equivalent representation
of this RNN involving an orthogonal matrix Ŵ ∈ R2n×2n .
In fact, consider a complex unitary transition matrix W =
A + iB ∈ Cn×n , where A and B are now real-valued matrices in Rn×n . We also define the following new variables






< h(t) 
< (V )
A −B
(t)
∀t, ĥ =
, V̂ =
, Ŵ =
,
= (V )
B A
= h(t)

it follows that Ŵ Ŵ 0 = I. Also note that Ŵ has a special
structure - it is a block-matrix.
The discussion above shows that using a complex, unitary
transition matrix in Cn×n is equivalent to using an orthogonal matrix, belonging to a subset of O(2n), in a new RNN
with twice the hidden size. This is why in this work we
focus mainly on parametrising orthogonal matrices.

4. Parametrisation of the transition matrix
Before discussing the details of our parametrisation, we
first introduce a few notations. For n, k ∈ N and 2 ≤ k ≤
n, let Hk : Rk → Rn×n be defined as
#
"
In−k
0
,
(6)
Hk (u) =
uu0
0
Ik − 2 kuk
2

where < and = denote the real and imaginary parts of a
complex number. Note that ĥ(t) ∈ R2n , Ŵ ∈ R2n×2n ,
and V̂ ∈ R2n×nx , where nx is the dimension of the input
vector x(t) in Equation (1).

where Ik denotes the k-dimensional identity matrix. For
u ∈ Rk , Hk (u) is the Householder Matrix in O(n) representing the reflection about the hyperplane orthogonal to
the vector (00n−k , u0 )0 ∈ Rn and passing through the origin, where 0n−k denotes the zero vector in Rn−k .

Assuming that the activation function φ applies to the real
and imaginary parts separately, it is easy to show that the
update equation of the complex hidden state h(t) of the unitary RNN has the following real space representation

We also define the mapping H1 : R → Rn×n as


In−1 0
H1 (u) =
.
0
u

ĥ(t) = φ(Ŵ ĥ(t−1) + V̂ x(t) ).

(3)

Even when the activation function φ does not apply to the
real and imaginary parts separately, it is still possible to find
an equivalent representation in the real space. Consider the
activation function proposed by (Arjovsky et al., 2016)

z
, if |z| + b > 0
(|z| + b) |z|
(4)
σmodRelU (z) =
0,
otherwise
2n

where b is a bias vector. For a hidden state ĥ ∈ R , the
equivalent activation function in the real space representation is given by
q 2 2
q
 aqi +aki +bk̃i
h
i
a
,
if
a2i + a2ki + bk̃i > 0
i
a2i +a2k
φ̂(a) =
i

i
0,
otherwise
where ki = ((i + n) mod 2n) and k̃i = (i mod n) for all
i ∈ {1, . . . , 2n}. The activation function φ̂ is no longer
applied to hidden units independently.
Now we will show that the matrix Ŵ is orthogonal. By
definition of a unitary matrix, we have W W ∗ = I where
the ∗ represents the conjugate transpose. This implies that
AA0 + BB 0 = I and BA0 − AB 0 = 0. And since we have
 0

AA + BB 0 AB 0 − BA0
0
Ŵ Ŵ =
,
(5)
BA0 − AB 0 AA0 + BB 0

(7)

Note that H1 (u) is not necessarily a Householder reflection. However, when u ∈ {1, −1}, H1 (u) is orthogonal.
Finally, for n, k ∈ N and 1 ≤ k ≤ n, we define
Mk : Rk × · · · × Rn → Rn×n
(uk , . . . , un ) 7→ Hn (un ) . . . Hk (uk ).
We propose to parametrise the transition matrix W of an
RNN using the mappings {Mk }. When using m reflection
vectors {ui }, the parametrisation can be expressed as
W = Mn−m+1 (un−m+1 , . . . , un )
= Hn (un ) . . . Hn−m+1 (un−m+1 ),

(8)

where ui ∈ Ri for i ∈ {n − m + 1, . . . , n}.
For the particular case where m = n in the above
parametrisation, we have the following result.
Theorem 1. The image of M1 includes the set of all n × n
orthogonal matrices, i.e. O(n) ⊂ M1 [R × · · · × Rn ].
Note that Theorem 1 would not be valid if H1 (·) was
a standard Householder reflection. In fact, in the
 two0
dimensional case, for instance, the matrix 10 −1
cannot
be expressed as the product of exactly two standard Householder matrices.
The parametrisation in (8) has the following advantages:

Efficient Orthogonal Parametrisation of Recurrent Neural Networks

Methods
uRNN (Arjovsky et al., 2016)

Constraint on the
transition matrix
kW k = 1

Time complexity of one
online gradient step
O(T n log(n))

kW k = 1

O(T n2 + n3 )

Search space of the
transition matrix
A subset of U(n)
when n > 7
The full U(n) set

kW k = 1

O(T n2 + n3 )

The full U(n) set

kW k = 1

O(T nm)
where m ≤ n

The full O(n) set
when m = n

Full-capacity uRNN
(Wisdom et al., 2016)
Unitary RNN
(Hyland & Rätsch, 2017)
oRNN
(Our approach)

Table 1. Table showing the time complexities associated with one stochastic gradient step (mini-batch size =1) for different methods,
when the size of the hidden layer of an RNN is n and the input sequence has length T .

1. The parametrisation is smooth* , which is convenient
for training with gradient descent. It is also flexible - a
good trade-off between expressiveness and speed can
be found by tuning the number of reflection vectors.
2. The time and space complexities involved in one gradient calculation are, in the worst case, the same as
that of the sRNN with the same number of hidden
units. This is discussed in the following subsections.

at each time step t. Note that in Equation (10) h(t−1) is
taken as a constant
with respect to U . Furthermore, we
PT
∂L
∂L
= t=1 ∂U
have ∂U
(t) , where T is the length of the input
sequence. The gradient flow through the RNN at time step
t is shown in Figure 1.

3. When m < n, the matrix W is always orthogonal, as
long as the reflection vectors are nonzero. For m = n,
the only additional requirement for W to be orthogonal is that u1 ∈ {−1, 1}.
4. When m = n, the transition matrix can span the whole
set of n × n orthogonal matrices. In this case, the total
number of parameters needed for W is n(n + 1)/2.
This results in only n redundant parameters since the
orthogonal set O(n) is a n(n − 1)/2 manifold.
4.1. Back-propagation algorithm
Let ui ∈ Ri . Let U := (un | . . . |un−m+1 ) ∈ Rn×m be
the parameter matrix constructed from the reflection vectors {ui }. In particular, the j-th column of U can be expressed using the zero vector 0j−1 ∈ Rj−1 as


0j−1
U∗,j =
∈ Rn , 1 ≤ j ≤ m.
(9)
un−j+1
Let L be a scalar loss function and C (t) := W h(t−1) , where
W is constructed using the {ui } vectors following Equation (8). In order to back-propagate the gradients through
time, we need to compute the following partial derivatives
 (t) 0
∂L
∂C
∂L
:=
,
(10)
∂U
∂U (t)
∂C (t)

0
∂L
∂C (t)
∂L
=
,
(11)
(t−1)
(t−1)
∂h
∂h
∂C (t)
* except

on a subset of zero Lebesgue measure.

Figure 1. Gradient
P flow through the RNN at time step t. Note that
we have L = Tt=1 Lt (ot , yt ), where {yt } are target outputs.

Before describing the algorithm to compute the back∂L
∂L
propagated gradients ∂U
(t) and ∂h(t−1) , we first derive their
∂L
(t−1)
expressions as a function of U , h
and ∂C
(t) using the
compact WY representation (Joffrain et al., 2006) of the
product of Householder reflections.
Proposition 1. Let n, m ∈ N s.t. m ≤ n − 1. Let ui ∈
Ri and U = (un | . . . |un−m+1 ) be the matrix defined in
Equation (9). We have
1
T := striu(U 0 U ) + diag(U 0 U ),
(12)
2
Hn (un ) . . . Hn−m+1 (un−m+1 ) = I − U T −1 U 0 , (13)
where striu(U 0 U ), and diag(U 0 U ) represent the strictly upper part and the diagonal of the matrix U 0 U , respectively.
Equation (13) is the compact WY representation of the
product of Householder reflections. For the particular case
where m = n, the RHS of Equation (13) should be replaced by I − U T −1 U 0 H1 (u1 ), where H1 is defined in
(7) and U = (un | . . . |u2 ).
The following theorem gives the expressions of the gradi∂L
∂L
(t−1)
ents ∂U
.
(t) and ∂h(t−1) when m ≤ n − 1 and h = h

Efficient Orthogonal Parametrisation of Recurrent Neural Networks

Algorithm 1 Local forward and backward propagations at
time step t. For a matrix A, A∗,k denotes the k-th column.
∂L
1: Inputs: h(t−1) , ∂C
, U = (un | . . . |un−m+1 ).
∂L
(t)
2: Outputs: ∂U (t) , ∂h∂L
= W h(t−1)
(t−1) , C

3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:

Require: G ∈ Rn×m , g ∈ Rn , H ∈ Rn×(m+1)
2
2
N ← (kun k , . . . , kun−m+1 k )
H∗,m+1 ← h(t−1)
∂L
g ← ∂C
for k = m to 1 do {Local Forward Propagation}
0
h̃k ← N2k U∗,k
H∗,k+1
H∗,k ← H∗,k+1 − h̃k U∗,k
end for
for k = 1 to m do {Local Backward Propagation}
0
g
C̃k ← N2k U∗,k
g ← g − C̃k U∗,k
G∗,k ← −h̃k g − C̃k H∗,k+1
end for
C (t) ← H∗,1
∂L
←g
∂h(t−1)
∂L
←
G
∂U (t)

Theorem 2. Let n, m ∈ N s.t. m ≤ n−1. Let U ∈ Rn×m ,
h ∈ Rn , and C = (I − U T −1 U 0 )h, where T is defined in
Equation (12). If L is a scalar loss function which depends
on C, then we have
∂L
∂L 0
=U [(h̃C̃ 0 ) ◦ B 0 + (C̃ h̃0 ) ◦ B] −
h̃ − hC̃ 0 , (14)
∂U
∂C
∂L ∂L
=
− U C̃,
(15)
∂h ∂C
∂L
, and B =
where h̃ = T −1 U 0 h, C̃ = (T 0 )−1 U 0 ∂C
1
striu(J) + 2 I, with J being the m × m matrix of all ones
and ◦ the Hadamard product.

The proof of Equations (14) and (15) is provided in Appendix A. Based on Theorem 2, Algorithm 1 performs the
one-step forward-propagation (FP) and back-propagation
∂L
∂L
(BP) required to compute C (t) , ∂U
(t) , and ∂h(t−1) . See
Appendix B for more detail about how this algorithm is derived using Theorem 2.
In the next section we analyse the time and space complexities of this algorithm.
4.2. Time and Space complexity
At each time step t, the flop count required by Algorithm
1 is (13n + 2)m; 6nm for the one-step FP and (7n + 2)m
for the one-step BP. Note that the vector N only needs to
be calculated at one time step. This reduces the flop count
at the remaining time steps to (11n + 3)m. The fact that
the matrix U has all zeros in its upper triangular part can be
used to further reduce the total flop count to (11n − 3m +

Model
oRNN (n, m)
sRNN (n)

Flop counts
FP
BP
(4n − m + 2)m (7n − 2m + 3)m
2n2 − n
3n2 − n

Table 2. Summary of the flop counts due to the computations of
one-step FP and BP through the hidden-to-hidden connections.
The BP flop counts for the oRNN case assumes that the H matrices (see Algorithm 1) are not locally generated during the BP
steps. Otherwise, the flop count would be (11n − 3m + 5)m.

5)m; (4n − m + 2)m for the one-step FP and (7n − 2m +
3)m for the one-step BP. See Appendix C for more details.
Note that if the values of the matrices H, defined in Algorithm 1, are first stored during a “global” FP (i.e. through
all time steps), then used in the BP steps, the time complexity† for a global FP and BP using one input sequence
of length T are, respectively, ≈ 3n2 T and ≈ 5n2 T , when
m ≈ n and n  1. In contrast with the sRNN case with
n hidden units, the global FP and BP have time complexities ≈ 2n2 T and ≈ 3n2 T . Hence, when m ≈ n, the FP
and BP steps using our parametrisation require only about
twice more flops than the sRNN case with the same number
of hidden units.
Note, however, that storing the values of the matrices H at
all time steps requires the storage of mnT values for one
sequence of length T , compared with nT when only the
hidden states {h(t) }t=1 are stored. When m  1 this may
not be practical. One solution to this problem is to generate
the matrices H locally at each BP step using U and h(t−1) .
This results in a global BP complexity of (11n − 3m +
5)mT . Table 2 summarises the flop counts for the FP and
BP steps. Note that these flop counts are for the case when
m ≤ n − 1. When m = n, the complexity added due to the
multiplication by H1 (u1 ) is negligible.
4.3. Extension to the Unitary case
Although we decided to focus on the set of real-valued orthogonal matrices, for the reasons given in Section 3, our
parametrisation can readily be modified to apply to the general unitary case.
Let Ĥk : Ck → Cn×n , 2 ≤ k ≤ n, be defined by Equation
(6) where the transpose sign 0 is replaced by the conjugate
transpose ∗ . Furthermore, let Ĥ1 : Rn → Cn×n be defined
as Ĥ1 (θ) = diag(eiθ1 , . . . , eiθn ). With the new mappings
{Ĥk }k=n
k=1 , we have the following corollary.
†
We considered only the time complexity due to computations
through the hidden-to-hidden connections of the network.

Efficient Orthogonal Parametrisation of Recurrent Neural Networks

Corollary 1. Let M̂1 be the mapping defined as

1

M̂1 : Rn × C2 × · · · × Cn → Cn×n

LSTM

oRNN

sRNN

274 511 1066

244 519 1026

267 501 1051

# param

# param

# param

0.8

The image of M̂1 spans the full set of unitary matrices
U(n) and any point on its image is a unitary matrix.

NMSE

(θ, u2 , . . . , un ) 7→Ĥn (un ) . . . Ĥ2 (u2 )Ĥ1 (θ).
0.6

0.4

0.2

5. Experiments
All RNN models were implemented using the python library theano (Theano Development Team, 2016). For efficiency, we implemented the one-step FP and BP algorithms described in Algorithm 1 using C code‡ . We tested
the new parametrisation on five different datasets all having
long-term dependencies. We call our parametrised network
oRNN (for orthogonal RNN). We set its activation function
x
, x). To
to the leaky_ReLU defined as φ(x) = max( 10
ensure that the transition matrix of the oRNN is always orthogonal, we set the scalar u1 to -1 if u1 ≤ 0 and 1 otherwise after each gradient update. Note that the parameter
matrix U in Equation (9) has all zeros in its upper triangular
part. Therefore, after calculating the gradient of a loss with
∂L
respect to U (i.e. ∂U
), the values in the upper triangular
part are set to zero.
For all experiments, we used the adam method for stochastic gradient descent (Kingma & Ba, 2014). We initialised
all the parameters using uniform distributions similar to
(Arjovsky et al., 2016). The biases of all models were set
to zero, except for the forget bias of the LSTM, which we
set to 5 to facilitate the learning of long-term dependencies
(Koutnı́k et al., 2014).
5.1. Sequence generation
In this experiment, we followed a similar setting to
(Koutnı́k et al., 2014) where we trained RNNs to encode
song excerpts. We used the track Manyrista from album
Musica Deposita by Cuprum. We extracted five consecutive excerpts around the beginning of the song, each having 800 data points and corresponding to 18ms with a
44.1Hz sampling frequency. We trained an sRNN, LSTM,
and oRNN for 5000 epochs on each of the pieces with
five random seeds. For each run, the lowest Normalised
Mean Squared Error (NMSE) during the 5000 epochs was
recorded. For each model, we tested three different hidden
sizes. The total number of parameters Np corresponding
to these hidden sizes was approximately equal to 250, 500,
and 1000. For the oRNN, we set the number of reflection
vectors to the hidden size for each case, so that the transition matrix is allowed to span the full set of orthogonal
‡
Our implementation can be found at https://github.
com/zmhammedi/Orthogonal_RNN.

0

Figure 2. Sequence generation task: The plots show the NMSE
distributions for the different models with respect to the total number of parameters for the sequence generation task. The horizontal
red lines represent the medians of the NMSE over 25 data points
(i.e. five seeds for each of the five song excerpts). The solid
rectangles and the dashed bars represent the [25% − 75%] and
[9% − 91%] confidence intervals respectively.
1
0
True data

LSTM

True data

oRNN

True data

sRNN

-1
1
0
-1
1
0
-1

200

400

600

800

Figure 3. Sequence generation task: The RNN-generated sequences against the true data for one of the five excerpts used.
We only displayed the best performing models for Np ' 1000.

matrices. The results are shown in Figures 2 and 3. All the
learning rates were set to 10−3 . The orthogonal parametrisation outperformed the sRNN and performed on average
better than the LSTM.
5.2. Addition Task
In this experiment, we followed a similar setting to (Arjovsky et al., 2016), where the goal of the RNN is to output
the sum of two elements in the first dimension of a twodimensional sequence. The location of the two elements
to be summed are specified by the entries in the second
dimension of the input sequence. In particular, the first dimension of every input sequence consists of random numbers between 0 and 1. The second dimension has all zeros
except for two elements equal to 1. The first unit entry

Efficient Orthogonal Parametrisation of Recurrent Neural Networks

T = 400

0.5

T = 800

LSTM
sRNN
oRNN

0.4

LSTM
sRNN
oRNN

1

0.8
0.7
0.6
0.5
oRNN n=256, m=32, mBS=1, LR=10-4

0.3

0.4

5

10

15

20

epochs
0.2

Figure 5. MNIST experiment: Validation accuracy of the oRNN
in Table 3 as a function of the number of epochs. mBS and LR in
the legend stand for mini-batch size and learning rate respectively.

0.1
0

0

20

40

x 100 iterations

0

20

40

60

80

x 100 iterations

Figure 4. Addition task: For each lag T , the red curves represent
two runs of the oRNN model with two different random initialisation seeds. LSTM and sRNN did not beat the baseline MSE.

We trained an oRNN with n = 128 hidden units and
m = 16 reflections. We trained an LSTM and sRNN with
hidden sizes 28 and 54, respectively, corresponding to a total number of parameters ≈ 3600 (i.e. same as the oRNN
model). We chose a batch size of 50, and after each iteration, a new set of sequences was generated randomly. The
learning rate for the oRNN was set to 0.01. Figure 4 displays the results for both lags.
The oRNN was able to beat the baseline MSE in less than
5000 iterations for both lags and for two different random
initialisation seeds. This is in line with the results of the
unitary RNN (Arjovsky et al., 2016).
5.3. Pixel MNIST
In this experiment, we used the MNIST image dataset.
We split the dataset into training (55000 instances), validation (5000 instances), and test sets (10000 instances). We
trained oRNNs with n ∈ {128, 256} and m ∈ {16, 32, 64},
where n and m are the number of hidden units and reflections vectors respectively, to minimise the cross-entropy
error function. We experimented with (mini-batch size,
learning rate) ∈ {(1, 10−4 ), (50, 10−3 )}.
Table 3 compares the test performance of our best model
against results available in the literature for unitary/orthogonal RNNs. Despite having fewer total number of parameters, our model performed better than three out the four
models selected for comparison (all having ≥ 16K parameters). Figure 5 shows the validation accuracy as a function
of the number of epochs of our oRNN model in Table 3.

1

MNIST convergence plots for oRNN

0.9

Accuracy

MSE

MNIST convergence plot

0.9

Accuracy

is located in the first half of the sequence, and the second
one in the second half. We tested two different sequence
lengths T = 400, 800. All models were trained to minimise the Mean Squared Error (MSE). The baseline MSE
for this task is 0.167; for a model that always outputs one.

0.8
0.7
(n,m,mBS,LR)=(256,16,1,10 -4 )
(n,m,mBS,LR)=(256,32,1,10 -4 )
(n,m,mBS,LR)=(256,64,1,10 -4 )
(n,m,mBS,LR)=(128,32,50,10-3 )
(n,m,mBS,LR)=(128,64,50,10-3 )

0.6
0.5
0.4

2

4

6

epochs

Figure 6. MNIST experiment: Effect of varying the number of reflection vectors m on the validation accuracy and speed of convergence. mBS (resp, LR) stands for mini-batch size (resp, learning
rate).

Figure 6 shows the effect of varying the number of reflection vectors m on the performance.
5.4. Penn Tree Bank
In this experiment, we tested the oRNN on the task of character level prediction using the Penn Tree Bank Corpus.
The data was split into training (5017K characters), validation (393K characters), and test sets (442K characters).
The total number of unique characters in the corpus was 49.
The vocabulary size was 10K and any other words were replaced by the special token <unk>. The number of characters per instance (i.e. char/line) in the training data ranged
between 2 and 518 with an average of 118 char/line. We
trained an oRNN and LSTM with hidden units 512 and 183
respectively, corresponding to a total of ≈ 180K parameters, for 20 epochs. We set the number of reflections to 510

Efficient Orthogonal Parametrisation of Recurrent Neural Networks

Model
oRNN
RNN (Vorontsov et al., 2017)
uRNN (Arjovsky et al., 2016)
RC uRNN (Wisdom et al., 2016)
FC uRNN (Wisdom et al., 2016)

hidden size
(# reflections)
256 (m=32)
128
512
512
116

Number of
parameters
≈11K
≈35K
≈16K
≈16K
≈16K

validation
accuracy
97.0 %
-

test
accuracy
97.2 %
94.1 %
95.1 %
97.5 %
92.8 %

5-step1-step

Table 3. Results summary for the MNIST digit classification experiment and comparison with the uRNN results available in the literature.
’FC’ and ’RC’ stand for Full-Capacity and Restricted Capacity respectively. The oRNN with n = 256 was trained using a mini-batch
size of 1 and a learning rate of 10−4 .

Model (nh )
oRNN (512)
LSTM (184)
oRNN (512)
LSTM (183)

# params
183K
181K
183K
180K

valid cost
1.73
1.69
3.85
3.81

test cost
1.68
1.68
3.85
3.8

(i.e. the real representation of modReLU defined in Equation (4)) on the oRNN. This did not improve the performance compared to the leaky_ReLU case suggesting that
the block structure of the uRNN transition matrix, when expressed in the real space (see Section 3), may confer special
benefits in some cases.

Table 4. Results summary for the Penn Tree bank experiment.

6. Discussion
for the oRNN. The learning rate was set to 0.0001 for both
models with a mini-batch size of 1.
Similarly to (Pascanu et al., 2013) we considered two tasks:
one where the model predicts one character ahead and the
other where it predicts a character five steps ahead. It
was suggested that solving the later task would require the
learning of longer term correlations in the data rather than
the shorter ones. Table 4 summarises the test results. The
oRNN and LSTM performed similarly to each other on the
one-step head prediction task. Whereas on the five-step
ahead prediction task, the LSTM was better. The performance of both models on this task was close to the state of
the art result for RNNs 3.74 bpc (Pascanu et al., 2013).
Nevertheless, our oRNN still outperformed the results of
(Vorontsov et al., 2017) which used both soft and hard orthogonality constraints on the transition matrix. Their RNN
was trained on 99% of the data (sentences with ≤ 300 characters) and had the same number of hidden units as the
oRNN in our experiment. The lowest test cost achieved
was 2.20(bpc) for the one-step-ahead prediction task.
5.5. Copying task
We tested our model on the copy task described in details in
(Gers et al., 2001; Arjovsky et al., 2016). Using an oRNN
with the leaky_ReLU we were not able to reproduce the
same performance as the uRNN (Arjovsky et al., 2016;
Wisdom et al., 2016). However, we were able to achieve
a comparable performance when using the OPLU activation
function (Chernodub & Nowicki, 2016), which is a normpreserving activation function. In order to explore whether
the poor performance of the oRNN was only due to the activation function, we tested the same activation as the uRNN

In this work, we presented a new parametrisation of
the transition matrix of a recurrent neural network using Householder reflections. This method allows an easy
and computationally efficient way to enforce an orthogonal constraint on the transition matrix which then ensures
that exploding gradients do not occur during training. Our
method could also be applied to other deep neural architectures to enforce orthogonality between hidden layers. Note
that a “soft” orthogonal constraint could also be applied
using our parametrisation by, for example, allowing u1 to
vary continuously between -1 and 1.
It is important to note that our method is particularly advantageous for stochastic gradient descent when the minibatch size is close to 1. In fact, if B is the mini-batch size
and T is the average length of the input sequences, then
a network with n hidden units trained using other methods (Vorontsov et al., 2017; Wisdom et al., 2016; Hyland
& Rätsch, 2017) that enforce orthogonality (see Section 2),
would have time complexity O(BT n2 +n3 ). Clearly when
BT  n this becomes O(BT n2 ), which is the same time
complexity as that of the sRNN and oRNN (with m = n).
In contrast with the case of fully connected deep forward
networks with no weight sharing between layers (# layer
= L), the time complexity using our method is O(BLnm)
whereas other methods discussed in this work (see Section
2) would have time complexity O(BLn2 + Ln3 ). The latter methods are less efficient in this case since B  n is
less likely to be the case compared with BT  n when
using SGD.
From a performance point of view, further experiments
should be performed to better understand the difference between the unitary versus orthogonal constraint.

Efficient Orthogonal Parametrisation of Recurrent Neural Networks

Acknowledgment
The authors would like to acknowledge Department of
State Growth Tasmania for partially funding this work
through SenseT. We would also like to thank Christfried
Webers for his valuable feedback.

References
Arjovsky, Martin, Shah, Amar, and Bengio, Yoshua. Unitary evolution recurrent neural networks. In International Conference on Machine Learning (ICML), 2016.
Chernodub, Artem and Nowicki, Dimitri. Norm-preserving
orthogonal permutation linear unit activation functions
(oplu). arXiv preprint arXiv:1604.02313, 2016.
Gers, F. A., Eck, D., and Schmidhuber, J. Applying
LSTM to time series predictable through time-window
approaches. In Dorffner, Gerg (ed.), Artificial Neural
Networks – ICANN 2001 (Proceedings), pp. 669–676,
Berlin, 2001. Springer.
Glorot, Xavier and Bengio, Yoshua. Understanding the difficulty of training deep feedforward neural networks. In
Aistats, volume 9, pp. 249–256, 2010.
Henaff, Mikael, Szlam, Arthur, and LeCun, Yann. Orthogonal rnns and long-memory tasks. arXiv preprint
arXiv:1602.06662, 2016.
Hochreiter, Sepp and Schmidhuber, Jürgen. Long shortterm memory. Neural computation, 9(8):1735–1780,
1997.
Hochreiter, Sepp, Bengio, Yoshua, Frasconi, Paolo, and
Schmidhuber, Jürgen. Gradient flow in recurrent nets:
the difficulty of learning long-term dependencies, 2001.
Hyland, Stephanie L. and Rätsch, Gunnar. Learning
unitary operators with help from u(n).
In Proceedings of the Thirty-First AAAI Conference on
Artificial Intelligence, February 4-9, 2017, San Francisco, California, USA., pp. 2050–2058, 2017. URL
http://aaai.org/ocs/index.php/AAAI/
AAAI17/paper/view/14930.
Joffrain, Thierry, Low, Tze Meng, Quintana-Ortı́, Enrique S, Geijn, Robert van de, and Zee, Field G Van. Accumulating householder transformations, revisited. ACM
Transactions on Mathematical Software (TOMS), 32(2):
169–179, 2006.
Kingma, Diederik P. and Ba, Jimmy. Adam: A method
for stochastic optimization. CoRR, abs/1412.6980, 2014.
URL http://arxiv.org/abs/1412.6980.

Koutnı́k, Jan, Greff, Klaus, Gomez, Faustino J., and
Schmidhuber, Jürgen. A clockwork RNN. In Proceedings of the 31th International Conference on Machine
Learning, ICML 2014, Beijing, China, 21-26 June 2014,
pp. 1863–1871, 2014. URL http://jmlr.org/
proceedings/papers/v32/koutnik14.html.
Le, Quoc V., Jaitly, Navdeep, and Hinton, Geoffrey E. A
simple way to initialize recurrent networks of rectified
linear units. CoRR, abs/1504.00941, 2015. URL http:
//arxiv.org/abs/1504.00941.
Mikolov, Tomáš. Statistical language models based on
neural networks. PhD thesis, Brno University of Technology, 2012.
Pascanu, Razvan, Mikolov, Tomas, and Bengio, Yoshua.
On the difficulty of training recurrent neural networks.
ICML (3), 28:1310–1318, 2013.
Theano Development Team. Theano: A Python framework
for fast computation of mathematical expressions. arXiv
e-prints, abs/1605.02688, May 2016. URL http://
arxiv.org/abs/1605.02688.
Vorontsov, Eugene, Trabelsi, Chiheb, Kadoury, Samuel,
and Pal, Chris. On orthogonality and learning recurrent
networks with long term dependencies. arXiv preprint
arXiv:1702.00071, 2017.
Wisdom, Scott, Powers, Thomas, Hershey, John R., Roux,
Jonathan Le, and Atlas, Les E. Full-capacity unitary recurrent neural networks. In Advances in Neural Information Processing Systems 29: Annual Conference on
Neural Information Processing Systems 2016, December
5-10, 2016, Barcelona, Spain, pp. 4880–4888, 2016.

