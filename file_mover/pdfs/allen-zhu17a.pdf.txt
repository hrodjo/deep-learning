Natasha: Faster Non-Convex Stochastic Optimization
via Strongly Non-Convex Parameter

Zeyuan Allen-Zhu 1

Abstract
Given a non-convex function f (x) that is an average of n smooth functions, we design stochastic first-order methods to find its approximate
stationary points. The performance of our new
methods depend on the smallest (negative) eigenvalue −σ of the Hessian. This parameter σ
captures how strongly non-convex f (x) is, and
is analogous to the strong convexity parameter
for convex optimization. At least in theory, our
methods outperform known results for a range of
parameter σ, and can also be used to find approximate local minima. Our result implies an interesting dichotomy: there exists a threshold σ0 so
that the (currently) fastest methods for σ > σ0
and for σ < σ0 have different behaviors: the former scales with n2/3 and the latter scales with
n3/4 .

1

Introduction

We study the problem of composite non-convex minimization:
n
o
n
1X
fi (x)
min F (x) := ψ(x) + f (x) := ψ(x) +
n i=1
x∈Rd
(1.1)
where each fi (x) is nonconvex but smooth, and ψ(·) is
proper convex, possibly nonsmooth, but relatively simple.
We are interested in finding a point x that is an approximate
local minimum of F (x).
Pn
• The finite-sum structure f (x) = n1 i=1 fi (x) arises
prominently in large-scale machine learning tasks. In
particular, when minimizing loss over a training set,
each example i corresponds to one loss function fi (·)
in the summation. This finite-sum structure allows one
to perform stochastic gradient descent with respect to a
Future version of this paper shall be found at http://
arxiv.org/abs/1702.00763. 1 Microsoft Research. Correspondence to: Zeyuan Allen-Zhu <zeyuan@csail.mit.edu>.
Proceedings of the 34 th International Conference on Machine
Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017
by the author(s).

random ∇fi (x).
• The so-called proximal term ψ(x) adds more generality to the model. For instance, if ψ(x) is the indicator
function of a convex set, then problem (1.1) becomes
constraint minimization; if ψ(x) = kxk1 , then we can
allow problem (1.1) to perform feature selection. In
general, ψ(x) has to be a simple function where the
1
kx − x0 k2 }
projection operation arg minx {ψ(x) + 2η
is efficiently computable. At a first reading of this paper, one can assume ψ(x) ≡ 0 for simplicity.
Many non-convex machine learning problems fall into
problem (1.1). Most notably, training deep neural networks
and classifications with sigmoid loss correspond to (1.1)
where neither fi (x) or f (x) is convex. However, our understanding to this challenging non-convex problem is very
limited.
1.1

Strongly Non-Convex Optimization

Let L be the smoothness parameter for each fi (x), meaning
all the eigenvalues of ∇2 fi (x) lie in [−L, L].1
We denote byP
σ ∈ [0, L] the strong-nonconvexity parameter
n
of f (x) = n1 i=1 fi (x), meaning that
all the eigenvalues of ∇2 f (x) lie in [−σ, L].
We emphasize that parameter σ is analogous to the strongconvexity parameter µ for convex optimization, where all
the eigenvalues of ∇2 f (x) lie in [µ, L] for some µ > 0.
We wish to find an ε-approximate stationary point (a.k.a.
critical point) of F (x), that is
a point x satisfying kG(x)k ≤ ε
where G(x) is the so-called gradient mapping of F (x) (see
Section 2 for a formal definition). In the special case of
ψ(·) ≡ 0, gradient mapping G(x) is the same as gradient
∇f (x), so x satisfies k∇f (x)k ≤ ε.
Since f (·) is σ-strongly nonconvex, any ε-approximate stationary point is automatically also an (ε, σ)-approximate
local minimum — meaning that the Hessian of the output
point ∇2 f (x)  −σI is approximately positive semidefinite (PSD).
1
This definition also applies to functions f (x) that are not
twice differentiable, see Section 2 for details.

Natasha: Faster Non-Convex Stochastic Optimization Via Strongly Non-Convex Parameter

1.2

Motivations and Remarks
complexity (log-scale)

• We focus on strongly non-convex optimization because
introducing this parameter σ allows us to perform a
more refined study of non-convex optimization. If σ
equals L then L-strongly nonconvex optimization is
equivalent to the general non-convex optimization.
• We focus only on finding stationary points as opposed to local minima, because in a recent study —
see Appendix A— researchers have shown that finding
(ε, δ)-approximate local minima reduces to finding εapproximate stationary points in an O(δ)-strongly nonconvex function.
• Parameter σ is often not constant and can be much
smaller than√L. For instance, second-order methods often find (ε, ε)-approximate local√minima (Nesterov,
2008) and this corresponds to σ = ε.
1.3

Known Results

Despite the widespread use of nonconvex models in machine learning and related fields, our understanding to nonconvex optimization is still very limited. Until recently,
nearly all research papers have been mostly focusing on either σ = 0 or σ = L:
• If σ = 0, the accelerated SVRG method (ShalevShwartz, 2016; Allen-Zhu & Yuan, 2016) finds x satisfying F (x)p− F (x∗ ) ≤ ε, in gradient complexity

e n + n3/4 L/ε .2 This result is irrelevant to this
O
paper because f (x) is simply convex.
• If σ = L, the SVRG method (Allen-Zhu & Hazan,
2016) finds an ε-approximate stationary point of F (x)
in gradient complexity O(n + n2/3 L/ε2 ).
• If σ = L, gradient descent finds an ε-approximate stationary point in gradient complexity O(nL/ε2 ).
• If σ = L, stochastic gradient descent finds an ε-approx.
stationary point in gradient complexity O(L2 /ε4 ).
Throughout this paper, we refer to gradient complexity
as the total number of stochastic gradient computations
∇fi (x) and proximal computations y ← Proxψ,η (x) :=
1
arg miny {ψ(y) + 2η
ky − xk2 }.3
Very recently, it was observed by two independent
groups (Agarwal et al., 2017; Carmon et al., 2016) —
although implicitly, see Section 2.1— that for solving the
σ-strongly nonconvex problem, one can repeatedly regularize F (x) to make it σ-strongly convex, and then apply
the accelerated SVRG method to minimize this regularized
2

e to hide poly-logarithmic factors in n, L, 1/ε.
We use O
Some authors also refer to them as incremental first-order oracle (IFO) and proximal oracle (PO) calls. In most machine learning applications, each IFO and PO call can be implemented to run
in time O(d) where d is the dimension of the model, or even in
time O(s) if s is the average sparsity of the data vectors.
3

𝜎=0

𝑛𝐿
𝜀2

𝑛𝜎
𝜀2
𝑛2/3 𝐿2 𝜎
𝜀2
𝑛3/4 𝐿𝜎
𝜀2

1/2

𝜎 = 𝐿/ 𝑛

𝑛2/3 𝐿
𝜀2

1/3

repeatSVRG
Natasha
SVRG
gradient descent
𝜎=𝐿

Figure 1: Comparison to prior works

function. Under mild assumption σ ≥ ε2 , this approach
• finds an ε-approximate
stationary point in gradient
√

Lσ
e nσ+n3/4
complexity O
.
ε2
We call this method repeatSVRG in this paper. Unfortunately, repeatSVRG is even slower than the vanilla SVRG
for σ = L by a factor n1/3 , see Figure 1.
Remark on SGD. Stochastic gradient descent (SGD) has
a slower convergence rate (i.e., in terms of 1/ε4 ) than other
cited first-order methods (i.e., in terms of 1/ε2 ), see for
instance (Ghadimi & Lan, 2015). However, the complexity
of SGD does not depend on n and thus is incomparable to
gradient descent, SVRG, or repeatSVRG.4 This is one of
the main motivations to study how to reduce the complexity
of non-SGD methods, especially in terms of n.
1.4

Our New Results

In this paper, we identify an interesting dichotomy with respect to the spectrum of the nonconvexity parameter
√ σ ∈
[0, L]. In particular, we showed that if σ ≥ L/ n, then
our new method Natasha finds an ε-approximate stationary point of F (x) in gradient complexity

1 n2/3 (L2 σ)1/3 
O n log +
.
ε
ε2
In other words, together with repeatSVRG, we have improved the gradient complexity for σ-stringly nonconvex
optimization to5

n 3/4 √Lσ n2/3 (L2 σ)1/3 o
e min n
O
,
ε2
ε2
√
and the first term in the min is smaller
√ if σ < L/ n and
the second term is smaller if σ > L/ n. We illustrate our
4

In practice, there are examples in non-convex empirical risk
minimization (Allen-Zhu & Hazan, 2016) and in training neural
networks (Allen-Zhu & Hazan, 2016; Reddi et al., 2016) where
SVRG can outperform SGD. Of course, for deep learning tasks,
SGD remains to be the best practical method of choice.
5
We remark here that this is under mild assumptions for ε being sufficiently small. For instance, the result of (Agarwal et al.,
2017; Carmon et al., 2016) requires ε2 ≤ σ. In our result, the
term n log 1ε disappears when ε6 ≤ L2 σ/n.

Natasha: Faster Non-Convex Stochastic Optimization Via Strongly Non-Convex Parameter

performance improvement in Figure 1. Our result matches
that of SVRG for σ = L, and has a much simpler analysis.
Additional Results. One can take a step further and ask
what if each function fi (x) is (`1 , `2 )-smooth for parameters `1 , `2 ≥ σ, meaning that all the eigenvalues of ∇2 fi (x)
lie in [−`2 , `1 ].
We show that a variant of our method, which we call
Natashafull , solves this more refined problem of (1.1) with
2/3
1/3 
as
total gradient complexity O n log 1ε + n (`1ε2`2 σ)
long as `σ1 `22 ≤ n2 .
Remark 1.1. In applications, `1 and `2 can be of very different magnitudes. The most influential example is finding
the leading eigenvector of a symmetric matrix. Using the
so-called shift-and-invert reduction (Garber et al., 2016),
computing the leading eigenvector reduces to the convex version of problem (1.1), where each fi (x) is (λ, 1)smooth for λ  1. Other examples include all the applications that are built on shift-and-invert, including high
rank SVD/PCA (Allen-Zhu & Li, 2016), canonical component analysis (Allen-Zhu & Li, 2017a), online matrix learning (Allen-Zhu & Li, 2017b), and approximate local minima algorithms (Agarwal et al., 2017; Carmon et al., 2016).
Mini-Batch. Our result generalizes trivially to the minibatch stochastic setting, where in each iteration one computes ∇fi (x) for b random choices of index i ∈ [n] and average them. The stated gradient complexities of Natasha
and Natashafull can be adjusted so that the factor n2/3 is
replaced with n2/3 b1/3 .
1.5

Our New Idea. In this paper, we propose Natasha and
Natashafull , two methods that are no longer black-box reductions to SVRG. Both of them still divide iterations into
e the
epochs of length n, and compute gradient estimators ∇
same way as SVRG. However, we do not apply compute
e directly.
xt − α ∇
• In our base algorithm Natasha, we divide each epoch
into p sub-epochs, each with a starting vector b
x. Our
σ2
1/3
n)
.
Then,
we
theory suggests the choice p ≈ ( L
2
e
e
replace the use of ∇ with ∇ + 2σ(xt − b
x). This is
equivalent to replacing f (x) with its regularized version
f (x) + σkx −b
xk2 , where the center b
x varies across subepochs. We provide pseudocode in Algorithm 1 and illustrate it in Figure 2.
We view this additional term 2σ(xt − b
x) as a type of
retraction, which stabilizes the algorithm by moving
the vector a bit in the backward direction towards b
x.
• In our full algorithm Natashafull , we add one more ingredient on top of Natasha. That is, we perform upe with respect to a difdates zt+1 ← Proxψ,α (zt − α∇)
x
ferent sequence {zt }, and then define xt = 21 zt + 12 b
e at points xt . We
and compute gradient estimators ∇
provide pseudocode in Algorithm 2 in the appendix.
We view this averaging xt = 21 zt + 21 b
x as another type
of retraction, which stabilizes the algorithm by moving towards b
x. The technique of computing gradients at
points xt but moving a different sequence of points zt is
related to the Katyusha momentum recently developed
for convex optimization (Allen-Zhu, 2017).

Our Techniques

Let us first recall the main idea behind stochastic variancereduced methods, such as SVRG (Johnson & Zhang, 2013).
The SVRG method divides iterations into epochs, each of
e for each epoch,
length n. It maintains a snapshot point x
and computes the full gradient ∇f (e
x) only for snapshots.
Then, in each iteration t at point xt , SVRG defines gradient
e = ∇fi (xt ) − ∇fi (e
estimator ∇
x) + ∇f (e
x) which satisfies
e
Ei [∇] = ∇f (xt ), and performs proximal update xt+1 ←

e for some learning rate α. (Recall that
Proxψ,α xt − α∇
e
if ψ(·) ≡ 0 then we would have xt+1 ← xt − α∇.)
In nearly all the aforementioned results for nonconvex optimization, researchers have either directly applied
SVRG (Allen-Zhu & Hazan, 2016) (for the case σ = L),
or repeatedly applied SVRG (Agarwal et al., 2017; Carmon
et al., 2016) (for general σ ∈ [0, L]). This puts some limitation in the algorithmic design, because SVRG requires
each epoch to be of length exactly n.6
6

The epoch length of SVRG is always n (or a constant multiple of n in practice), because this ensures the computation of
e is of amortized gradient complexity O(1). The per-iteration
∇
complexity of SVRG is thus the same as the traditional stochastic

1.6

Other Related Work

Methods based on variance-reduced stochastic gradients
were first introduced for convex optimization. The first
such method is SAG by Schmidt et al (Schmidt et al.,
2013). The two most popular choices for gradient estimators are the SVRG-like one we adopted in this paper (independently introduced by (Johnson & Zhang, 2013; Zhang
et al., 2013), and the SAGA-like one introduced by (Defazio et al., 2014). In nearly all applications, the results
proven for SVRG-like estimators and SAGA-like estimators are simply exchangeable (therefore, the results of this
paper naturally generalize to SAGA-like estimators).
The first “non-convex use” of variance reduction is by
Shalev-Shwartz (Shalev-Shwartz, 2016) who assumes that
each fi (x) is non-convex but their average f (x) is still convex. This result has been slightly improved to several more
refined settings (Allen-Zhu & Yuan, 2016). The first truly
non-convex use of variance reduction (i.e., for f (x) being
also non-convex) is independently by (Allen-Zhu & Hazan,
2016) and (Reddi et al., 2016). First-order methods only
gradient descent (SGD).

Natasha: Faster Non-Convex Stochastic Optimization Via Strongly Non-Convex Parameter
next 𝒙
𝒙

…

…

…
…

…
regularized by 𝜎 𝑥 − 𝑥

…
2

regularized by 𝜎 𝑥 − 𝑥

…
2

regularized by 𝜎 𝑥 − 𝑥

2

Figure 2: One full epoch of Natasha. The n iterations are divided into p sub-epochs, each consisting of m = n/p steps.

find stationary points (unless there is extra assumption on
the randomness of the data), and converge no faster than
1/ε2 .
When the second-order Hessian information is used, one
can (1) find local minima instead of stationary points, and
(2) improve the 1/ε2 rate to 1/ε1.5 . The first such result is by cubic-regularized Newton’s method (Nesterov,
2008); however, its per-iteration complexity is very high.
Very recently, two independent groups of authors tackled
this problem from a somewhat similar viewpoint (Carmon
et al., 2016; Agarwal et al., 2017): if the computation
of

Hessian-vector multiplications (i.e., ∇2 fi (x) v) is on the
same order of the computation
of gradients ∇fi (x),7 then
√
one can obtain a (ε, ε)-approximate local minimum in
3/4 
n
e 1.5
gradient complexity O
+ εn1.75 , if we use big-O to
ε
also hide dependencies on the smoothness parameters.
Other related papers include Ge et al. (Ge et al., 2015)
where the authors showed that a noise-injected version of
SGD converges to local minima instead of critical points,
as long as the underlying function is “strict-saddle.” Their
theoretical running time is a large polynomial in the dimension. Lee et al. (Lee et al., 2016) showed that gradient
descent, starting from a random point, almost surely converges to a local minimum if the function is “strict-saddle”.
The rate of convergence required is somewhat unknown.

2

Preliminaries

Throughout this paper, we denote by k · k the Euclidean
norm. We use i ∈R [n] to denote that i is generated from
[n] = {1, 2, . . . , n} uniformly at random. We denote by
∇f (x) the full gradient of function f if it is differentiable,
and ∂f (x) any subgradient if f is only Lipschitz continuous at point x. We let x∗ be any minimizer of F (x).
Recall some definitions on strong convexity (SC), strongly
nonconvexity, and smoothness.
Definition 2.1. For a function f : Rd → R,
7

A lot of interesting problems satisfy this property, including
training neural nets.

• f is σ-strongly convex if ∀x, y ∈ Rd , it satisfies
σ
f (y) ≥ f (x) + h∂f (x), y − xi + kx − yk2 .
2
• f is σ-strongly nonconvex if ∀x, y ∈ Rd , it satisfies
σ
f (y) ≥ f (x) + h∂f (x), y − xi − kx − yk2 .
2
d
• f is (`1 , `2 )-smooth if ∀x, y ∈ R , it satisfies
`1
2 kx

− yk2 ≥ f (y)
`2
≥ f (x) + h∇f (x), y − xi − kx − yk2 .
2
• f is L-smooth if it is (L, L)-smooth.
f (x) + h∇f (x), y − xi +

The (`1 , `2 )-smoothness parameters were introduced
in (Allen-Zhu & Yuan, 2016) to tackle the convex setting
of problem (1.1). The notion of strong nonconvexity is
also known as “almost convexity (Carmon et al., 2016)”
or “lower smoothness (Allen-Zhu & Yuan, 2016).” We refrain from using the name “almost convexity” because it
coincides with several other non-equivalent definitions in
optimization literatures.
Definition 2.2. Given a parameter η > 0, the gradient
mapping of F (·) in (1.1) at point x is

1
Gη (x) :=
x − x0
η

	
1
where x0 = arg miny ψ(y) + h∇f (x), yi + 2η
ky − xk2 .
In particular, if ψ(·) ≡ 0, then Gη (x) ≡ ∇f (x).
The following theorem for the SVRG method can be found
for instance in (Allen-Zhu & Yuan, 2016), which is built on
top of the results (Shalev-Shwartz, 2016; Lin et al., 2015;
Frostig et al., 2015):
Pn
Theorem 2.3 (SVRG). Let G(y) := ψ(y) + n1 i=1 gi (y)
be σ-strongly convex, then the SVRG method finds a point
y satisfying G(y) − G(y ∗ ) ≤ ε

2
1
• with gradient complexity O (n + L
σ 2 ) log ε , if each
gi (·) is L-smooth (for L ≥ σ); or
• with gradient complexity O (n + `σ1 `22 ) log
gi (·) is (`1 , `2 )-smooth (for `1 , `2 ≥ σ).

1
ε



, if each

Natasha: Faster Non-Convex Stochastic Optimization Via Strongly Non-Convex Parameter

If one performs
the running times become
p acceleration,

e n + n3/4 L/σ and O
e n + n3/4 (`1 `2 σ 2 )1/4 .
O
2.1

RepeatSVRG

We recall the idea behind a simple algorithm —that we call
repeatSVRG— which finds the ε-approximate stationary
points for problem (1.1) when f (x) is σ-strongly nonconvex. The algorithm is divided into stages. In each stage t,
consider a modified function Ft (x) := F (x) + σkx − xt k2 .
It is easy to see that Ft (x) is σ-strongly convex, so one can
apply the accelerated SVRG method to minimize Ft (x).
Let xt+1 be any sufficiently accurate approximate minimizer of Ft (x).8
Now, one can prove (c.f. Section 4) that xt+1 is an
O(σkxt − xt+1 k)-approximate stationary point for F (x).
Therefore, if σkxt − xt+1 k ≤ ε we can stop the algorithm
because we have already found an O(ε)-approximate stationary point. If σkxt − xt+1 k > ε , then it must satisfy that F (xt ) − F (xt+1 ) ≥ σkxt − xt+1 k2 ≥ Ω(ε2 /σ),
but this cannot happen for more than T = O εσ2 (F (x0 ) −
F ∗ ) stages. Therefore, the total gradient complexity is
T multiplied with the complexity of
paccelerated SVRG
e + n3/4 L/σ) according to
in each stage (which is O(n
Theorem 2.3).
Remark 2.4. The complexity of repeatSVRG can be inferred from (Agarwal et al., 2017; Carmon et al., 2016), but
is not explicitly stated. For instance, the paper (Carmon
et al., 2016) does not allow F (x) to have a non-smooth
proximal term ψ(x), and applies accelerated gradient descent instead of accelerated SVRG.

3

Our Algorithms

We introduce two variants of our algorithms: (1) the base
method Natasha targets on the simple regime when f (x)
and each fi (x) are both L-smooth, and (2) the full method
Natashafull targets on the more refined regime when f (x)
is L-smooth but each fi (x) is (`1 , `2 )-smooth.
Both methods follow the general idea of variance-reduced
stochastic gradient descent: in each inner-most iteration,
e that is of the form
they compute a gradient estimator ∇
e
e =
∇ = ∇f (e
x)−∇fi (e
x)+∇fi (x) and satisfies Ei∈R [n] [∇]
e is a snapshot point that is changed once
∇f (x). Here, x
every n iterations (i.e., for each different k = 1, 2, . . . , T 0
in the pseudocode), and we call it a full epoch for every
distinct k. Notice that the amortized gradient complexity
e is O(1) per-iteration.
for computing ∇
Base Method. In Natasha (see Algorithm 1), as illustrated by Figure 2, we divide each full epoch into p subepochs s = 0, 1, . . . , p − 1, each of length m = n/p. In
8

Since the accelerated SVRG method has a linear convergence
rate for strongly convex functions, the complexity to find such
xt+1 only depends logarithmically on this accuracy.

each sub-epoch s, we start with a point x0 = b
x, and replace
f (x) with its regularized version f s (x) := f (x) + σkx −
b
xk2 . Then, in each iteration t of the sub-epoch s, we
e with respect to f s (xt ),
• compute gradient estimator ∇

e yi +
• perform update xt+1 = arg miny ψ(y) + h∇,
	
1
2
ky
−
x
k
with
learning
rate
α.
t
2α
Effectively, the introduction of the regularizer σkx − b
xk2
makes sure that when performing update xt ← xt+1 , we
also move a bit towards point b
x (i.e., retraction by regularization). Finally, when the sub-epoch is done, we define b
x
to be a random one from {x0 , . . . , xm−1 }.
Full Method. In Natashafull (see full version), we also
divide each full epoch into p sub-epochs. In each sub-epoch
s, we start with a point x0 = z0 = b
x and define f s (x) :=
2
f (x) + σkx − b
xk . However, this time in each iteration t,
we
e with respect to f s (xt ),
• compute gradient estimator ∇

e yi +
• perform update zt+1 = arg miny ψ(y) + h∇,
	
1
2
with learning rate α, and
2α ky − zt k
x.
• choose xt+1 = 21 zt+1 + 12 b
Effectively, the regularizer σkx−b
xk2 makes sure that when
performing updates, we move a bit towards point b
x (i.e.,
retraction by regularization); at the same time, the choice
xt+1 = 21 zt+1 + 12 b
x also helps us move towards point b
x
(i.e., retraction by the so-called “Katyusha momentum”9 ).
Finally, when the sub-epoch is over, we define b
x to be a
random one from the set {x0 , . . . , xm−1 }, and move to the
next sub-epoch.

4

A Sufficient Stopping Criterion

In this section, we present a sufficient condition for finding
approximate stationary points in a σ-strongly nonconvex
function. Lemma 4.1 below states that, if we regularize the
original function and define G(x) := F (x) + σkx − b
xk2
for an arbitrary point b
x, then the minimizer of G(x) is an
approximate saddle-point for F (x).
Lemma 4.1. Suppose G(y) = F (y) + σky −b
xk2 for some
∗
given point b
x, and let x be the minimizer of G(y). If we
minimize G(y) and obtain a point x satisfying
G(x) − G(x∗ ) ≤ δ 2 σ ,

1
then for every η ∈ 0, max{L,4σ}
we have the gradient
mapping

kGη (x)k2 ≤ 12σ 2 kx∗ − b
xk2 + O δ 2 .
Notice that when ψ(x) ≡ 0 this lemma is trivial, and can
be found for instance in (Carmon et al., 2016). The main
9
The idea for this second kind of retraction, and the idea of
having the updates on a sequence zt but computing gradients at
points xt , is largely motivated by our recent work on the Katyusha
momentum and the Katyusha acceleration (Allen-Zhu, 2017).

Natasha: Faster Non-Convex Stochastic Optimization Via Strongly Non-Convex Parameter

Algorithm 1 Natasha(x∅ , p, T 0 , α)
Input: starting vector x∅ , sub-epoch count p ∈ [n], epoch count T 0 , learning rate α > 0.
Output: vector xout .
1: b
x ← x∅ ; m ← n/p; X ← [];
2: for k ← 1 to T 0 do
 T 0 full epochs
e ←b
3:
x
x; µ ← ∇f (e
x);
4:
for s ← 0 to p − 1 do
 p sub-epochs in each epoch
5:
x0 ← b
x; X ← [X, b
x];
6:
for t ← 0 to m − 1 do
 m iterations in each sub-epoch
7:
i ← a random choice from {1, · · · , n}.

e ← ∇fi (xt ) − ∇fi (e
e = ∇ f (x) + σkx − b
8:
∇
x) + µ + 2σ(xt − b
x)
 Ei [∇]
xk2 x
t
	

1
e yi
ky − xt k2 + h∇,
9:
xt+1 = arg miny∈Rd ψ(y) + 2α
10:
end for
b
11:
x ← a random choice from {x0 , x1 , . . . , xm−1 };
 for practitioners, choose the average
12:
end for
13: end for
14: b
x ← a random vector in X;
 for practitioners, choose the last
15: xout ← an approximate minimizer of G(y) := F (y) + σky − b
xk2 using SVRG.
16: return xout .
 it suffices to run SVRG for O(n log 1ε ) iterations.

technical difficulty arises in order to deal with ψ(x) 6= 0.
The proof is included in the full version.

5

Base Method: Analysis for One Full Epoch

In this section, we consider problem (1.1) where each fi (x)
is L-smooth and F (x) is σ-strongly nonconvex. We use
our base method Natasha to minimize F (x), and analyze
its behavior for one full epoch in this section. We assume
σ ≤ L without loss of generality, because any L-smooth
function is also L-strongly nonconvex.
Notations. We introduce the following notations for analysis purpose only.
• Let b
xs be the vector b
x at the beginning of sub-epoch s.
• Let xst be the vector xt in sub-epoch s.
• Let ist be the index i ∈ [n] in sub-epoch s at iteration t.
• Let f s (x) := f (x) + σkx − b
xs k2 , F s (x) := F (x) +
s 2
s
b
σkx − x k , and x∗ := arg minx {F s (x)}.
e s (xs ) := ∇fi (xs )−∇fi (e
• Let ∇f
x)+∇f (e
x)+2σ(xt −
t
t
b
x) where i = ist .
e (xst ) := ∇fi (xst ) − ∇fi (e
x) + ∇f (e
x) where
• Let ∇f
i = ist .
We obviously have that f s (x) and F s (x) are σ-strongly
convex, and f s (x) is (L + 2σ)-smooth.
5.1

Variance Upper Bound

The following lemma gives an upper bound on the variance
e s (xst ):
of the gradient estimator ∇f


e s (xst ) − ∇f s (xst )k2 ≤
Lemma 5.1. We have Eist k∇f
P
s−1
pL2 kxst − b
xs k2 + pL2 k=0 kb
xk − b
xk+1 k2 .

Proof. We have




e s (xst ) − ∇f s (xst )k2 = Eis k∇f
e (xst ) − ∇f (xst )k2
Eist k∇f
t


2 
= Ei∈R [n]  ∇fi (xst ) − ∇fi (e
x) − ∇f (xst ) − ∇f (e
x)) 
¬
2 

≤ Ei∈ [n] ∇fi (xst ) − ∇fi (e
x )
R

­

2 

≤ pEi∈R [n] ∇fi (xst ) − ∇fi (b
xs )
2 

Ps−1
+ p k=0
Ei∈R [n] ∇fi (b
xk ) − ∇fi (b
xk+1 )
®
Ps−1 k
≤ pL2 kxst − b
xs k2 + pL2 k=0
kb
x −b
xk+1 k2 .

Above, inequality ¬ is because for any random vector ζ ∈
Rd , it holds that Ekζ − Eζk2 = Ekζk2 − kEζk2 ; inequality
e and for any p vectors a1 , a2 , . . . , ap ∈
­ is because b
x0 = x
d
R , it holds that ka1 +· · ·+ap k2 ≤ pka1 k2 +· · ·+pkap k2 ;
and inequality ® is because each fi (·) is L-smooth.

5.2

Analysis for One Sub-Epoch

The following inequality is classically known as the “regret inequality” for mirror descent (Allen-Zhu & Orecchia,
2017), and its proof is classical (see full version):
e s (xst ), xs − ui + ψ(xs ) − ψ(u) ≤
Fact 5.2. h∇f
kxst −uk2
2α

−

kxst+1 −uk2
2α

t+1
kxs −xs k2
− t+12α t

t+1

for every u ∈ Rd .

The following lemma is our main contribution for the base
method Natasha.
Lemma 5.3. As long as α ≤
h
i
E F s (b
xs+1 ) − F s (xs∗ )

1
2L+4σ ,

we have

s
i
h F s (b
X
xs ) − F s (xs∗ )
≤E
+αpL2
kb
xk −b
xk+1 k2
.
σαm/2
k=0

Natasha: Faster Non-Convex Stochastic Optimization Via Strongly Non-Convex Parameter

Proof. We first compute that
F s (xst+1 ) − F s (u) = f s (xst+1 ) − f s (u) + ψ(xst+1 ) − ψ(u)
¬

≤ f s (xst ) + h∇f s (xst ), xst+1 − xst i +

Dividing both sides by m and rearranging the terms (using
1
2σα ≥ 1), we have

L + 2σ s
kxt − xst+1 k2
2

h
i
E F s (b
xs+1 ) − F s (xs∗ )

− f s (u) + ψ(xst+1 ) − ψ(u)
­

L + 2σ s
kxt − xst+1 k2
2
+ h∇f s (xst ), xst − ui + ψ(xst+1 ) − ψ(u) .

≤E

≤ h∇f s (xst ), xst+1 − xst i +

(5.1)

s

Above, inequality ¬ uses the fact that f (·) is (L + 2σ)smooth; and inequality ­ uses the convexity of f s (·). Now,
we take expectation with respect to ist on both sides of (5.1),
and derive that:


Eist F s (xst+1 ) − F s (u)
h
¬
e s (xst ) − ∇f s (xst ), xst − xst+1 i + h∇f
e s (xst ), xst+1 − ui
≤ Eist h∇f
i
L + 2σ s
kxt − xst+1 k2 + ψ(xst+1 ) − ψ(u)
+
2
h
s
2
­
e s (xst ) − ∇f s (xst ), xst − xst+1 i + kxt − uk
≤ Eist h∇f
2α
i
kxst+1 − uk2
1
L + 2σ  s
−
−
kxt+1 − xst k2
−
2α
2α
2
h 
s
2i
s
2
®

2
e s (xst ) − ∇f s (xst ) + kxt − uk − kxt+1 − uk
≤ Eist α∇f
2α
2α
s−1
h
X
¯
≤ Eist αpL2 kxst − b
xs k2 + αpL2
kb
xk − b
xk+1 k2
k=0

kxs − uk2 i
kxs − uk2
+ t
− t+1
.
2α
2α

(5.2)

Above, inequality ¬ is follows from (5.1) together with
e s (xst )] = ∇f s (xst ) implies
the fact that Eist [∇f


Eist h∇f s (xst ), xst+1 − xst i + h∇f s (xst ), xst − ui


e s (xst )−∇f s (xst ), xst −xst+1 i+h∇f
e s (xst ), xst+1 −ui ;
= Eist h∇f
1
inequality ­ uses Fact 5.2; inequality ® uses α ≤ 2L+4σ
1
1
together with Young’s inequality ha, bi ≤ 2 kak2 + 2 kbk2 ;
and inequality ¯ uses Lemma 5.1.
Finally, choosing u = xs∗ to be the (unique) minimizer of
F s (·) = f s (·) + ψ(·), and telescoping inequality (5.2) for
t = 0, 1, . . . , m − 1, we have

h m−1
X
i
E
F s (xst ) − F s (xs∗ )
t=1

h kxs − xs k2 m−1
X
0
∗
≤E
+
αpL2 kxst − b
xs k2
2α
t=0
+ αpL2

s−1
X

kb
xk − b
xk+1 k2

i

k=0
s
h F s (b
i
X
xs ) − F s (xs∗ )
≤E
+ αpmL2
kb
xk − b
xk+1 k2
.
σα
k=0

Above, the second inequality uses the fact that b
xs+1 is chos
s
sen from {x0 , . . . , xm−1 } uniformly at random, as well as
the σ-strong convexity of F s (·).

5.3

h F s (b
xs ) − F s (xs )
∗

σαm/2

+ αpL2

s
X

kb
xk − b
xk+1 k2

i

.



k=0

Analysis for One Full Epoch

One can telescope Lemma 5.3 for an entire epoch and arrive at the following lemma (see full version):
1
4
Lemma 5.4. If α ≤ 2L+4σ
, α ≥ σm
and α ≤ p2σL2 , we
have
p−1 h
h
i
X
i
E F s (b
xs ) − F s (xs∗ ) ≤ 2E F (b
x0 ) − F (b
xp ) .
s=0

6

Base Method: Final Theorem

We are now ready to state and prove our main convergence
theorem for Natasha:
Theorem 1. Suppose in (1.1), each fi (x) is L-smooth
and F (x) is σ-strongly nonconvex for σ ≤ L. Then, if

L2
σ2
1/3
and α = Θ( p2σL2 ), our base
σ 2 ≤ n, p = Θ ( L2 n)
method Natasha outputs a point xout satisfying
 2 1/3 2/3 
E[kGη (xout )k2 ] ≤ O (L σ)T 0 n n
· (F (x∅ ) − F ∗ ) .

1
. In other words, to obtain
for every η ∈ 0, max{L,4σ}
E[kGη (xout )k2 ] ≤ ε2 , we need gradient complexity


1 (L2 σ)1/3 n2/3
· (F (x∅ ) − F ∗ ) .
O n log +
2
ε
ε
In the above theorem, we have assumed σ ≤ L without
loss of generality because any L-smooth function is also
2
L-strongly nonconvex. Also, we have assumed L
σ2 ≤ n
and if this inequality does not hold, then one should apply
repeatSVRG for a faster running time (see Figure 1).
1/3
σ2
, m =
Proof of Theorem 1. We choose p = 24L
2n
4
1
n/p, and α = σm
= 6p2σL2 ≤ 2L+4σ
, so we can apply
Lemma 5.4. If we telescope Lemma 5.4 for the entire algorithm (which has T 0 full epochs), and use the fact that
b
xp of the previous epoch equals b
x0 of the next epoch, we
conclude that if we choose a random epoch and a random
subepoch s, we will have
2
E[F s (b
xs ) − F s (xs∗ )] ≤
(F (x∅ ) − F ∗ ) .
pT 0
By the σ-strong convexity of F s (·), we have E[σkb
xs −
4
s 2
∅
∗
x∗ k ] ≤ pT 0 (F (x ) − F ).
Now, F s (x) = F (x) + σkx −b
xs k2 satisfies the assumption
of G(x) in Lemma 4.1. If we use the SVRG method (see
Theorem 2.3) to minimize the convex function F s (x), we

Natasha: Faster Non-Convex Stochastic Optimization Via Strongly Non-Convex Parameter

get an output xout satisfying F s (xout ) − F s (xs∗ ) ≤ ε2 σ in

2
1
1
gradient complexity O (n + L
σ 2 ) log ε ≤ O(n log ε ).
We can therefore apply Lemma 4.1 and conclude that this
output xout satisfies
 σ 
· (F (x∅ ) − F ∗ )
E[kGη (xout )k2 ] ≤ O
pT 0
 2 1/3 2/3 
· (F (x∅ ) − F ∗ ) .
= O (L σ)T 0 n n
In other words, we obtain E[kGη (xout )k2 ] ≤ ε2 using


2
1/3 2/3
T 0 n = O n + (L σ)ε2 n · (F (x∅ ) − F ∗ )
computations of the stochastic gradients. Here, the additive
term n is because T 0 ≥ 1.

Allen-Zhu, Zeyuan and Li, Yuanzhi. LazySVD: Even
Faster SVD Decomposition Yet Without Agonizing
Pain. In NIPS, 2016.
Allen-Zhu, Zeyuan and Li, Yuanzhi. Doubly Accelerated
Methods for Faster CCA and Generalized Eigendecomposition. In Proceedings of the 34th International Conference on Machine Learning, ICML ’17, 2017a.
Allen-Zhu, Zeyuan and Li, Yuanzhi. Follow the Compressed Leader: Faster Online Learning of Eigenvectors
and Faster MMWU. In Proceedings of the 34th International Conference on Machine Learning, ICML ’17,
2017b.

Finally, adding this with O(n log 1ε ), the gradient complexity for the application of SVRG in the last line of Natasha,
we finish the proof of the total gradient complexity.


Allen-Zhu, Zeyuan and Orecchia, Lorenzo. Linear Coupling: An Ultimate Unification of Gradient and Mirror
Descent. In Proceedings of the 8th Innovations in Theoretical Computer Science, ITCS ’17, 2017.

7

Allen-Zhu, Zeyuan and Yuan, Yang. Improved SVRG
for Non-Strongly-Convex or Sum-of-Non-Convex Objectives. In ICML, 2016.

Full Method: Final Theorem

We analyze and state the main theorems for our full method
Natashafull in the full version of this paper.

8

Conclusion

Stochastic gradient descent and gradient descent (including
alternating minimization) have become the canonical methods for solving non-convex machine learning tasks. However, can we design new non-convex methods to run even
faster than SGD or GD?
This present paper tries to tackle this general question, by
providing a new Natasha method which is intrinsically different from GD or SGD. It runs faster than GD and SVRGbased methods at least in theory. We hope that this could
be a non-negligible step towards our better understanding
of non-convex optimization.
Finally, our results give rise to an interesting dichotomy in
the best-known complexity of first-order non-convex opti√
mization: the complexity scales
with n3/4 for σ < L/ n
√
and with n2/3 for σ > L/ n. It remains open to investigate whether this dichotomy is intrinsic, or we can design
a more efficient algorithm that outperforms both.

References
Agarwal, Naman, Allen-Zhu, Zeyuan, Bullins, Brian,
Hazan, Elad, and Ma, Tengyu. Finding Approximate Local Minima for Nonconvex Optimization in Linear Time.
In STOC, 2017.
Allen-Zhu, Zeyuan. Katyusha: The First Direct Acceleration of Stochastic Gradient Methods. In STOC, 2017.
Allen-Zhu, Zeyuan and Hazan, Elad. Variance Reduction
for Faster Non-Convex Optimization. In NIPS, 2016.

Carmon, Yair, Duchi, John C., Hinder, Oliver, and Sidford,
Aaron. Accelerated Methods for Non-Convex Optimization. ArXiv e-prints, abs/1611.00756, November 2016.
Defazio, Aaron, Bach, Francis, and Lacoste-Julien, Simon.
SAGA: A Fast Incremental Gradient Method With Support for Non-Strongly Convex Composite Objectives.
In NIPS, 2014. URL http://arxiv.org/abs/
1407.0202.
Frostig, Roy, Ge, Rong, Kakade, Sham M., and Sidford,
Aaron. Un-regularizing: approximate proximal point
and faster stochastic algorithms for empirical risk minimization. In ICML, volume 37, pp. 1–28, 2015. URL
http://arxiv.org/abs/1506.07512.
Garber, Dan, Hazan, Elad, Jin, Chi, Kakade, Sham M.,
Musco, Cameron, Netrapalli, Praneeth, and Sidford,
Aaron. Robust shift-and-invert preconditioning: Faster
and more sample efficient algorithms for eigenvector
computation. In ICML, 2016.
Ge, Rong, Huang, Furong, Jin, Chi, and Yuan, Yang. Escaping from saddle points—online stochastic gradient
for tensor decomposition. In Proceedings of the 28th Annual Conference on Learning Theory, COLT 2015, 2015.
Ghadimi, Saeed and Lan, Guanghui.
Accelerated gradient methods for nonconvex nonlinear and stochastic programming.
Mathematical Programming, pp. 1–26, feb 2015.
ISSN
0025-5610.
doi:
10.1007/s10107-015-0871-8.
URL
http://arxiv.org/abs/1310.
3787http://link.springer.com/10.1007/
s10107-015-0871-8.

Natasha: Faster Non-Convex Stochastic Optimization Via Strongly Non-Convex Parameter

Johnson, Rie and Zhang, Tong. Accelerating stochastic gradient descent using predictive variance reduction.
In Advances in Neural Information Processing Systems,
NIPS 2013, pp. 315–323, 2013.
Lee, Jason D., Simchowitz, Max, Jordan, Michael I., and
Recht, Benjamin. Gradient descent only converges to
minimizers. In Proceedings of the 29th Conference on
Learning Theory, COLT 2016, New York, USA, June 2326, 2016, pp. 1246–1257, 2016.
Lin, Hongzhou, Mairal, Julien, and Harchaoui, Zaid.
A Universal Catalyst for First-Order Optimization.
In NIPS, 2015. URL http://arxiv.org/pdf/
1506.02186v1.pdf.
Nesterov, Yurii. Accelerating the cubic regularization of
newton’s method on convex problems. Mathematical
Programming, 112(1):159–181, 2008.
Reddi, Sashank J., Hefny, Ahmed, Sra, Suvrit, Poczos,
Barnabas, and Smola, Alex. Stochastic variance reduction for nonconvex optimization. ArXiv e-prints,
abs/1603.06160, March 2016.
Schmidt, Mark, Le Roux, Nicolas, and Bach, Francis. Minimizing finite sums with the stochastic average gradient. arXiv preprint arXiv:1309.2388, pp. 1–45, 2013.
URL http://arxiv.org/abs/1309.2388. Preliminary version appeared in NIPS 2012.
Shalev-Shwartz, Shai. SDCA without Duality, Regularization, and Individual Convexity. In ICML, 2016.
Zhang, Lijun, Mahdavi, Mehrdad, and Jin, Rong. Linear
convergence with condition number independent access
of full gradients. In Advances in Neural Information Processing Systems, pp. 980–988, 2013.

