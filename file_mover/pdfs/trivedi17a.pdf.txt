Know-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs

Rakshit Trivedi 1 Hanjun Dai 1 Yichen Wang 1 Le Song 1

Abstract
The availability of large scale event data with time
stamps has given rise to dynamically evolving
knowledge graphs that contain temporal information for each edge. Reasoning over time in such
dynamic knowledge graphs is not yet well understood. To this end, we present Know-Evolve, a
novel deep evolutionary knowledge network that
learns non-linearly evolving entity representations
over time. The occurrence of a fact (edge) is modeled as a multivariate point process whose intensity function is modulated by the score for that
fact computed based on the learned entity embeddings. We demonstrate significantly improved
performance over various relational learning approaches on two large scale real-world datasets.
Further, our method effectively predicts occurrence or recurrence time of a fact which is novel
compared to prior reasoning approaches in multirelational setting.

1. Introduction
Reasoning is a key concept in artificial intelligence. A host
of applications such as search engines, question-answering
systems, conversational dialogue systems, and social networks require reasoning over underlying structured knowledge. Effective representation and learning over such knowledge has come to the fore as a very important task. In particular, Knowledge Graphs have gained much attention as
an important model for studying complex multi-relational
settings. Traditionally, knowledge graphs are considered
to be static snapshot of multi-relational data. However,
recent availability of large amount of event based interaction data that exhibits complex temporal dynamics in addition to its multi-relational nature has created the need for
approaches that can characterize and reason over tempo1

College of Computing, Georgia Institute of Technology. Correspondence to: Rakshit Trivedi <rstrivedi@gatech.edu>, Le Song
<lsong@cc.gatech.edu>.
Proceedings of the 34 th International Conference on Machine
Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by
the author(s).

Figure 1. Sample temporal knowledge subgraph between persons,
organizations and countries.

rally evolving systems. For instance, GDELT (Leetaru &
Schrodt, 2013) and ICEWS (Boschee et al., 2017) are two
popular event based data repository that contains evolving
knowledge about entity interactions across the globe.
Thus traditional knowledge graphs need to be augmented
into Temporal Knowledge Graphs, where facts occur, recur or evolve over time in these graphs, and each edge
in the graphs have temporal information associated with
it. Figure 1 shows a subgraph snapshot of such temporal
knowledge graph. Static knowledge graphs suffer from
incompleteness resulting in their limited reasoning ability.
Most work on static graphs have therefore focussed on advancing entity-relationship representation learning to infer
missing facts based on available knowledge. But these methods lack ability to use rich temporal dynamics available in
underlying data represented by temporal knowledge graphs.
Effectively capturing temporal dependencies across facts
in addition to the relational (structural) dependencies can
help improve the understanding on behavior of entities and
how they contribute to generation of facts over time. For
example, one can precisely answer questions like:
• Object prediction. (Who) will Donald Trump mention
next?
• Subject prediction.
(Which country)
provide material support to US next month?

will

• Time prediction. (When) will Bob visit Burger King?

Know-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs

”People (entities) change over time and so do relationships.”
When two entities forge a relationship, the newly formed
edge drives their preferences and behavior. This change
is effected by combination of their own historical factors
(temporal evolution) and their compatibility with the historical factors of the other entity (mutual evolution).
For instance, if two countries have tense relationships, they
are more likely to engage in conflicts. On the other hand,
two countries forging an alliance are most likely to take
confrontational stands against enemies of each other. Finally, time plays a vital role in this process. A country that
was once peaceful may not have same characteristics 10
years in future due to various facts (events) that may occur
during that period. Being able to capture this temporal and
evolutionary effects can help us reason better about future relationship of an entity. We term this combined phenomenon
of evolving entities and their dynamically changing relationships over time as “knowledge evolution”.

2. Preliminaries
2.1. Temporal Point Process
A temporal point process (Cox & Lewis, 2006) is a random process whose realization consists of a list of events
localized in time, {ti } with ti ∈ R+ . Equivalently, a given
temporal point process can be represented as a counting
process, N (t), which records the number of events before
time t.
An important way to characterize temporal point processes
is via the conditional intensity function λ(t), a stochastic
model for the time of the next event given all the previous
events. Formally, λ(t)dt is the conditional probability of
observing an event in a small window [t, t + dt) given the
history T (t) := {tk |tk < t} up to t, i.e.,
λ(t)dt := P {event in [t, t + dt)|T (t)}
= E[dN (t)|T (t)]

(1)

In this paper, we propose an elegant framework to model
knowledge evolution and reason over complex non-linear interactions between entities in a multi-relational setting. The
key idea of our work is to model the occurrence of a fact as
multidimensional temporal point process whose conditional
intensity function is modulated by the relationship score
for that fact. The relationship score further depends on the
dynamically evolving entity embeddings. Specifically, our
work makes the following contributions:

where one typically assumes that only one event can happen
in a small window of size dt, i.e., dN (t) ∈ {0, 1}.

• We propose a novel deep learning architecture that
evolves over time based on availability of new facts. The
dynamically evolving network will ingest the incoming
new facts, learn from them and update the embeddings of
involved entities based on their recent relationships and
temporal behavior.
• Besides predicting the occurrence of a fact, our architecture has ability to predict time when the fact may potentially occur which is not possible by any prior relational
learning approaches to the best of our knowledge.
• Our model supports Open World Assumption as missing
links are not considered to be false and may potentially
occur in future. It further supports prediction over unseen
entities due to its novel dynamic embedding process.
• The large-scale experiments on two real world datasets
show that our framework has consistently and significantly better performance for link prediction than stateof-arts that do not account for temporal and evolving
non-linear dynamics.
• Our work aims to introduce the use of powerful mathematical tool of temporal point process framework for
temporal reasoning over dynamically evolving knowledge
graphs. It has potential to open a new research direction in
reasoning over time for various multi-relational settings
with underlying spatio-temporal dynamics.

The functional form of the intensity λ(t) is often designed
to capture the phenomena of interests. Some Common
forms include: Poisson Process, Hawkes processes (Hawkes,
1971), Self-Correcting Process (Isham & Westcott, 1979),
Power Law and Rayleigh Process.

From the survival analysis theory (Aalen et al., 2008), given
the history T = {t1 , . . . , tn }, for any t > tn , we characterize the conditional probabilityRthat no event
 happens during
t
[tn , t) as S(t|T ) = exp − tn λ(τ ) dτ . Moreover, the
conditional density that an event occurs at time t is defined
as :
f (t) = λ(t) S(t)
(2)

Rayleigh Process is a non-monotonic process and is welladapted to modeling fads, where event likelihood drops
rapidly after rising to a peak. Its intensity function is λ(t) =
α · (t), where α > 0 is the weight parameter, and the log
survival function is log S(t|α) = −α · (t)2 /2.
2.2. Temporal Knowledge Graph representation
We define a Temporal Knowledge Graph (TKG) as a multirelational directed graph with timestamped edges between
any pair of nodes. In a TKG, each edge between two nodes
represent an event in the real world and edge type (relationship) represent the corresponding event type. Further an
edge may be available multiple times (recurrence). We do
not allow duplicate edges and self-loops in graph. Hence,
all recurrent edges will have different time points and every
edge will have distinct subject and object entities.
Given ne entities and nr relationships, we extend traditional
triplet representation for knowledge graphs to introduce
time dimension and represent each fact in TKG as a quadruplet (es , r, eo , t), where es , eo ∈ {1, . . . , ne }, es 6= eo ,

Know-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs

r ∈ {1, . . . , nr }, t ∈ R+ . It represents the creation of
relationship edge r between subject entity es , and object
entity eo at time t. The complete TKG can therefore be
represented as an ne × ne × nr × T - dimensional tensor where T is the total number of available time points.
Consider a TKG comprising of N edges and denote the
globally ordered set of corresponding N observed events as
D = {(es , r, eo , t)n }N
n=1 , where 0 ≤ t1 ≤ t2 . . . ≤ T .

3. Evolutionary Knowledge Network
We present our unified knowledge evolution framework
(Know-Evolve) for reasoning over temporal knowledge
graphs. The reasoning power of Know-Evolve stems from
the following three major components:
1. A powerful mathematical tool of temporal point process that models occurrence of a fact.
2. A bilinear relationship score that captures multirelational interactions between entities and modulates
the intensity function of above point process.
3. A novel deep recurrent network that learns non-linearly
and mutually evolving latent representations of entities
based on their interactions with other entities in multirelational space over time.
3.1. Temporal Process
Large scale temporal knowledge graphs exhibit highly heterogeneous temporal patterns of events between entities.
Discrete epoch based methods to model such temporal behavior fail to capture the underlying intricate temporal dependencies. We therefore model time as a random variable
and use temporal point process to model occurrence of fact.
More concretely, given a set of observed events O corresponding to a TKG, we construct a relationship-modulated
multidimensional point process to model occurrence of these
events. We characterize this point process with the following
conditional intensity function:
λer

s

,eo

(t|t̄) = f (gre

s

,eo

(t̄)) ∗ (t − t̄)

(3)

where t > t̄, t is the time of the current event and t̄ =
s
o
max(te −, te −) is the most recent time point when either
subject or object entity was involved in an event before time
s o
t. Thus, λer ,e (t|t̄) represents intensity of event involving
triplet (es , r, ej ) at time t given previous time point t̄ when
either es or eo was involved in an event. This modulates the
intensity of current event based on most recent activity on
either entities’ timeline and allows to capture scenarios like
non-periodic events and previously unseen events. f (·) =
exp(·) ensures that intensity is positive and well defined.
3.2. Relational Score Function
The first term in (3) modulates the intensity function by
the relational compatibility score between the involved enti-

ties in that specific relationship. Specifically, for an event
s o
(es , r, eo , t) ∈ D occurring at time t, the score term gre ,e
is computed using a bilinear formulation as follows:
gre
s

s

,eo

s

o

(t) = ve (t−)T · Rr · ve (t−)

(4)

s

where ve , ve ∈ Rd represent latent feature embeddings of
entities appearing in subject and object position respectively.
Rr ∈ Rd×d represents relationship weight matrix which
attempts to capture interaction between two entities in the
specific relationship space r. This matrix is unique for each
relation in dataset and is learned during training. t is time of
current event and t− represent time point just before time
s
o
t. ve (t−) and ve (t−), therefore represent most recently
updated vector embeddings of subject and object entities
respectively before time t. As these entity embeddings
s o
evolve and update over time, gre ,e (t) is able to capture
cumulative knowledge learned about the entities over the
history of events that have affected their embeddings.
3.3. Dynamically Evolving Entity Representations
We represent latent feature embedding of an entity e at time
t with a low-dimensional vector ve (t). We add superscript
s and o as shown in Eq. (4) to indicate if the embedding
corresponds to entity in subject or object position respectively. We also use relationship-specific low-dimensional
representation for each relation type.
The latent representations of entities change over time as
entities forge relationships with each other. We design novel
deep recurrent neural network based update functions to
capture mutually evolving and nonlinear dynamics of entities in their vector space representations. We consider an
event m = (es , r, eo , t)m ∈ D occurring at time t. Also,
consider that event m is entity es ’s p-th event while it is
entity eo ’s q-th event. As entities participate in events in a
heterogeneous pattern, it is less likely that p = q although
not impossible. Having observed this event, we update the
embeddings of two involved entities as follows:
Subject Embedding:
s

s

ve (tp ) = σ(Wts (tp − tp−1 ) + Whh · he (tp −))
s

s

o

s

he (tp −) = σ(Wh · [ve (tp−1 ) ⊕ ve (tp −) ⊕ rep−1 ])
(5)
Object Embedding:
o

o

ve (tq ) = σ(Wto (tq − tq−1 ) + Whh · he (tq −))
o

o

s

o

he (tq −) = σ(Wh · [ve (tq−1 ) ⊕ ve (tq −) ⊕ req−1 ])
(6)
s

o

where, ve , ve ∈ Rd . tp = tq = tm is the time of observed
event. For subject embedding update in Eq. (5), tp−1 is the
time point of the previous event in which entity es was

Know-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs

Figure 2. Realization of Evolutionary Knowledge Network Architecture over a timeline. Here t00 , t0 and t may or may not be consecutive
time points. We focus on the event at time point t and show how previous events affected the embeddings of entities involved in this event.
s
o
From Eq. (5) and (6), tp−1 = t0 and tq−1 = t00 respectively. teprev , teprev represent previous time points in history before t0 , t00 . hother
es
eo
stands for hidden layer for the entities (other than the ones in focus) involved in events at t0 and t00 . rprev
= r2 and rprev
= r1 . All other
notations mean exactly as defined in text. We only label nodes, edges and embeddings directly relevant to event at time t for clarity.

(a) Intensity Computation at time t

(c) Entity Embedding update after event observed at time t

Figure 3. One step visualization of Know-Evolve computations done in Figure 2 after observing an event at time t. (Best viewed in color)

involved. tp − is the timepoint just before time tp . Hence,
s
ve (tp−1 ) represents latest embedding for entity es that was
o
updated after (p − 1)-th event for that entity. ve (tp −)
represents latest embedding for entity eo that was updated
any time just before tp = tm . This accounts for the fact that
entity eo may have been involved in some other event during
the interval between current (p) and previous (p − 1) event
s
of entity es . rep−1 ∈ Rc represent relationship embedding
that corresponds to relationship type of the (p − 1)-th event
of entity es . Note that the relationship vectors are static
s
and do not evolve over time. he (tp −) ∈ Rd is the hidden
layer. The semantics of notations apply similarly to object
embedding update in Eq. (6).
Wts , Wto ∈ Rd×1 , Whh ∈ Rd×l and Wh ∈ Rl×(2d+c)
are weight parameters in network learned during training.
Wts , Wto captures variation in temporal drift for subject and
object respectively. Whh is shared parameter that captures
recurrent participation effect for each entity. Wh is a shared
projection matrix applied to consider the compatibility of
entities in their previous relationships. ⊕ represent simple
concatenation operator. σ(·) denotes nonlinear activation
function (tanh in our case). Our formulations use simple
RNN units but it can be replaced with more expressive

units like LSTM or GRU in straightforward manner. In
our experiments, we choose d = l and d 6= c but they
can be chosen differently. Below we explain the rationales
of our deep recurrent architecture that captures nonlinear
evolutionary dynamics of entities over time.
Reasoning Based on Structural Dependency: The hidden
s
layer (he ) reasons for an event by capturing the compatibility of most recent subject embedding with most recent
object embedding in previous relationship of subject entity.
This accounts for the behavior that within a short period of
time, entities tend to form relationships with other entities
that have similar recent actions and goals. This layer thereby
uses historical information of the two nodes involved in current event and the edges they both created before this event.
o
This holds symmetrically for hidden layer (he ).
Reasoning based on Temporal Dependency: The recurrent layer uses hidden layer information to model the intertwined evolution of entity embeddings over time. Specifically this layer has two main components:
• Drift over time: The first term captures the temporal difference between consecutive events on respective dimension of each entity. This captures the external influences

Know-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs

that entities may have experienced between events and
allows to smoothly drift their features over time. This
term will not contribute anything in case when multiple
events happen for an entity at same time point (e.g. within
a day in our dataset). While tp − tp−1 may exhibit high
variation, the corresponding weight parameter will capture these variations and along with the second recurrent
s
term, it will prevent ve (tp ) to collapse.

simpler relational models. The intensity function in (3) allows to use maximum likelihood estimation over all the facts
as our objective function. Concretely, given a collection of
facts recorded in a temporal window [0, T ), we learn the
model by minimizing the joint negative log likelihood of
intensity function (Daley & Vere-Jones, 2007) written as:
N
 s o

X
L=−
log λer ,e (tp |t¯p )
p=1

• Relation-specific Mutual Evolution: The latent features of both subject and object entities influence each
other. In multi-relational setting, this is further affected
by the relationship they form. Recurrent update to entity
embedding with the information from the hidden layer
allows to capture the intricate non-linear and evolutionary
dynamics of an entity with respect to itself and the other
entity in a specific relationship space.
3.4. Understanding Unified View of Know-Evolve
Figure (2) and Figure (3) shows the architecture of knowledge evolution framework and one step of our model.
The updates to the entity representations in Eq. (5) and (6)
are driven by the events involving those entities which
makes the embeddings piecewise constant i.e. an entity
embedding remains unchanged in the duration between two
events involving that entity and updates only when an event
happens on its dimension. This is justifiable as an entity’s
features may update only when it forges a relationship with
other entity within the graph. Note that the first term in
Eq. (5) and (6) already accounts for any external influences.
Having observed an event at time t, Know-Evolve considers it as an incoming fact that brings new knowledge about
the entities involved in that event. It computes the intensity of that event in Eq. (3) which is based on relational
compatibility score in Eq. (4) between most recent latent
embeddings of involved entities. As these embeddings are
piecewise constant, we use time interval term (t − t̄) in Eq.
(3) to make the overall intensity piecewise linear which is
standard mathematical choice for efficient computation in
point process framework. This formulation naturally leads
to Rayleigh distribution which models time interval between
current event and most recent event on either entities’ dimension. Rayleigh distribution has an added benefit of having a
simple analytic form of likelihood which can be further used
to find entity for which the likelihood reaches maximum
value and thereby make precise entity predictions.

4. Efficient Training Procedure
The complete parameter space for the above model is:
Ω = {{Ve }e=1:ne , {Rr }r=1:nr , We , Wts , Wto , Wh ,
Whh , Wr }. Although Know-Evolve gains expressive
power from deep architecture, Table 4 (Appendix D) shows
that the memory footprint of our model is comparable to

|
+

{z

nr X
ne X
ne Z
X
r=1

}

happened events

es =1

eo =1

|

(7)

T

λer

s

o

,e

(τ |τ̄ ) dτ

0

{z

survival term

}

The first term maximizes the probability of specific type
of event between two entities; the second term penalizes
non-presence of all possible types of events between all
possible entity pairs in a given observation window. We use
Back Propagation Through Time (BPTT) algorithm to train
our model. Previous techniques (Du et al., 2016; Hidasi
et al., 2016) that use BPTT algorithm decompose data into
independent sequences and train on mini-batches of those
sequences. But there exists intricate relational and temporal dependencies between data points in our setting which
limits our ability to efficiently train by decomposing events
into independent sequences. To address this challenge, we
design an efficient Global BPTT algorithm (Algorithm 2,
Appendix A) that creates mini-batches of events over global
timeline in sliding window fashion and allows to capture
dependencies across batches while retaining efficiency.
Intractable Survival Term. To compute the second survival term in (7), since our intensity function is modulated
by relation-specific parameter, for each relationship we need
to compute survival probability over all pairs of entities.
Next, given a relation r and entity pair (es , eo ), we denote
P(es ,eo ) as total number of events of type r involving either
es or eo in window [T0 , T ). As our intensity function is
piecewise-linear, we can decompose the integration term
RT s o
− T0 λer ,e (τ |τ̄ )dτ into multiple time intervals where intensity is constant:
Z T
s o
λer ,e (τ |τ̄ )dτ
T0

=

P(es ,eo ) −1 Z t
p+1
X

λer

s

,eo

(τ |τ̄ )dτ

tp

p=1
P(es ,eo ) −1

=

X

s

o

(t2p+1 − t2p ) · exp(ve (tp )T · Rr · ve (tp ))

p=1

(8)
The integral calculations in (8) for all possible triplets requires O(n2 r) computations (n is number of entities and r is
the number of relations). This is computationally intractable

Know-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs

Algorithm 1 Survival Loss Computation in mini-batch
Input: Minibatch E, size s, Batch Entity List bl
loss = 0.0
for p = 0 to s − 1 do
s
subj feat = Ep → ve (t−)
o
obj feat = Ep → ve (t−)
rel weight = Ep → Rr
t end = Ep → t
subj surv = 0, obj surv = 0, total surv = 0
for i = 0 to bl.size do
obj other = bl[i]
if obj other == Ep → es then
continue
end if
s
o
t̄ = max(te −, te −)
subj surv += (t end2 − t̄2 ) · exp(subj f eatT ·
rel weight · obj other f eat)
end for
for j = 0 to bl.size do
subj other = bl[i]
if subj other == Ep → eo then
continue
end if
s
o
t̄ = max(te −, te −)
obj surv
+=
(t end2 − t̄2 ) ·
T
exp(subj other f eat · rel weight · obj f eat)
end for
loss += subj surv + obj surv
end for
and also unnecessary. Knowledge tensors are inherently
sparse and hence it is plausible to approximate the survival
loss in a stochastic setting. We take inspiration from techniques like noise contrastive (Gutmann & Hyvärinen, 2012)
estimation and adopt a random sampling strategy to compute survival loss: Given a mini-batch of events, for each
relation in the mini-batch, we compute dyadic survival term
across all entities in that batch. Algorithm 1 presents the
survival loss computation procedure. While this procedure
may randomly avoid penalizing some dimensions in a relationship, it still includes all dimensions that had events on
them. The computational complexity for this procedure will
be O(2n0 r0 m) where m is size of mini-batch and n0 and r0
represent number of entities and relations in the mini-batch.

5. Experiments
5.1. Temporal Knowledge Graph Data
We use two datasets: Global Database of Events, Language,
and Tone (GDELT) (Leetaru & Schrodt, 2013) and Integrated Crisis Early Warning System (ICEWS) (Boschee
et al., 2017) which has recently gained attention in learning
community (Schein et al., 2016) as useful temporal KGs.
GDELT data is collected from April 1, 2015 to Mar 31,

2016 (temporal granularity of 15 mins). ICEWS dataset is
collected from Jan 1, 2014 to Dec 31, 2014 (temporal granularity of 24 hrs). Both datasets contain records of events
that include two actors, action type and timestamp of event.
We use different hierarchy of actions in two datasets - (top
level 20 relations for GDELT while last level 260 relations
for ICEWS) - to test on variety of knowledge tensor configurations. Note that this does not filter any record from the
dataset. We process both datasets to remove any duplicate
quadruples, any mono-actor events (i.e., we use only dyadic
events), and self-loops. We report our main results on full
versions of each dataset. We create smaller version of both
datasets for exploration purposes. Table 1 (Appendix B)
provide statistics about the data and Table 2 (Appendix B)
demonstrates the sparsity of knowledge tensor.
5.2. Competitors
We compare the performance of our method with following
relational learning methods: RESCAL, Neural Tensor Network (NTN), Multiway Neural Network (ER-MLP), TransE
and TransR. To the best of our knowledge, there are no existing relational learning approaches that can predict time for a
new fact. Hence we devised two baseline methods for evaluating time prediction performance — (i) Multi-dimensional
Hawkes process (MHP): We model dyadic entity interactions as multi-dimensional Hawkes process similar to (Du
et al., 2015). Here, an entity pair constitutes a dimension
and for each pair we collect sequence of events on its dimension and train and test on that sequence. Relationship is not
modeled in this setup. (ii) Recurrent Temporal Point Process (RTPP): We implement a simplified version of RMTPP
(Du et al., 2016) where we do not predict the marker. For
training, we concatenate static entity and relationship embeddings and augment the resulting vector with temporal
feature. This augmented unit is used as input to global RNN
which produces output vector ht . During test time, for a
given triplet, we use this vector ht to compute conditional
intensity of the event given history which is further used to
predict next event time. Appendix C provides implementation details of our method and competitors.
5.3. Evaluation Protocol
We report experimental results on two tasks: Link prediction
and Time prediction.
Link prediction: Given a test quadruplet (es , r, eo , t), we
replace eo with all the entities in the dataset and compute the
s o
s o
s o
conditional density der ,e = λer ,e (t)Sre ,e (t) for the resulting quadruplets including the ground truth. We then sort
all the quadruplets in the descending order of this density to
rank the correct entity for object position. We also conduct
testing after applying the filtering techniques described in
(Bordes et al., 2013) - we only rank against the entities that
do not generate a true triplet (seen in train) when it replaces

Know-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs
ER-MLP
Know-Evolve

NTN
RESCAL

TransE
TransR

NTN
RESCAL

TransE
TransR

ER-MLP
Know-Evolve

NTN
RESCAL

TransE
TransR

ER-MLP
Know-Evolve

NTN
RESCAL

TransE
TransR

2000

MAR

MAR

500

2000

2000

1000

1000

500

MAR

2000

MAR

ER-MLP
Know-Evolve

1000

1000

200
200

500
500

100
2

4

6

8

10 12 14 16 18 20 22 24

2

Week

(a) ICEWS-raw

4

6

8

10 12 14 16 18 20 22 24

2

Week

(b) ICEWS-filtered

4

6

8

10 12 14 16 18 20 22 24

2

Week

(c) GDELT-raw

4

6

8

10 12 14 16 18 20 22 24

Week

(d) GDELT-filtered

Figure 4. Mean Average Rank (MAR) for Entity Prediction on both datasets.
TransE
TransR

ER-MLP
Know-Evolve

3500

3000

3000

NTN
RESCAL

TransE
TransR

1500

1500

1000

1000
2

4

6

8

Week

(a) ICEWS-raw

4

6

8

NTN
RESCAL

TransE
TransR

3000
2500
2000
1500

1500
2

ER-MLP
Know-Evolve
3500

2000

500

10 12 14 16 18 20 22 24

TransE
TransR

2500

2000

2000

NTN
RESCAL

3000

2500

2500

ER-MLP
Know-Evolve
3500

STDEV

3500

STDEV

4000

STDEV

NTN
RESCAL

STDEV

ER-MLP
Know-Evolve
4000

10 12 14 16 18 20 22 24

2

Week

(b) ICEWS-filtered

4

6

8

10 12 14 16 18 20 22 24

Week

1000

(c) GDELT-raw

2

4

6

8

10 12 14 16 18 20 22 24

Week

(d) GDELT-filtered

Figure 5. Standard Deviation (STD) in MAR for Entity Prediction on both datasets.
NTN
RESCAL

TransE
TransR

0.8

ER-MLP
Know-Evolve

1.0

NTN
RESCAL

TransE
TransR

0.4

2

4

6

8

10 12 14 16 18 20 22 24

Week

(a) ICEWS-raw

2

4

6

8

10 12 14 16 18 20 22 24

Week

(b) ICEWS-filtered

TransE
TransR

0.4

0.2
0.2

NTN
RESCAL

0.6

0.4

0.2

ER-MLP
Know-Evolve

1.0

0.8

HITS_10

HITS_10

HITS_10

TransE
TransR

0.6

0.6

0.4

NTN
RESCAL

0.8

0.8

0.6

ER-MLP
Know-Evolve

HITS_10

ER-MLP
Know-Evolve

2

4

6

8

10 12 14 16 18 20 22 24

Week

(c) GDELT-raw

2

4

6

8

10 12 14 16 18 20 22 24

Week

(d) GDELT-filtered

Figure 6. HITS@10 for Entity Prediction on both datasets.

ground truth object. We report Mean Absolute Rank (MAR),
Standard Deviation for MAR and HITS@10 (correct entity
in top 10 predictions) for both Raw and Filtered Versions.
Time prediction: Give a test triplet (es , r, eo ), we predict the expected value of next time the fact (es , r, eo )
s o
can
This expectation is defined by: Eer ,e (t) =
q occur.
s o
π
, where gre ,e (t) is computed using equas o
2 exp(gre ,e (t))
tion (4). We report Mean Absolute Error (MAE) between
the predicted time and true time in hours.
Sliding Window Evaluation. As our work concentrates
on temporal knowledge graphs, it is more interesting to
see the performance of methods over time span of test set
as compared to single rank value. This evaluation method
can help to realize the effect of modeling temporal and
evolutionary knowledge. We therefore partition our test set
in 12 different slides and report results in each window. For
both datasets, each slide included 2 weeks of time.
5.4. Quantitative Analysis
Link Prediction Results. Figure (4, 5, 6) demonstrate
link prediction performance comparison on both datasets.
Know-Evolve significantly and consistently outperforms all
competitors in terms of prediction rank without any dete-

rioration over time. Neural Tensor Network’s second best
performance compared to other baselines demonstrate its
rich expressive power but it fails to capture the evolving dynamics of intricate dependencies over time. This is further
substantiated by its decreasing performance as we move test
window further in time.
The second row represents deviation error for MAR across
samples in a given test window. Our method achieves significantly low deviation error compared to competitors making
it most stable. Finally, high performance on HITS@10 metric demonstrates extensive discriminative ability of KnowEvolve. For instance, GDELT has only 20 relations but
32M events where many entities interact with each other in
multiple relationships. In this complex setting, other methods depend only on static entity embeddings to perform
prediction unlike our method which does effectively infers
new knowledge using powerful evolutionary network and
provides accurate prediction results.
Time Prediction Results. Figure 7 demonstrates that
Know-Evolve performs significantly better than other point
process based methods for predicting time. MHP uses a specific parametric form of the intensity function which limits
its expressiveness. Further, each entity pair interaction is
modeled as an independent dimension and does not take

Know-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs
Methods

Know-Evolve
MHP
ER-TPP

Methods

1116.884

1875.4

1000

MAE

MAE

1000

110.8

10

Know-Evolve
MHP
ER-TPP

2727
1348.924

42.82

10

Methods

(a) GDELT-500

between them is computed. TransR (Lin et al., 2015) extends this model to use separate semantic spaces for entities
and relations and does translation in the relationship space.

Methods

(b) ICEWS-500

Figure 7. Time prediction performance (Unit is hours).

into account relational feature which fails to capture the
intricate influence of different entities on each other. On the
other hand, RTPP uses relational features as part of input,
but it sees all events globally and cannot model the intricate
evolutionary dependencies on past events. We observe that
our method effectively captures such non-linear relational
and temporal dynamics.
In addition to the superior quantitative performance, we
demonstrate the effectiveness of our method by providing
extensive exploratory analysis in Appendix E.

6. Related Work
In this section, we discuss relevant works in relational learning and temporal modeling techniques.
6.1. Relational Learning
Among various relational learning techniques, neural embedding models that focus on learning low-dimensional
representations of entities and relations have shown stateof-the-art performance. These methods compute a score
for the fact based on different operations on these latent
representations. Such models can be mainly categorized
into two variants:
Compositional Models. RESCAL (Nickel et al., 2011)
uses a relation specific weight matrix to explain triplets
via pairwise interactions of latent features. Neural Tensor
Network (NTN) (Socher et al., 2013) is more expressive
model as it combines a standard NN layer with a bilinear
tensor layer. (Dong et al., 2014) employs a concatenationprojection method to project entities and relations to lower
dimensional space. Other sophisticated models include
Holographic Embeddings (HoLE) (Nickel et al., 2016b)
that employs circular correlation on entity embeddings and
Neural Association Models (NAM) (Liu et al., 2016), a
deep network used for probabilistic reasoning.
Translation Based Models. (Bordes et al., 2011) uses two
relation-specific matrices to project subject and object entities and computes L1 distance to score a fact between two
entity vectors. (Bordes et al., 2013) proposed TransE model
that computes score as a distance between relation-specific
translations of entity embeddings. (Wang et al., 2014) improved TransE by allowing entities to have distributed representations on relation specific hyperplane where distance

(Nickel et al., 2016a) and (Yang et al., 2015; Toutanova &
Chen, 2015) contains comprehensive reviews and empirical
comparison of relational learning techniques respectively.
All these methods consider knowledge graphs as static models and lack ability to capture temporally evolving dynamics.
6.2. Temporal Modeling
Temporal point processes have been shown as very effective tool to model various intricate temporal behaviors in
networks (Yang & Zha, 2013; Farajtabar et al., 2014; 2015;
Du et al., 2015; 2016; Wang et al., 2016a;b;c; 2017a;b).
Recently, (Wang et al., 2016a; Dai et al., 2016b) proposed
novel co-evolutionary feature embedding process that captures self-evolution and co-evolution dynamics of users and
items interacting in a recommendation system. In relational
setting, (Loglisci et al., 2015) proposed relational mining approach to discover changes in structure of dynamic network
over time. (Loglisci & Malerba, 2017) proposes method to
capture temporal autocorrelation in data to improve predictive performance. (Sharan & Neville, 2008) proposes summarization techniques to model evolving relational-temporal
domains. Recently, (Esteban et al., 2016) proposed multiway neural network architecture for modeling event based
relational graph. The authors draw a synergistic relation
between a static knowledge graph and an event set wherein
the knowledge graph provide information about entities participating in events and new events in turn contribute to
enhancement of knowledge graph. They do not capture the
evolving dynamics of entities and model time as discrete
points which limits its capacity to model complex temporal
dynamics. (Jiang et al., 2016) models dependence of relationship on time to facilitate time-aware link prediction but
do not capture evolving entity dynamics.

7. Conclusion
We propose a novel deep evolutionary knowledge network
that efficiently learns non-linearly evolving entity representations over time in multi-relational setting. Evolutionary
dynamics of both subject and object entities are captured by
deep recurrent architecture that models historical evolution
of entity embeddings in a specific relationship space. The
occurrence of a fact is then modeled by multivariate point
process that captures temporal dependencies across facts.
The superior performance and high scalability of our method
on large real-world temporal knowledge graphs demonstrate
the importance of supporting temporal reasoning in dynamically evolving relational systems. Our work establishes
previously unexplored connection between relational processes and temporal point processes with a potential to open
a new direction of research on reasoning over time.

Know-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs

Acknowledgement
This project was supported in part by NSF IIS-1218749,
NIH BIGDATA 1R01GM108341, NSF CAREER IIS1350983, NSF IIS-1639792 EAGER, ONR N00014-15-12340, NVIDIA, Intel and Amazon AWS.

References
Aalen, Odd, Borgan, Ornulf, and Gjessing, Hakon. Survival and event history analysis: a process point of view.
Springer, 2008.
Bordes, Antoine, Weston, Jason, Collobert, Ronan, and
Bengio, Yoshua. Learning structured embeddings of
knowledge bases. In Conference on Artificial Intelligence,
number EPFL-CONF-192344, 2011.
Bordes, Antoine, Usunier, Nicolas, Garcia-Duran, Alberto,
Weston, Jason, and Yakhnenko, Oksana. Translating embeddings for modeling multi-relational data. In Advances
in neural information processing systems, pp. 2787–2795,
2013.
Boschee, Elizabeth, Lautenschlager, Jennifer, O’Brien,
Sean, Shellman, Steve, Starz, James, and Ward, Michael.
Icews coded event data. 2017.
Cox, D.R. and Lewis, P.A.W. Multivariate point processes.
Selected Statistical Papers of Sir David Cox: Volume 1,
Design of Investigations, Statistical Methods and Applications, 1:159, 2006.
Dai, Hanjun, Dai, Bo, and Song, Le. Discriminative embeddings of latent variable models for structured data. In
ICML, 2016a.
Dai, Hanjun, Wang, Yichen, Trivedi, Rakshit, and Song,
Le. Deep coevolutionary network: Embedding user
and item features for recommendation. arXiv preprint
arXiv:1609.03675, 2016b.
Daley, D.J. and Vere-Jones, D. An introduction to the theory of point processes: volume II: general theory and
structure, volume 2. Springer, 2007.
Dong, Xin, Gabrilovich, Evgeniy, Heitz, Geremy, Horn,
Wilko, Lao, Ni, Murphy, Kevin, Strohmann, Thomas,
Sun, Shaohua, and Zhang, Wei. Knowledge vault: A
web-scale approach to probabilistic knowledge fusion.
In Proceedings of the 20th ACM SIGKDD International
Conference on Knowledge Discovery and Data Mining,
pp. 601–610, 2014.
Du, Nan, Wang, Yichen, He, Niao, and Song, Le. Time
sensitive recommendation from recurrent user activities.
In NIPS, 2015.

Du, Nan, Dai, Hanjun, Trivedi, Rakshit, Upadhyay, Utkarsh,
Gomez-Rodriguez, Manuel, and Song, Le. Recurrent
marked temporal point processes: Embedding event history to vector. In KDD, 2016.
Esteban, Cristobal, Tresp, Volker, Yang, Yinchong, Baier,
Stephan, and Krompa, Denis. Predicting the co-evolution
of event and knowledge graphs. In 2016 19th International Conference on Information Fusion (FUSION), pp.
98–105, 2016.
Farajtabar, Mehrdad, Du, Nan, Gomez-Rodriguez, Manuel,
Valera, Isabel, Zha, Hongyuan, and Song, Le. Shaping
social activity by incentivizing users. In NIPS, 2014.
Farajtabar, Mehrdad, Wang, Yichen, Gomez-Rodriguez,
Manuel, Li, Shuang, Zha, Hongyuan, and Song, Le. Coevolve: A joint point process model for information diffusion and network co-evolution. In NIPS, 2015.
Gutmann, Michael U and Hyvärinen, Aapo. Noisecontrastive estimation of unnormalized statistical models,
with applications to natural image statistics. Journal of
Machine Learning Research, 13(Feb):307–361, 2012.
Hawkes, Alan G. Spectra of some self-exciting and mutually
exciting point processes. Biometrika, 58(1):83–90, 1971.
Hidasi, Balazs, Karatzoglou, Alexandros, Baltrunas, Linas,
and Tikk, Domonkos. Session-based recommendations
with recurrent neural networks. In ICLR, 2016.
Isham, V. and Westcott, M. A self-correcting pint process.
Advances in Applied Probability, 37:629–646, 1979.
Jiang, Tingsong, Liu, Tianyu, Ge, Tao, Lei, Sha, Li, Suijan,
Chang, Baobao, and Sui, Zhifang. Encoding temporal
information for time-aware link prediction. 2016.
Leetaru, Kalev and Schrodt, Philip A. Gdelt: Global data on
events, location, and tone. ISA Annual Convention, 2013.
Lin, Yankai, Liu, Zhiyuan, Sun, Maosong, and Zhu, Xuan.
Learning entity and relation embeddings for knowledge
graph completion. 2015.
Liu, Quan, Jiang, Hui, Evdokimov, Andrew, Ling, ZhenHua, Zhu, Xiaodan, Wei, Si, and Hu, Yu. Probabilistic
reasoning via deep learning: Neural association models.
arXiv:1603.07704v2, 2016.
Loglisci, Corrado and Malerba, Donato. Leveraging temporal autocorrelation of historical data for improving accuracy in network regression. Statistical Analysis and Data
Mining: The ASA Data Science Journal, 10(1):40–53,
2017.

Know-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs

Loglisci, Corrado, Ceci, Michelangelo, and Malerba, Donato. Relational mining for discovering changes in evolving networks. Neurocomputing, 150, Part A:265–288,
2015.
Nickel, Maximilian, Tresp, Volker, and Kriegel, HansPeter. A three-way model for collective learning on multirelational data. In Proceedings of the 28th International
Conference on Machine Learning (ICML-11), pp. 809–
816, 2011.
Nickel, Maximilian, Murphy, Kevin, Tresp, Volker, and
Gabrilovich, Evgeniy. A review of relational machine
learning for knowledge graphs. Proceedings of the IEEE,
2016a.
Nickel, Maximilian, Rosasco, Lorenzo, and Poggio, Tomaso.
Holographic embeddings of knowledge graphs. 2016b.
Schein, Aaron, Zhou, Mingyuan, Blei, David, and Wallach, Hanna. Bayesian poisson tucker decomposition for learning the structure of international relations.
arXiv:1606.01855, 2016.
Sharan, Umang and Neville, Jennifer. Temporal-relational
classifiers for prediction in evolving domains. In 2008
Eighth IEEE International Conference on Data Mining,
pp. 540–549, 2008.
Socher, Richard, Chen, Danqi, Manning, Christopher D,
and Ng, Andrew. Reasoning with neural tensor networks
for knowledge base completion. In Advances in Neural
Information Processing Systems, pp. 926–934, 2013.
Toutanova, Kristina and Chen, Danqi. Observed versus
latent features for knowledge base and text inference.
2015.
Wang, Yichen, Du, Nan, Trivedi, Rakshit, and Song, Le.
Coevolutionary latent feature processes for continuoustime user-item interactions. In NIPS, 2016a.
Wang, Yichen, Theodorou, Evangelos, Verma, Apurv, and
Song, Le. A stochastic differential equation framework
for guiding online user activities in closed loop. arXiv
preprint arXiv:1603.09021, 2016b.
Wang, Yichen, Xie, Bo, Du, Nan, and Song, Le. Isotonic
hawkes processes. In ICML, 2016c.
Wang, Yichen, Williams, Grady, Theodorou, Evangelos, and
Song, Le. Variational policy for guiding point processes.
In ICML, 2017a.
Wang, Yichen, Ye, Xiaojing, Zhou, Haomin, Zha,
Hongyuan, and Song, Le. Linking micro event history
to macro prediction in point process models. In AISTAT,
2017b.

Wang, Zhen, Zhang, Jianwen, Feng, Jianlin, and Chen,
Zheng. Knowledge graph embedding by translating on
hyperplanes. 2014.
Yang, Bishan, Yih, Wen-tau, He, Xiaodong, Gao, Jianfeng,
and Deng, Li. Embedding entities and relations for learning and inference in knowledge bases. arXiv:1412.6575,
2015.
Yang, Shuang-Hong and Zha, Hongyuan. Mixture of mutually exciting processes for viral diffusion. In ICML, pp.
1–9, 2013.

