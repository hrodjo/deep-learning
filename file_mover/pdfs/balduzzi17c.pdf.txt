Neural Taylor Approximations:
Convergence and Exploration in Rectifier Networks
David Balduzzi 1 Brian McWilliams 2 Tony Butler-Yeoman 1

Abstract
Modern convolutional networks, incorporating
rectifiers and max-pooling, are neither smooth
nor convex; standard guarantees therefore do not
apply. Nevertheless, methods from convex optimization such as gradient descent and Adam are
widely used as building blocks for deep learning
algorithms. This paper provides the first convergence guarantee applicable to modern convnets,
which furthermore matches a lower bound for
convex nonsmooth functions. The key technical tool is the neural Taylor approximation – a
straightforward application of Taylor expansions
to neural networks – and the associated Taylor
loss. Experiments on a range of optimizers, layers, and tasks provide evidence that the analysis
accurately captures the dynamics of neural optimization. The second half of the paper applies
the Taylor approximation to isolate the main difficulty in training rectifier nets – that gradients
are shattered – and investigates the hypothesis
that, by exploring the space of activation configurations more thoroughly, adaptive optimizers
such as RMSProp and Adam are able to converge
to better solutions.

1. Introduction
Deep learning has achieved impressive performance on a
range of tasks (LeCun et al., 2015). The workhorse underlying deep learning is gradient descent or backprop. Gradient descent has convergence guarantees in settings that
are smooth, convex or both. However, modern convnets
are neither smooth nor convex. Every winner of the ImageNet classification challenge since 2012 has used rectifiers which are not smooth (Krizhevsky et al., 2012; Zeiler
1

Victoria University of Wellington, New Zealand 2 Disney Research, Zürich, Switzerland. Correspondence to: David Balduzzi
<dbalduzzi@gmail.com>.
Proceedings of the 34 th International Conference on Machine
Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017
by the author(s).

Fig. 1: Shattered gradients in a PL-function.

& Fergus, 2014; Simonyan & Zisserman, 2015; Szegedy
et al., 2015; He et al., 2015). Even in convex settings,
convergence
for nonsmooth functions is lower-bounded by
p
1/ N (Bubeck, 2015).
The paper’s main contribution is the first convergence result for modern convnets, Theorem 2. The idea is simple: backprop constructs linear snapshots (gradients) of a
neural net’s landscape; section 2 introduces neural Taylor
approximations which are used to construct Taylor losses
as convex snapshots closely related to backprop. We then
use the online convex
p optimization framework (Zinkevich,
2003) to show 1/ N convergence to the Taylor optimum,
matching the lower bound in (Bubeck, 2015). Section 2.4
investigates the Taylor optimum and regret terms empirically. We observe
that convergence to the Taylor optimum
p
occurs at 1/ N in practice. The theorem applies to any
neural net with a loss convex in the output of the net (for
example, the cross-entropy loss is convex in the output but
not the parameters of a neural net).
The nonsmoothness of rectifier nets is perhaps underappreciated (Balduzzi et al., 2017). Fig. 1 shows a piecewiselinear (PL) function and its gradient. The gradient is discontinuous or shattered. Shattering is problematic for accelerated and Hessian-based methods which speed up convergence by exploiting the relationship between gradients
at nearby points (Sutskever et al., 2013). The success of
these methods on rectifier networks, where the number of
kinks grows exponentially with depth (Pascanu et al., 2014;
Telgarsky, 2016), requires explanation since gradients at
nearby points can be very different (Balduzzi et al., 2017).
Section 3 addresses the success of adaptive optimizers

Neural Taylor Approximations

in rectifier nets.1 Adaptive optimizers normalize gradients by their root-mean-square; e.g. AdaGrad, RMSProp,
Adam and RadaGrad (Duchi et al., 2011; Hinton et al.,
2012; Kingma & Ba, 2015; Krummenacher et al., 2016).
Dauphin et al. (2015) argue
p that RMSProp approximates
the equilibriation matrix diag(H 2 ) which approximates
the absolute Hessian |H| (Dauphin et al., 2014). However, the argument is at best part of the story when gradients are shattered. In fact, curvature-based explanations
for RMS-normalization schemes do not tell the whole story
even in smooth convex settings: Krummenacher et al.
(2016) and Duchi et al. (2013) show that diagonal normalization schemes show no theoretical improvement over
vanilla SGD when the coordinates are not axis-aligned or
extremely sparse respectively.
The only way an optimizer can estimate gradients of a shattered function is to compute them directly. Effective optimizers must therefore explore the space of smooth regions
– the bound in theorem 2 is only as good as the optimum
over the Taylor losses encountered during backprop. Observations 1 and 2 relate smooth regions in rectifier nets and
the Taylor losses to configurations of active neurons. We
hypothesize that root-mean-square normalization increases
exploration through the set of smooth regions in a rectifier
net’s landscape. Experiments in section 3.3 provide partial
support for the hypothesis.
1.1. Comparison with related work
Researchers have applied convex techniques to neural networks. Bengio et al. (2006) show that choosing the number
of hidden units converts neural optimization into a convex
problem, see also Bach (2014). A convex multi-layer architectures are developed in Aslan et al. (2014); Zhang et al.
(2016). However, these approaches have not achieved the
practical success of convnets. In this work, we analyze convnets as they are rather than proposing a more tractable, but
potentially less useful, model. A Taylor decomposition for
neural networks was proposed in Montavon et al. (2015).
They treat inputs as variable instead of weights and study
interpretability instead of convergence. Taylor approximations to neural nets have also been used in Schraudolph
(2002); Martens et al. (2012) to construct the generalized
Gauss-Newton matrix as an alternative to the Hessian.
Our results are closely related to Balduzzi (2016), which
uses game-theoretic techniques to prove convergence in
rectifier nets. The approach taken here is more direct and
holds in greater generality.
1
For simplicity, we restrict to fully connected rectifier (ReLU)
nets. The results also apply to convolutions, max-pooling,
dropout, dropconnect, maxout, PReLUs and CReLUs (Srivastava
et al., 2014; Wan et al., 2013; Goodfellow et al., 2013; He et al.,
2015; Shang et al., 2016).

2. Convergence of Neural Networks
Before presenting the main result, we highlight some issues that arise when studying convergence in rectifier nets.
Many optimization methods have guarantees that hold in
convex or smooth settings. However, none of the guarantees extend to rectifier nets. For example, the literature provides no rigorous account of when or why Adam
or Adagrad converges faster on rectifier nets than vanilla
gradient descent. Instead, we currently have only intuition,
empirics and an analogy with convex or smooth settings.
Gradient-based optimization on neural nets can converge
on local optima that are substantially worse than the global
optimum. Fortunately, “bad” local optima are rare in practice. A partial explanation for the prevalence of “good
enough” local optima is Choromanska et al. (2015). Nevertheless, it is important to acknowledge that neural nets
can and do converge to bad local optima. It is therefore
impossible to prove (non-stochastic) bounds relative to the
global optimum. Such a result may be provable under further assumptions. However, since the result would contradict empirical evidence, the assumptions would necessarily
be unrealistic.
2.1. What kind of guarantee is possible?
The landscape of a rectifier net decomposes into smooth
regions separated by kinks (Pascanu et al., 2014; Telgarsky, 2016), see figure 2. Gradients on different sides of
a kink are unrelated since the derivative is discontinuous.
Gradient-based optimizers cannot “peer around” the kinks
in rectifier nets.
Gradient-based optimization on rectifier nets thus decomposes into two components. The first is steepest descent
in a smooth region; the second moves between smooth regions. The first component is vanilla optimization whereas
the second involves an element of exploration: what the
optimizer encounters when it crosses a kink cannot be predicted.
The convergence guarantee in theorem 2 takes both components of the factorization into account in different ways.
It is formulated in the adversarial setting of online convex
optimization. Intuitively, the adversary is the nonsmooth
geometry of the landscape, which generates what may-aswell-be a new loss whenever backprop enters a different
smooth region.
Backprop searches a vast nonconvex landscape with a linear flashlight (the Taylor losses are a more sharply focused
convex flashlight, see A4). The adversary is the landscape: from backprop’s perspective its geometry – especially across kinks – is an unpredictable external force.
The Taylor losses are a series of convex problems that back-

Neural Taylor Approximations

smooth regions

n 1

T

a lower-bound. It cannot be improved without additional
assumptions.

fW (x)

2.3. Neural Taylor Approximation

Tn
Tn+1
Wn

1

Wn

Wn+1

Fig. 2: Neural Taylor approximation.
prop de facto optimizes – the gradients of the actual and
Taylor losses are identical. The Taylor optimum improves
when, stepping over a kink, backprop shines its light on a
new (better) region of the landscape (fig. 2). Regret quantifies the gap between the Taylor optimal loss and the losses
incurred during training.
2.2. Online Convex Optimization
In online convex optimization (Zinkevich, 2003), a learner
is given convex loss functions `1 , . . . `N . On the nth round,
the learner predicts Wn prior to observing `n , and then
incurs loss `n (Wn ). Since the losses are not known in advance, the performance of the learner is evaluated post hoc
via the regret, the difference between the incurred losses
and the optimal loss in hindsight:
Regret(N ) :=

N h
X

n=1

`n (Wn )
| {z }

losses incurred

where V⇤ := argminV2H

hP

`n (V⇤ )
| {z }

optimal-in-hindsight

N
n
n=1 ` (V)

i

i

. An algorithm

has no-regret if limN !1 Regret(N )/N = 0 for any sequence of convex losses with bounded gradients. For example, Kingma & Ba (2015) prove:
Theorem 1 (Adam has no-regret).
Suppose the convex losses `n have bounded gradients
k rW `n (W)k2  G and k rW `n (W)k1  G for all
W 2 H and suppose that the weights chosen by the algorithm satisfy kWm Wn k2  D and kWm Wn k1 
D for all m, n 2 {1, . . . , N }. Then Adam satisfies
⇣ p ⌘
for all N 1. (1)
Regret(N )/N  O 1/ N
The regret of gradient descent, AdaGrad (Duchi et al.,
2011), mirror descent and a variety of related algorithms
satisfy (1), albeit with different constant terms
p that are hidden in the big-O notation. Finally, the 1/ N rate is also

Consider a network with L 1 hidden layers and weight
matrices W := {W1 , . . . , WL }. Let x0 denote the input.
For hidden layers l 2 {1, . . . , L 1}, set al = Wl · xl 1
and xl = s(al ) where s(·) is applied coordinatewise. The
last layer outputs xL = aL = WL · xL 1 . Let pl denote the size of the lth layer; p0 is the size of the input
and pL is the size of the output. Suppose the loss `(f , y)
is smooth and convex in the first argument. The training
data is (xd , y d )D
d=1 . The network is trained on stochastic samples from the training data on a series of rounds
n = 1, . . . , N . For simplicity we assume minibatch size
1; the results generalize without difficulty.
We recall backprop using notation from Martens et al.
(2012). Let Jab denote the Jacobian matrix of the vector a
with respect to the vector b. By the chain rule the gradient
decomposes as
l+1
rWl ` fW (x0 ), y) = JEL · JL
⌦xl
L 1 · · · Jl
|
{z
}

1

(2)

l

=

JEL

|{z}

·

JL
⌦ xl 1
| l {z }

rf `(f ,y) rWl fW (x0 )=:Gl

where l = JEl is the backpropagated error computed recursively via l = l+1 · Jl+1
.2 The middle expression in
l
(2) is the standard representation of backpropagated gradients. The expression on the right factorizes the backpropaE
gated error l = JEL ·JL
l into the gradient of the loss JL and
the Jacobian JL
between
layers,
which
describes
gradient
l
flow within the network.
The first-order Taylor approximation to a differentiable
function f : R ! R near a is Ta (x) = f (a)+f 0 (a)·(x a).
The neural Taylor approximation for a fully connected network is as follows.
Definition 1. The Jacobian tensor of layer l, Gl := JL
l ⌦
xl 1 , is the gradient of the output of the neural network
with respect to the weights of layer l. It is the outer product of a (pL ⇥ pl )-matrix with a pl 1 -vector, and so is a
(pL , pl , pl 1 )-tensor.
Given Gl and (pl ⇥ pl 1 )-matrix V, the expression
hGl , Vi := JL
l · V · xl 1 is the pL -vector computed via
matrix-matrix-vector multiplication. The neural Taylor approximation to f in a neighborhood of Wn , given input xn0 ,
2
Note: we suppress the dependence of the Jacobians on the
round n to simplify notation.

Neural Taylor Approximations

is the first-order Taylor expansion
Tn (V) := fWn (xn0 ) +

L
X
⌦

Tnl/↵ (Vl/↵ ) := `(Tnl/↵ (Vl/↵ ), y n ). Then,

Gl , V l

l=1

↵
Wln ⇡ fV (xn0 ).

Finally, the Taylor loss of the network on round n is
Tn (V) = `(Tn (V), y n ).
The Taylor approximation to layer l is
⌦
Tnl (Vl ) := fWn (xn0 ) + Gl , Vl

↵
Wln .

We can also construct the Taylor approximation to neuron
L
↵ in layer l. Let the pL -vector JL
↵ := Jl [ :, ↵] denote the
Jacobian with respect to neuron ↵ and let the (pL ⇥ pl 1 )matrix G↵ := JL
↵ ⌦ xl 1 denote the Jacobian with respect
to the weights of neuron ↵. The Taylor approximation to
neuron ↵ is
⌦
Tn↵ (V↵ ) := fWn (xn0 ) + G↵ , V↵

↵
n
W↵
.

The Taylor losses are the simplest non-trivial (i.e. nonaffine) convex functions encoding the information generated by backprop, see section A4.
The following theorem provides convergence guarantees at
mutiple spatial scales: network-wise, layer-wise and neuronal. See sections A2 for a proof of the theorem. It is not
currently clear which scale provides the tightest bound.
Theorem 2 (no-regret relative to Taylor optimum).
Suppose, as in Theorem 1, the Taylor losses have bounded
gradients and the weights of the neural network have
bounded diameter during training.
Suppose the neural p
net is optimized by an algorithm with
Regret(N )  O( N ) such as gradient descent, AdaGrad, Adam or mirror descent.
• Network guarantee:
The running average of the training error of the neural
network satisfies
N
1 X
` (fWn (xn0 ), y n )  min
V
N n=1
|
{z
} |
running average of training errors

✓

(

)
N
1 X n
T (V) (3)
N n=1
{z
}

Taylor optimum

◆
1
+O p
.
N
| {z }
Regret(N )/N

• Layer-wise / Neuron-wise guarantee:
The Taylor loss of [layer-l / neuron-↵] is

N
1 X
` (fWn (xn0 ), y n )  min
Vl/↵
N n=1
|
{z
} |
running average of training errors

(

)
N
1 X n
T (Vl/↵ )
N n=1 l/↵
{z
}

layer-wise/neuronal Taylor optimum

✓

◆

(4)

1
+O p
.
N
| {z }
Regret(N )/N

The running average of errors during training (or cumulative loss) is the same quantity that arises in the analyses
of Adam and Adagrad (Kingma & Ba, 2015; Duchi et al.,
2011).
Implications of the theorem. The global optima of neural nets are not computationally accessible. Theorem 2
sidesteps the problem by providing a guarantee relative to
the Taylor optimum. The bound is path-dependent; it depends on the convex snapshots encountered by backprop
during training.
Path-dependency is a key feature of the theorem. It is a
simple matter to construct a deep fully connected network
(> 100 layers) that fails to learn because gradients do not
propagate through the network (He et al., 2016). A convergence theorem for neural nets must also be applicable
in such pathological cases. Theorem 2 still holds because
the failure of gradients to propagate through the network
results in Taylor losses with poor solutions.
Although the bound in theorem 2 is path-dependent, it is
nevertheless meaningful. The right-hand-side is given by
the Taylor optimum, which is the optimal solution to the
best convex approximations to the actual losses; best in the
sense that they have the same value and have the same gradient for the encountered weights. The theorem replaces a
seemingly intractable problem – neither smooth nor convex
– with a sequence of convex problems.
Empirically, see below, we find that the Taylor optimum is
a tough target on a range of datasets and settings: MNIST
and CIFAR10; supervised and unsupervised learning; convolutional and fully-connected architectures; under a variety of optimizers (Adam, SGD, RMSProp), and for individual neurons as well as entire layers.
Finally, the decomposition of learning over rectifier networks into vanilla optimization and exploration components suggests investigating the exploratory behavior of
different optimizers – with the theorem providing concrete
tools to do so, see section 3.

Neural Taylor Approximations

6
4
Layer 1
Layer 2
Layer 3

2
0

20

40

60

epochs

(a) All conv layers

80

100

Neuron loss
Taylor optimal
Regret
Network loss

16

Cumul. Loss

16

Cumul. Loss

Cumul. Regret

8

8

0

20

40

60

80

epochs

(b) Layer 1 (input layer)

100

Neuron loss
Taylor optimal
Regret
Network loss

8

0

20

40

60

80

100

epochs

(c) Layer 2

Fig. 3: Average normalized cumulative regret for RMSProp on CIFAR-10. (a) Average regret incurred by neurons in
each layer over 50 neurons/layer. (b)-(c) Average regret incurred eachs neuron in layers 1 and 2 respectively, along with
average loss, Taylor optimum and cumulative network loss. Shaded areas represent one standard deviation.
2.4. Empirical Analysis of Online Neural Optimization
This section empirically investigates the Taylor optimum
and regret terms in theorem 2 on two tasks:
Autoencoder trained on MNIST. Dense layers with architecture 784 ! 50 ! 30 ! 20 ! 30 ! 50 ! 784 and
ReLU non-linearities. Trained with MSE loss using minibatches of 64.
Convnet trained on CIFAR-10. Three convolutional layers with stack size 64 and 5 ⇥ 5 receptive fields, ReLU nonlinearities and 2 ⇥ 2 max-pooling. Followed by a 192 unit
fully-connected layer with ReLU before a ten-dimensional
fully-connected output layer. Trained with cross-entropy
loss using minibatches of 128.
For both tasks we compare the optimization performance of
Adam, RMSProp and SGD (figure 6 in appendix). Learning rates were tuned for optimal performance. Additional
parameters for Adam and RMSProp were left at default.
For the convnet all three methods perform equally well:
achieving a small loss and an accuracy of
99% on the
training set. However, SGD exhibits slightly more variance. For the autoencoder, although it is an extremely simple model, SGD with the best (fixed) learning rate performs
significantly worse than the adaptive optimizers.
The neuronal and layer-wise regret are evaluated for each
model. At every iteration we record the training error – the
left-hand-side of eq. (4). To evaluate the Taylor loss, we
record the input to the neuron/layer, its weights, the output
of the network and the gradient tensor Gl . After training,
we minimize the Taylor loss with respect to V to find the
Taylor optimum at each round. The regret is the difference
between the observed training loss and the optimal Taylor
loss.
The figures show cumulative lossespand regret. For illustrative purposes we normalize by 1/ N : quantities growing

p
at N therefore flatten out. Figure 3(a) compares the average regret incurred by neurons in each convolutional layer
of the convnet. Shaded regions show one standard deviation. Dashed lines are the regret of individual neurons –
importantly the regret behaviour of neurons holds both on
average and individually. Figs 3(b) and 3(c) show the regret, cumulative loss incurred by the network, the average
loss incurred and the Taylor optimal loss for neurons in layers 1 and 2 respectively.
Fig. 4 compares Adam, RMSProp and SGD. Figure 4(a)
shows the layer-wise regret p
on the convnet. The regret of all
of the optimizers scales as N for both models, matching
the bound in Theorem 2. The additional variance exhibited by SGD explains the difference in regret magnitude.
Similar behaviour was observed in the other layers of the
networks and also for convnets trained on MNIST.
Figure 4(b) shows the same plot
p for the autoencoder. The
regret of all methods scales as N (this also holds for the
other layers in the network). The gap in performance can
be further explained by examining the difference between
the observed loss and Taylor optimal loss. Figure 4(c) compares these quantities for each method on the autoencoder.
The adaptive optimizers incur lower losses than SGD. Further, the gap between the actually incurred and optimal loss
is smaller for adaptive optimizers. This is possibly because
adaptive optimizers find better activation configurations of
the network, see discussion in section 3.
Remarkably,
figures 3 and 4 confirm that regret scales as
p
N for a variety of optimizers, datasets, models, neurons
and layers – verifying the multi-scale guarantee of Theorem 2. A possiblepexplanation for why optimizers match
the worst-case (1/ N ) regret is that the adversary (that is,
the landscape) keeps revealing Taylor losses with better solutions. The optimizer struggles to keep up with the hindsight optimum on the constantly changing Taylor losses.

Neural Taylor Approximations
16

8
Adam
RMSProp
SGD

4
20

40

60

80

0.3

6
5
4
Adam
RMSProp
SGD

3
2

100

20

epochs

(a) Convnet regret, layer 2

Cumul. Loss

12

Cumul. Regret

Cumul. Regret

7

40

60

0.2
Taylor optimal
loss
0.1

80

20

epochs

40

60

80

epochs

(b) Autoencoder regret, layer 3

(c) Cumul. losses for autoencoder

Fig. 4: Comparison of regret for Adam, RMSProp and SGD. The y-axis in (b) is scaled by ⇥1000. (c) reports cumulative loss and Taylor optimal loss on layer 3 for each method.

3. Optimization and Exploration in Rectifier
Neural Networks
Poor optima in rectifier nets are related to shattered gradients: backprop cannot estimate gradients in nearby smooth
regions without directly computing them; the flashlight
does not shine across kinks. Two recent papers have shown
that noise improves the local optima found during training: Neelakantan et al. (2016) introduce noise into gradients whereas Gulcehre et al. (2016) use noisy activations to
extract gradient information from across kinks. Intuitively,
noise is a mechanism to “peer around kinks” in shattered
landscapes.
Introducing noise is not the only way to find better optima.
Not only do adaptive optimizers often converge faster than
vanilla gradient descent, they often also converge to better
local minima.
This section investigates how adaptive optimizers explore
shattered landscapes. Section 3.1 shows that smooth regions in rectifier nets correspond to configurations of active
neurons and that neural Taylor approximations clamp the
activation configuration – i.e. the convex flashlight does
not shine across kinks in the landscape. Section 3.2 observes that adaptive optimizers incorporate an exploration
bias and hypothesizes that the success of adaptive optimizers derives from exploring the set of smooth regions more
extensively than SGD. Section 3.3 evaluates the hypothesis
empirically.
3.1. The Role of Activation Configurations in
Optimization
We describe how configurations of active neurons relate to
smooth regions of rectifier networks and to neural Taylor
approximations. Recall that the loss of a neural net on its

training data is
D
1 X
ˆ
`(W)
=
` fW (xd ), y d .
D
d=1

Definition 2. Enumerate the data as [D] = {1, . . . , D}
and neurons as [M ]. The activation configuration A(W)
is a (D ⇥M ) binary matrix representing the active neurons
for each input. The set of all possible activation configurations corresponds to the set of all (D⇥M ) binary matrices.
Observation 1 (activation configurations correspond to
smooth regions in rectifier networks).
A parameter value exhibits a kink in `ˆ iff an infinitesimal
change alters the of activation configuration, i.e. `ˆ is not
smooth at W iff there is a V s.t. A(W) 6= A(W + V)
for all > 0.
The neural Taylor approximation to a rectifier net admits a
natural description in terms of activation configurations.
Observation 2 (the Taylor approximation clamps activation configurations in rectifier networks).
Suppose datapoint d is sampled on round n. Let 1k :=
A(Wn )[d, layer k] be the pk -vector given by entries of
row d of A(Wn ) corresponding to neurons in layer k of a
rectifier network. The Taylor approximation Tnl is
0

Tnl (Vl ) = 1l · @
|

1

Y

Wkn · diag(1k )A · (Vl Wln )
|
{z
}
k6=l
free
{z
}
clamped

which clamps the activation configuration, and weights of
all layers excluding l.
Observations 1 and 2 connect shattered gradients in rectifier nets to activation configurations and the Taylor loss.
The main implication is to factorize neural optimization

Neural Taylor Approximations

into hard (finding “good” smooth regions) and easy (optimizing within a smooth region) subproblems that correspond, roughly, to finding “good” Taylor losses and optimizing them respectively.
3.2. RMS-Normalization encourages Exploration
Adaptive optimizers based on root-mean-square normalization exhibit an up-to-exponential improvement over nonadaptive methods when gradients are sparse (Duchi et al.,
2013) or low-rank (Krummenacher et al., 2016) in convex
settings. We propose an alternate explanation for the performance of adaptive optimizers in nonconvex nonsmooth
settings.
PD
1
Let r` := D
d=1 r `d denote the average gradient over
a dataset. RProp replaces the average gradient with its coordinatewise sign (Riedmiller & Braun, 1993). An interesting characterization of the signed-gradient is
Observation 3 (signed-gradient is a maximizer).
Suppose none of the coordinates in r` are zero. The
signed-gradient satisfies
n
o
⌦
↵
sign(r`) = argmax kxk1 : x, r`
0 ,
p
x2B1

p
where B1
= {x 2 Rp : max |xi |  1}.
i=1,...,p

The signed-gradient therefore has two key properties.
Firstly, small weight updates using the signed-gradient decrease the loss since hr`, sign(r`)i > 0. Secondly, the
signed-gradient is the update that, subject to an `1 constraint, has the largest impact on the most coordinates. To
adapt RProp to minibatches, Hinton and Tieleman suggested to approximate the signed gradient by P
normalizing
D
d=1 r `d
p
with the root-mean-square: sign(r`) ⇡ PD
,
2
d=1 (r `d )

where (r `d )2 is the square taken coordinatewise. Viewing
the signed-gradient as changing weights – or exploring –
maximally suggests the following hypothesis:

Hypothesis 1 (RMS-normalization encourages exploration
over activation configurations).
Gradient descent with RMS-normalized updates (or running average of RMS) performs a broader search through
the space of activation configurations than vanilla gradient
descent.
3.3. Empirical Analysis of Exploration by Adaptive
Optimizers
Motivated by hypothesis 1, we investigate how RMSProp
and SGD explore the space of activation configurations on
the tasks from section 2.4; see A6 for details.
For fixed parameters W, the activation configuration of a
neural net with M neurons and D datapoints is represented

as a (D ⇥ M ) binary matrix, recall definition 2. The set of
activation configurations encountered by a network over N
rounds of training is represented by an (N, D, M ) binary
tensor denoted A where An := A[n, :, :] := A(Wn ).

Figure 5 quantifies exploration in the space of activation
configurations in three ways:
5(a): Hamming distance plots mink<n kAn Ak k2F , the
minimum Hamming distance between the current activation configuration and all previous configurations. It indicates the novelty of the current activation configuration.
PN 1
1
5(b): Activation-state switches plots tot
n=1 An [d, :
2

] An 1 [d, :] F , the total number of times each data point
(sorted) switches its activation state across all neurons and
epochs as a proportion of possible switches. It indicates the
variability of the network response.

5(c): Log-product of singular values. The matrix A[ :, :
, m] specifies the rounds and datapoints that activate neuron
m. The right column plots the log-product of A[ :, :, m]’s
first 50 singular values for each neuron (sorted).3 It indicates the (log-)volume of configuration space covered by
each neuron. Note that values reaching the bottom of the
plot indicate singular values near 0.
We observe the following.
RMSProp explores the space of activation configurations far more than SGD. The result holds on both tasks,
across all three measures, and for multiple learning rates
for SGD (including the optimally tuned rate). The finding
provides evidence for hypothesis 1.
RMSProp converges to a significantly better local optimum on the autoencoder, see Fig. 6. We observe no
difference on CIFAR-10. We hypothesize that RMSProp
finds a better optimum through more extensive exploration
through the space of activation configurations. CIFAR is
an easier problem and possibly requires less exploration.
Adam explores less than RMSProp. Adam achieves the
best performance on the autoencoder. Surprisingly, it explores substantially less than RMSProp according to the
Hamming distance and activation-switches, although still
more than SGD. The singular values provide a higherresolution analysis: the ±40 most exploratory neurons
match the behavior of RMSProp, with a sharp dropoff from
neuron 60 onwards. A possible explanation is that momentum encourages targeted exploration by rapidly discarding avenues that are not promising. The results for Adam
are more ambiguous than for RMSProp compared to SGD.
3
The time-average is subtracted from each column of A[ :, :
, m]. If the response of neuron m to datapoint d is constant over
all rounds, then column A[ :, d, m] maps to (0, . . . , 0) and does
not contribute to the volume.

Neural Taylor Approximations

RMSProp

Adam
0.06

500

0.06

0.05

0

0.04

0.04

Convnet

SGD lr=0.1

0.07

0.05

0.03

-1000

0.02

0.02

-1500

0.01

0.01
20

40

60

epochs

80

100

0.00

-2000
0

200

400

600

data (ordered)

800

1000

0.06

500

0.06

0.05

0

0.05

0.04

0.00

0

20

40

60

epochs

80

100

(a) Minimum hamming distance.

0.00
0

2000 2500 3000

-1500

0.01

0.01

1000 1500

-1000

0.02

0.02

500

-500

0.03

0.03

0

neurons (ordered)

0.07

0.04

SGD lr=0.01

-500

0.03

0.00
0

Autoencoder

SGD lr=1.0

10000 20000 30000 40000 50000
data (ordered)

(b) Activation-state switches.

-2000
0

20 40 60 80 100 120 140 160 180

neurons (ordered)

(c) Log-product of singular values.

Fig. 5: Top: results for a CIFAR-trained convnet. Bottom: MNIST-trained autoencoder. (a) Minimum hamming
distance between the activation configuration at curent epoch and all previous epochs. (b) Number of activation-state
switches undergone for all neurons over all epochs for each data point (sorted). (c) Log-product of the first 50 singular
values of each neuron activation configuration (sorted).
More generally, the role of momentum in nonsmooth nonconvex optimization requires more investigation.

4. Discussion
Rectifier convnets are the dominant technology in computer vision and a host of related applications. Our main
contribution is the first convergence result applicable to
convnets as they are used in practice, including rectifier
nets, max-pooling, dropout and related methods. The key
analytical tool is the neural Taylor approximation, the firstorder approximation to the output of a neural net. The Taylor loss – the loss on the neural Taylor approximation – is a
convex approximation to the loss of the network. Remarkably, the convergence rate matches known lower bounds on
convex nonsmooth functions (Bubeck, 2015). Experiments
in section 2.4 show the regret matches the theoretical analysis under a wide range of settings.
The bound in theorem 2 contains an easy term to optimize
(the regret) and a hard term (finding “good” Taylor losses).
Section 3.1 observes that the Taylor losses speak directly to
the fundamental difficulty of optimizing nonsmooth functions: that gradients are shattered – the gradient at a point
is not a reliable estimate of nearby gradients.
Smooth regions of rectifier nets correspond to activation

configurations. Gradients in one smooth region cannot be
used to estimate gradients in another. Exploring the set of
activation configurations may therefore be crucial for optimizers to find better local minima in shattered landscapes.
Empirical results in section 3.3 suggest that the improved
performance of RMSProp over SGD can be explained in
part by a carefully tuned exploration bias.
Finally, the paper raises several questions:
1. To what extent is exploration necessary for good performance?
2. Can exploration/exploitation tradeoffs in nonsmooth
neural nets be quantified?
3. There are exponentially more kinks in early layers
(near the input) compared to later layers. Should optimizers explore more aggressively in early layers?
4. Can exploring activation configurations help design
better optimizers?
The Taylor decomposition provides a useful tool for separating the convex and nonconvex aspects of neural optimization, and may also prove useful when tackling exploration in neural nets.

Neural Taylor Approximations

Acknowledgements
We thank L. Helminger and T. Vogels for useful discussions and help with TensorFlow. Some experiments were
performed using a Tesla K80 kindly donated by Nvidia.

References
Aslan, O, Zhang, X, and Schuurmans, Dale. Convex Deep Learning via Normalized Kernels. In NIPS, 2014.

Hinton, G, Srivastava, Nitish, and Swersky, Kevin. Lecture 6a:
Overview of minibatch gradient descent. 2012.
Kingma, Diederik P and Ba, Jimmy Lei. Adam: A method for
stochastic optimization. In ICLR, 2015.
Krizhevsky, A, Sutskever, I, and Hinton, G E. Imagenet classification with deep convolutional neural networks. In Advances
in Neural Information Processing Systems (NIPS), 2012.

Bach, Francis. Breaking the Curse of Dimensionality with Convex Neural Networks. In arXiv:1412.8690, 2014.

Krummenacher, Gabriel, McWilliams, Brian, Kilcher, Yannic,
Buhmann, Joachim M., and Meinshausen, Nicolai. Scalable
adaptive stochastic optimization using random projections. In
NIPS, 2016.

Balduzzi, David. Deep Online Convex Optimization with Gated
Games. In arXiv:1604.01952, 2016.

LeCun, Yann, Bengio, Yoshua, and Hinton, Geoffrey. Deep learning. Nature, 521:436–444, 2015.

Balduzzi, David, Frean, Marcus, Leary, Lennox, Ma, Kurt WanDuo, and McWilliams, Brian. The Shattered Gradients Problem: If resnets are the answer, then what is the question? In
ICML, 2017.
Bengio, Yoshua, Roux, Nicolas Le, Vincent, Pascal, Delalleau,
Olivier, and Marcotte, Patrice. Convex Neural Networks. In
NIPS, 2006.
Bubeck, Sébastien. Convex Optimization: Algorithms and Complexity. Foundations and Trends in Machine Learning, 8(3-4):
231–358, 2015.
Choromanska, A, Henaff, M, Mathieu, M, Arous, G B, and LeCun, Y. The loss surface of multilayer networks. In Journal of
Machine Learning Research: Workshop and Conference Proceeedings, volume 38 (AISTATS), 2015.
Dauphin, Yann, Pascanu, Razvan, Gulcehre, Caglar, Cho,
Kyunghyun, Ganguli, Surya, and Bengio, Yoshua. Identifying and attacking the saddle point problem in high-dimensional
non-convex optimization. In NIPS, 2014.
Dauphin, Yann, de Vries, Harm, and Bengio, Yoshua. Equilibrated adaptive learning rates for non-convex optimization. In
NIPS, 2015.
Duchi, John, Hazan, Elad, and Singer, Yoram. Adaptive Subgradient Methods for Online Learning and Stochastic Optimization.
JMLR, 12:2121–2159, 2011.
Duchi, John, Jordan, Michael I, and McMahan, Brendan. Estimation, optimization, and parallelism when data is sparse. In Advances in Neural Information Processing Systems, pp. 2832–
2840, 2013.
Goodfellow, Ian J, Warde-Farley, David, Mirza, Mehdi, Courville,
Aaron, and Bengio, Yoshua. Maxout Networks. In ICML,
2013.
Gulcehre, Caglar, Moczulski, Marcin, Denil, Misha, and Bengio,
Yoshua. Noisy Activation Functions. In ICML, 2016.
He, Kaiming, Zhang, Xiangyu, Ren, Shaoqing, and Sun, Jian.
Delving Deep into Rectifiers: Surpassing Human-Level Performance on ImageNet Classification. In ICCV, 2015.
He, Kaiming, Zhang, Xiangyu, Ren, Shaoqing, and Sun, Jian.
Deep Residual Learning for Image Recognition. In CVPR,
2016.

Martens, James, Sutskever, Ilya, and Swersky, Kevin. Estimating
the Hessian by Backpropagating Curvature. In ICML, 2012.
Montavon, G, Bach, S, Binder, A, Samek, W, and Müller, K. Explaining NonLinear Classification Decisions with Deep Taylor
Decomposition. In arXiv:1512.02479, 2015.
Neelakantan, Arvind, Vilnis, Luke, Le, Quoc, Sutskever, Ilya,
Kaiser, Lukasz, Kurach, Karol, and Martens, James. Adding
Gradient Noise Improves Learning for Very Deep Networks.
In ICLR, 2016.
Pascanu, Razvan, Gulcehre, Caglar, Cho, Kyunghyun, and Bengio, Yoshua. On the number of inference regions of deep feed
forward networks with piece-wise linear activations. In ICLR,
2014.
Riedmiller, Martin and Braun, H. A direct adaptive method for
faster backpropagation learning: The RPROP algorithm. In
IEEE Int Conf on Neural Networks, pp. 586 – 591, 1993.
Schraudolph, Nicol N. Fast Curvature Matrix-Vector Products
for Second-Order Gradient Descent. Neural Comp, 14:1723–
1738, 2002.
Shang, Wenling, Sohn, Kihyuk, Almeida, Diogo, and Lee,
Honglak. Understanding and Improving Convolutional Neural
Networks via Concatenated Rectified Linear Units. In ICML,
2016.
Simonyan, Karen and Zisserman, Andrew. Very Deep Convolutional Networks for Large-Scale Image Recognition. In ICLR,
2015.
Srivastava, Nitish, Hinton, Geoffrey, Krizhevsky, Alex, Sutskever,
Ilya, and Salakhutdinov, Ruslan. Dropout: A Simple Way to
Prevent Neural Networks from Overfitting. JMLR, 15:1929–
1958, 2014.
Sutskever, Ilya, Martens, James, Dahl, George, and Hinton, Geoffrey. On the importance of initialization and momentum in
deep learning. In Proceedings of the 30th International Conference on Machine Learning (ICML-13), pp. 1139–1147, 2013.
Szegedy, Christian, Liu, Wei, Jia, Yangqing, Sermanet, Pierre,
Reed, Scott, Anguelov, Dragomir, Erhan, Dumitru, Vanhoucke, Vincent, and Rabinovich, Andrew. Going Deeper With
Convolutions. In CVPR, 2015.
Telgarsky, Matus. Benefits of depth in neural networks. In COLT,
2016.

Neural Taylor Approximations
Wan, Li, Zeiler, Matthew, Zhang, Sixin, LeCun, Yann, and Fergus, Rob. Regularization of Neural Networks using DropConnect. In ICML, 2013.
Zeiler, Matthew and Fergus, Rob. Visualizing and Understanding
Convolutional Networks. In ECCV, 2014.
Zhang, Yuchen, Liang, Percy, and Wainwright, Martin J. Convexified Convolutional Neural Networks. In arXiv:1609.01000,
2016.
Zinkevich, Martin. Online Convex Programming and Generalized
Infinitesimal Gradient Ascent. In ICML, 2003.

