Max-value Entropy Search for Efficient Bayesian Optimization

Zi Wang 1 Stefanie Jegelka 1

Abstract
Entropy Search (ES) and Predictive Entropy
Search (PES) are popular and empirically successful Bayesian Optimization techniques. Both
rely on a compelling information-theoretic motivation, and maximize the information gained
about the arg max of the unknown function; yet,
both are plagued by the expensive computation
for estimating entropies. We propose a new criterion, Max-value Entropy Search (MES), that instead uses the information about the maximum
function value. We show relations of MES to
other Bayesian optimization methods, and establish a regret bound. We observe that MES
maintains or improves the good empirical performance of ES/PES, while tremendously lightening the computational burden. In particular, MES
is much more robust to the number of samples
used for computing the entropy, and hence more
efficient for higher dimensional problems.

1. Introduction
Bayesian optimization (BO) has become a popular and effective way for black-box optimization of nonconvex, expensive functions in robotics, machine learning, computer
vision, and many other areas of science and engineering
(Brochu et al., 2009; Calandra et al., 2014; Krause & Ong,
2011; Lizotte et al., 2007; Snoek et al., 2012; Thornton
et al., 2013; Wang et al., 2017). In BO, a prior is posed on
the (unknown) objective function, and the uncertainty given
by the associated posterior is the basis for an acquisition
function that guides the selection of the next point to query
the function. The selection of queries and hence the acquisition function is critical for the success of the method.
Different BO techniques differ in this acquisition function.
1
Computer Science and Artificial Intelligence Laboratory,
Massachusetts Institute of Technology, Massachusetts, USA. Correspondence to: Zi Wang <ziw@csail.mit.edu>, Stefanie Jegelka
<stefje@csail.mit.edu>.

Proceedings of the 34 th International Conference on Machine
Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017
by the author(s).

Among the most popular ones range the Gaussian process
upper confidence bound (GP-UCB) (Auer, 2002; Srinivas
et al., 2010), probability of improvement (PI) (Kushner,
1964), and expected improvement (EI) (MocÃÜkus, 1974).
Particularly successful recent additions are entropy search
(ES) (Hennig & Schuler, 2012) and predictive entropy
search (PES) (HernaÃÅndez-Lobato et al., 2014), which aim
to maximize the mutual information between the queried
points and the location of the global optimum.
ES and PES are effective in the sense that they are queryefficient and identify a good point within competitively few
iterations, but determining the next query point involves
very expensive computations. As a result, these methods
are most useful if the black-box function requires a lot of
effort to evaluate, and are relatively slow otherwise. Moreover, they rely on estimating the entropy of the arg max of
the function. In high dimensions, this estimation demands
a large number of samples from the input space, which can
quickly become inefficient.
We propose a twist to the viewpoint of ES and PES that retains the information-theoretic motivation and empirically
successful query-efficiency of those methods, but at a much
reduced computational cost. The key insight is to replace
the uncertainty about the arg max with the uncertainty
about the maximum function value. As a result, we refer
to our new method as Max-value Entropy Search (MES).
As opposed to the arg max, the maximum function value
lives in a one-dimensional space, which greatly facilitates
the estimation of the mutual information via sampling. We
explore two strategies to make the entropy estimation efficient: an approximation by a Gumbel distribution, and a
Monte Carlo approach that uses random features.
Our contributions are as follows: (1) MES, a variant of
the entropy search methods, which enjoys efficient computation and simple implementation; (2) an intuitive analysis which establishes the first connection between ES/PES
and the previously proposed criteria GP-UCB, PI and
EST (Wang et al., 2016), where the bridge is formed by
MES; (3) a regret bound for a variant of MES, which, to
our knowledge, is the first regret bound established for any
variant of the entropy search methods; (4) an extension of
MES to the high dimensional settings via additive Gaussian processes; and (5) empirical evaluations which demon-

Max-value Entropy Search for Efficient Bayesian Optimization

strate that MES identifies good points as quickly or better
than ES/PES, but is much more efficient and robust in estimating the mutual information, and therefore much faster
than its input-space counterparts.
After acceptance of this work, we learned that Hoffman &
Ghahramani (2015) independently arrived at the acquisition function in Eq. (5). Yet, our approximation (Eq. (6))
is different, and hence the actual acquisition function we
evaluate and analyze is different.

2. Background
Our goal is to maximize a black-box function f : X ‚Üí R
where X ‚äÇ Rd and X is compact. At time step t, we select
point xt and observe a possibly noisy function evaluation
yt = f (xt ) + t , where t ‚àº N (0, œÉ 2 ) are i.i.d. Gaussian variables. We use Gaussian processes (Rasmussen &
Williams, 2006) to build a probabilistic model of the blackbox function to be optimized. For high dimensional cases,
we use a variant of the additive Gaussian process (Duvenaud et al., 2011; Kandasamy et al., 2015). For completeness, we here introduce some basics of GP and add-GP.
2.1. Gaussian Processes
Gaussian processes (GPs) are distributions over functions,
and popular priors for Bayesian nonparametric regression. In a GP, any finite set of function values has a
multivariate Gaussian distribution. A Gaussian process
GP (¬µ, k) is fully specified by a mean function ¬µ(x)
and covariance (kernel) function k(x, x0 ).
Let f be
a function sampled from GP (¬µ, k). Given the observations Dt = {(xœÑ , yœÑ )}tœÑ =1 , we obtain the posterior mean
¬µt (x) = kt (x)T (K t + œÉ 2 I)‚àí1 y t and posterior covariance
kt (x, x0 ) = k(x, x0 ) ‚àí kt (x)T (K t + œÉ 2 I)‚àí1 kt (x0 ) of the
function via the kernel matrix K t = [k(xi , xj )]xi ,xj ‚ààDt
and kt (x) = [k(xi , x)]xi ‚ààDt (Rasmussen & Williams,
2006). The posterior variance is œÉt2 (x) = kt (x, x).
2.2. Additive Gaussian Processes
Additive Gaussian processes (add-GP) were proposed
in (Duvenaud et al., 2011), and analyzed in the BO setting in (Kandasamy et al., 2015). Following the latter, we assume that the function f is a sum of independent functions sampled from Gaussian processes that
are active on disjoint
m of input dimensions. PrePMsets A
(m) Am
cisely, f (x) =
f
(x ), with Ai ‚à© Aj =
m=1
(m)
‚àÖ for all i 6= j, | ‚à™M
A
‚àº
i | = d, and f
i=1
(m) (m)
GP (¬µ , k ), for all m ‚â§ M (M ‚â§ d < ‚àû).
As a result of this decomposition,
the function
f is
PM
PM
distributed according to GP ( m=1 ¬µ(m) , m=1 k (m) ).
Given a set of noisy observations Dt = {(xœÑ , yœÑ )}tœÑ =1
where yœÑ ‚àº N (f (xœÑ ), œÉ 2 ), the posterior mean and

covariance of the function component f (m) can be
(m)
(m)
inferred as ¬µt (x) = kt (x)T (K t + œÉ 2 I)‚àí1 y t
(m)
(m)
and kt (x, x0 ) = k (m) (x, x0 ) ‚àí kt (x)T (K t +
(m)
(m)
(m)
œÉ 2 I)‚àí1 kt h (x0 ), where kt (x)
i = [k (xi , x)]xi ‚ààDt
PM
(m)
and K t =
(xi , xj )
. For simplicity,
m=1 k
xi ,xj ‚ààDt

we use the shorthand k (m) (x, x0 ) = k (m) (xAm , x0Am ).
2.3. Evaluation Criteria
We use two types of evaluation criteria for BO, simple regret and inference regret. In each iteration, we
choose to evaluate one input xt to ‚Äúlearn‚Äù where the
arg max of the function is. The simple regret rT =
maxx‚ààX f (x) ‚àí maxt‚àà[1,T ] f (xt ) measures the value of
the best queried point so far. After all queries, we may
infer an arg max of the function, which is usually chosen
as xÃÉT = arg maxx‚ààX ¬µT (x) (Hennig & Schuler, 2012;
HernaÃÅndez-Lobato et al., 2014). We denote the inference
regret as RT = maxx‚ààX f (x) ‚àí f (xÃÉT ) which characterizes how satisfying our inference of the arg max is.

3. Max-value Entropy Search
Entropy search methods use an information-theoretic perspective to select where to evaluate. They find a query
point that maximizes the information about the location
x‚àó = arg maxx‚ààX f (x) whose value y‚àó = f (x‚àó ) achieves
the global maximum of the function f . Using the negative
differential entropy of p(x‚àó |Dt ) to characterize the uncertainty about x‚àó , ES and PES use the acquisition functions
Œ±t (x) = I({x, y}; x‚àó | Dt )

(1)

= H (p(x‚àó | Dt )) ‚àí E [H(p(x‚àó | Dt ‚à™ {x, y}))] (2)
= H(p(y | Dt , x)) ‚àí E [H(p(y | Dt , x, x‚àó ))] .

(3)

ES uses formulation (2), in which the expectation is over
p(y|Dt , x), while PES uses the equivalent, symmetric formulation (3), where the expectation is over p(x‚àó |Dt ). Unfortunately, both p(x‚àó |Dt ) and its entropy is analytically
intractable and have to be approximated via expensive computations. Moreover, the optimum may not be unique,
adding further complexity to this distribution.
We follow the same information-theoretic idea but propose
a much cheaper and more robust objective to compute. Instead of measuring the information about the argmax x‚àó ,
we use the information about the maximum value y‚àó =
f (x‚àó ). Our acquisition function is the gain in mutual information between the maximum y‚àó and the next point we
query, which can be approximated analytically by evaluating the entropy of the predictive distribution:
Œ±t (x) = I({x, y}; y‚àó | Dt )

(4)

= H(p(y | Dt , x)) ‚àí E[H(p(y | Dt , x, y‚àó ))]

(5)

Max-value Entropy Search for Efficient Bayesian Optimization



1 X Œ≥y‚àó (x)œà(Œ≥y‚àó (x))
‚âà
‚àí log(Œ®(Œ≥y‚àó (x))) (6)
K
2Œ®(Œ≥y‚àó (x))
y‚àó ‚ààY‚àó

where œà is the probability density function and Œ® the cumulative density function of a normal distribution, and
t (x)
. The expectation in Eq. (5) is over
Œ≥y‚àó (x) = y‚àóœÉ‚àí¬µ
t (x)
p(y‚àó |Dn ), which is approximated using Monte Carlo estimation by sampling a set of K function maxima. Notice
that the probability in the first term p(y|Dt , x) is a Gaussian distribution with mean ¬µt (x) and variance kt (x, x).
The probability in the second term p(y|Dn , x, y‚àó ) is a
truncated Gaussian distribution: given y‚àó , the distribution
of y needs to satisfy y < y‚àó . Importantly, while ES
and PES rely on the expensive, d-dimensional distribution
p(x‚àó |Dt ), here, we use the one-dimensional p(y‚àó |Dn ),
which is computationally much easier.
It may not be immediately intuitive that the value should
bear sufficient information for a good search strategy. Yet,
the empirical results in Section 5 will demonstrate that this
strategy is typically at least as good as ES/PES. From a
formal perspective, Wang et al. (2016) showed how an estimate of the maximum value implies a good search strategy
(EST). Indeed, Lemma 3.1 will make the relation between
EST and a simpler, degenerate version of MES explicit.
Hence, it remains to determine how to sample y‚àó . We
propose two strategies: (1) sampling from an approximation via a Gumbel distribution; and (2) sampling functions
from the posterior Gaussian distribution and maximizing
the functions to obtain samples of y‚àó . We present the MES
algorithm in Alg. 1.
3.1. Gumbel Sampling
The marginal distribution of f (x) for any x is a onedimensional Gaussian, and hence the distribution of y ‚àó may
be viewed as the maximum of an infinite collection of dependent Gaussian random variables. Since this distribution
is difficult to compute, we make two simplifications. First,
we replace the continuous set X by a discrete (finite), dense
subset XÃÇ of representative points. If we select XÃÇ to be an cover of X and the function f is Lipschitz continuous with
constant L, then we obtain a valid upper bound on f (X) by
adding L to any upper bound on f (XÃÇ).
Second, we use a ‚Äúmean field‚Äù approximation and treat the
function values at the points in XÃÇ as independent. This approximation tends to over-estimate the maximum; this follows from Slepian‚Äôs lemma if k(x, x0 ) ‚â• 0. Such upper
bounds still lead to optimization strategies with vanishing
regret, whereas lower bounds may not (Wang et al., 2016).
We sample from the approximation pÃÇ(y ‚àó |Dn ) via its cuc ‚àó < z] =
mulative distribution function (CDF) Pr[y
Q
Œ®(Œ≥
(x)).
That
means
we
sample
r uniformly from
z
x‚ààXÃÇ

Algorithm 1 Max-value Entropy Search (MES)
1: function MES (f, D0 )
2:
for t = 1, ¬∑ ¬∑ ¬∑ , T do
3:
Œ±t‚àí1 (¬∑) ‚ÜêA PPROX -MI (Dt‚àí1 )
4:
xt ‚Üê arg maxx‚ààX Œ±t‚àí1 (x)
5:
yt ‚Üê f (xt ) + t , t ‚àº N (0, œÉ 2 )
6:
Dt ‚Üê Dt‚àí1 ‚à™ {xt , yt }
7:
end for
8: end function
9: function Approx-MI (Dt )
10:
if Sample with Gumbel then
11:
approximate Pr[yÃÇ‚àó < y] with G(a, b)
12:
sample a K-length vector r ‚àº Unif([0, 1])
13:
y ‚àó ‚Üê a ‚àí b log(‚àí log r)
14:
else
15:
for i = 1, ¬∑ ¬∑ ¬∑ , K do
16:
sample fÀú ‚àº GP (¬µt , kt | Dt )
17:
y‚àó(i) ‚Üê maxx‚ààX fÀú(x)
18:
end for
19:
y ‚àó ‚Üê [y‚àó(i) ]K
i=1
20:
end if
21:
return Œ±t (¬∑) in Eq. (6)
22: end function

[0, 1] and find z such that Pr[y‚àó < z] = r. A binary search
for z to accuracy Œ¥ requires O(log 1Œ¥ ) queries to the CDF,
and each query takes O(|XÃÇ|) ‚âà O(nd ) time, so we obtain
an overall time of O(M |XÃÇ| log 1Œ¥ ) for drawing M samples.
To sample more efficiently, we propose a O(M +
|XÃÇ| log 1Œ¥ )-time strategy, by approximating the CDF by a
z‚àía
c ‚àó < z] ‚âà G(a, b) = e‚àíe‚àí b .
Gumbel distribution: Pr[y
This choice is motivated by the Fisher-Tippett-Gnedenko
theorem (Fisher, 1930), which states that the maximum of
a set of i.i.d. Gaussian variables is asymptotically described
by a Gumbel distribution (see the appendix for further details). This does not in general extend to non-i.i.d. Gaussian variables, but we nevertheless observe that in practice,
this approach yields a good and fast approximation.
We sample from the Gumbel distribution via the Gumbel
quantile function: we sample r uniformly from [0, 1], and
let the sample be y = G ‚àí1 (a, b) = a ‚àí b log(‚àí log r).
We set the appropriate Gumbel distribution parameters a
and b by percentile matching and solve the two-variable
linear equations a ‚àí b log(‚àí log r1 ) = y1 and a ‚àí
b log(‚àí log r2 ) = y2 , where Pr[y‚àó < y1 ] = r1 and
Pr[y‚àó < y2 ] = r2 . In practice, we use r1 = 0.25 and
r2 = 0.75 so that the scale of the approximated Gumbel
distribution is proportional to the interquartile range of the
CDF PÃÇr[y‚àó < z].

Max-value Entropy Search for Efficient Bayesian Optimization

3.2. Sampling y‚àó via Posterior Functions
For an alternative sampling strategy we follow (HernaÃÅndezLobato et al., 2014): we draw functions from the posterior GP and then maximize each of the sampled functions.
Given the observations Dt = {(xœÑ , yœÑ )tœÑ =1 }, we can approximate the posterior Gaussian process using a 1-hiddenlayer neural network fÀú(x) = aTt œÜ(x) where œÜ(x) ‚àà RD
is a vector of feature functions (Neal, 1996; Rahimi et al.,
2007) and the Gaussian weight at ‚àà RD is distributed according to a multivariate Gaussian N (ŒΩ t , Œ£t ).
Computing œÜ(x).
By Bochner‚Äôs theorem (Rudin,
2011), the Fourier transform kÃÇ of a continuous and
translation-invariant kernel k is guaranteed to be a probability distribution. Hence we can write the kernel
T
0
of the GP to be k(x, x0 ) = Eœâ‚àºkÃÇ(œâ) [eiœâ (x‚àíx ) ] =
Ec‚àºU [0,2œÄ] EkÃÇ [2 cos(œâ T x + c) cos(œâ T x0 + c)] and approximate the expectation
by k(x, x0 ) ‚âà œÜT (x)œÜ(x0 ) where
q

2
T
œÜi (x) =
D cos(œâi x + ci ), œâi ‚àº Œ∫ÃÇ(œâ), and ci ‚àº
U [0, 2œÄ] for i = 1, . . . , D.

Computing ŒΩ t , Œ£t . By writing the GP as a random linear
combination of feature functions aTt œÜ(x), we are defining the mean and covariance of the GP to be ¬µt (x) =
ŒΩ T œÜ(x) and k(x, x0 ) = œÜ(x)T Œ£t œÜ(x0 ). Let Z =
[z1 , ¬∑ ¬∑ ¬∑ , zt ] ‚àà RD√ót , where zœÑ := œÜ(xœÑ ) ‚àà RD . The
GP posterior mean and covariance in Section 2.1 become
¬µt (x) = z T Z(Z T Z + œÉ 2 I)‚àí1 y t and kt (x, x0 ) = z T z 0 ‚àí
z T Z(Z T Z + œÉ 2 I)‚àí1 Z T z 0 . Because Z(Z T Z + œÉ 2 I)‚àí1 =
(ZZ T +œÉ 2 I)‚àí1 Z, we can simplify the above equations and
obtain ŒΩ t = œÉ ‚àí2 Œ£t Zt y t and Œ£t = (ZZ T œÉ ‚àí2 + I)‚àí1 .
To sample a function from this random 1-hidden-layer neural network, we sample aÃÉ from N (ŒΩ t , Œ£t ) and construct
the sampled function fÀú = aÃÉT œÜ(x). Then we optimize fÀú
with respect to its input to get a sample of the maximum of
the function maxx‚ààX fÀú(x).

Proof. The equivalence among 2,3,4 is stated in Lemma
2.1 in (Wang et al., 2016). What remains to be shown
is the equivalence between 1 and 2. When using a single y‚àó in MES, the next point to evaluate is chosen by
œà(Œ≥ (x))
maximizing Œ±t (x) = Œ≥y‚àó (x) 2Œ®(Œ≥yy‚àó (x)) ‚àí log(Œ®(Œ≥y‚àó (x)))
‚àó

t (x)
and Œ≥y‚àó = y‚àóœÉ‚àí¬µ
. For EST with m = y‚àó , the next
t (x)
point to evaluate is chosen by minimizing Œ≥y‚àó (x). Let us
œà(u)
define a function g(u) = u 2Œ®(u)
‚àí log(Œ®(u)). Clearly,
Œ±t (x) = g(Œ≥y‚àó (x)). Because g(u) is a monotonically decreasing function, maximizing g(Œ≥y‚àó (x)) is equivalent to
minimizing Œ≥y‚àó (x). Hence 1 and 2 are equivalent.

3.4. Regret Bound
The connection with EST directly leads to a bound on the
simple regret of MES, when using only one sample of y‚àó .
We prove Theorem 3.2 in the appendix.
Theorem 3.2. Let F be the cumulative probability distribution for the maximum of any function f sampled from
GP (¬µ, k) over the compact search space X ‚äÇ Rd , where
k(x, x0 ) ‚â§ 1, ‚àÄx, x0 ‚àà X. Let f‚àó = maxx‚ààX f (x) and
w = F (f‚àó ) ‚àà (0, 1), and assume the observation noise is
iid N (0, œÉ). If in each iteration t, the query point is chosen
œà(Œ≥yt (x))

as xt = arg maxx‚ààX Œ≥y‚àót (x) 2Œ®(Œ≥ ‚àót (x)) ‚àílog(Œ®(Œ≥y‚àót (x))),
y‚àót ‚àí¬µt (x)
œÉt (x)

y‚àó

and y‚àót is drawn from F , then
PT
Œ¥
with probability at least 1 ‚àí Œ¥, in T 0 =
i=1 logw 2œÄi
number of iterations, the simple regret satisfies
where Œ≥y‚àót (x) =

r
rT 0 ‚â§

CœÅT
(ŒΩt‚àó + Œ∂T )
T

(7)
1

where C = 2/ log(1 + œÉ ‚àí2 ) and Œ∂T = (2 log( œÄŒ¥T )) 2 ; œÄ
PT
satisfies i=1 œÄi‚àí1 ‚â§ 1 and œÄt > 0, and t‚àó = arg maxt ŒΩt
with ŒΩt , minx‚ààX,y‚àót >f‚àó Œ≥y‚àót (x), and œÅT is the maximum
information gain of at most T selected points.

3.3. Relation to Other BO Methods
As a side effect, our new acquisition function draws connections between ES/PES and other popular BO methods.
The connection between MES and ES/PES follows from
the information-theoretic viewpoint; the following lemma
makes the connections to other methods explicit.
Lemma 3.1. The following methods are equivalent:
1. MES, where we only use a single sample y‚àó for Œ±t (x);
2. EST with m = y‚àó ;
1

3. GP-UCB with Œ≤ 2 = minx‚ààX

y‚àó ‚àí¬µt (x)
œÉt (x) ;

4. PI with Œ∏ = y‚àó .
This equivalence no longer holds if we use M > 1 samples
of y‚àó in MES.

3.5. Model Adaptation
In practice we do not know the hyper-parameters of the GP,
so we must adapt our GP model as we observe more data.
A standard way to learn the GP hyper-parameters is to optimize the marginal data likelihood with respect to the hyperparameters. As a full Bayesian treatment, we can also draw
samples of the hyper-parameters using slice sampling (Vanhatalo et al., 2013), and then marginalize out the hyperparameters in our acquisition function in Eq. (6). Namely,
if we use E to denote the set of sampled settings for the GP
hyper-parameters, our acquisition function becomes

X X  Œ≥yŒ∑ (x)œà(Œ≥yŒ∑ (x))
‚àó
‚àó
Œ∑
‚àí log(Œ®(Œ≥y‚àó (x))) ,
Œ±t (x) =
2Œ®(Œ≥yŒ∑‚àó (x))
Œ∑‚ààE y‚àó ‚ààY‚àó

Max-value Entropy Search for Efficient Bayesian Optimization
y ‚àí¬µŒ∑ (x)

t
and the posterior inference on
where Œ≥yŒ∑‚àó (x) = ‚àóœÉŒ∑ (x)
t
Œ∑
the mean function ¬µt and œÉtŒ∑ depends on the GP hyperparameter setting Œ∑. Similar approaches have been used
in (HernaÃÅndez-Lobato et al., 2014; Snoek et al., 2012).

4. High Dimensional MES with Add-GP
The high-dimensional input setting has been a challenge
for many BO methods. We extend MES to this setting via
additive Gaussian processes (Add-GP). In the past, AddGP has been used and analyzed for GP-UCB (Kandasamy
et al., 2015), which assumed the high dimensional blackbox function is a summation of several disjoint lower dimensional functions. Utilizing this special additive structure, we overcome the statistical problem of having insufficient data to recover a complex function, and the difficulty
of optimizing acquisition functions in high dimensions.
Since the function components f (m) are independent, we
can maximize the mutual information between the input in
the active dimensions Am and maximum of f (m) for each
component separately. Hence, we have a separate acquisition function for each component, where y (m) is the evaluation of f (m) :
(m)

Œ±t

(m)

(x) = I({xAm , y (m) }; y‚àó

= H(p(y

(m)

| Dt , x

Am

| Dt )

(m)

X
(m)

y‚àó

(m)
œà(Œ≥y‚àó (x))
Œ≥y(m)
(x)
‚àó
(m)
2Œ®(Œ≥y‚àó (x))
(m)

(m)

where Œ≥y‚àó (x) =

y‚àó(m) ‚àí¬µt

(x)

(m)
œÉt (x)

))]

1: function Add-MES (f, D0 )
2:
for t = 1, ¬∑ ¬∑ ¬∑ , T do
3:
for m = 1, ¬∑ ¬∑ ¬∑ , M do
(m)
4:
Œ±t‚àí1 (¬∑) ‚ÜêA PPROX -MI (Dt‚àí1 )
(m)

m
5:
xA
‚Üê arg maxxAm ‚ààXAm Œ±t‚àí1 (x)
t
6:
end for
7:
yt ‚Üê f (xt ) + t , t ‚àº N (0, œÉ 2 )
8:
Dt ‚Üê Dt‚àí1 ‚à™ {xt , yt }
9:
end for
10: end function

5. Experiments
‚àí log(Œ®(Œ≥y(m)
(x))) (10)
‚àó

. Analogously to the non-

(m)

(m)

Sampling y‚àó with a Gumbel distribution. The Gumbel sampling from Section 3.1 directly extends to sam(m)
pling y‚àó , approximately. We simply need to samc ‚àó(m) < z] =
ple from the component-wise CDF Pr[y
Q
(m)
x‚ààXÃÇ Œ®(Œ≥y (x))), and use the same Gumbel approximation.
(m)

Sampling y‚àó via posterior functions. The additive
structure removes some connections on the input-to-hidden
layer of our 1-hidden-layer neural network approximation
fÀú(x) = aTt œÜ(x). Namely, for each feature function œÜ there
exists a uniqueqgroup m such that œÜ is only active on xAm ,
2
D

Algorithm 2 Additive Max-value Entropy Search

(9)

additive case, we sample y‚àó , separately for each function
component. We select the final xt by choosing a sub-vector
(m)
(m)
xt
‚àà arg maxx(m) ‚ààAm Œ±t (x(m) ) and concatenating
the components.

and œÜ(x) =

The algorithm for the additive max-value entropy search
method (add-MES) is shown in Algorithm 2. The function
A PPROX -MI does the pre-computation for approximating
the mutual information in a similar way as in Algorithm 1,
except that it only acts on the active dimensions in the m-th
group.

))

‚àí E[H(p(y (m) | Dt , xAm , y‚àó
‚âà

(8)

Œ∫ÃÇ(m) (œâ) and c ‚àº U [0, 2œÄ]. Similar to the non-additive
case, we may draw a posterior sample at ‚àº N (ŒΩ t , Œ£t )
where ŒΩ t = œÉ ‚àí2 Œ£t Zt y t and Œ£t = (ZZ T œÉ ‚àí2 + I)‚àí1 .
Let Bm = {i : œÜi (x) is active on xAm }. The posterior
sample for the function component f (m) is fÀú(m) (x) =
m T Bm
(aB
(xAm ). Then we can maximize fÀú(m) to obt ) œÜ
(m)
tain a sample for y‚àó .

cos(œâ T xAm + c) where R|Am | 3 œâ ‚àº

In this section, we probe the empirical performance of MES
and add-MES on a variety of tasks. Here, MES-G denotes MES with y‚àó sampled from the approximate Gumbel
distribution, and MES-R denotes MES with y‚àó computed
by maximizing a sampled function represented by random
features. Following (Hennig & Schuler, 2012; HernaÃÅndezLobato et al., 2014), we adopt the zero mean function and
non-isotropic squared exponential kernel as the prior for
the GP. We compare to methods from the entropy search
family, i.e., ES and PES, and to other popular Bayesian optimization methods including GP-UCB (denoted by UCB),
PI, EI and EST. The parameter for GP-UCB was set according to Theorem 2 in (Srinivas et al., 2010); the parameter for PI was set to be the observation noise œÉ. For the
functions with unknown GP hyper-parameters, every 10 iterations, we learn the GP hyper-parameters using the same
approach as was used by PES (HernaÃÅndez-Lobato et al.,
2014). For the high dimensional tasks, we follow (Kandasamy et al., 2015) and sample the additive structure/GP
parameters with the highest data likelihood when they are
unknown. We evaluate performance according to the simple regret and inference regret as defined in Section 2.3.
We used the open source Matlab implementation of PES,
ES and EST (Hennig & Schuler, 2012; HernaÃÅndez-Lobato

0.7

0.7

0.6

0.6

0.5

0.5

0.4

0.4

0.3

0.3

log10 rt

log10 Rt

Max-value Entropy Search for Efficient Bayesian Optimization

0.2

0.2

0.1

0.1

0

0

-0.1

-0.1

-0.2

-0.2

-0.3

50

(a)

100

150

t

200

UCB
PI
EI
EST
ES
PES 100
PES 10
PES 1
MES-R 100
MES-R 10
MES-R 1
MES-G 100
MES-G 10
MES-G 1

-0.3

(b)

50

100

150

200

t

Figure 1. (a) Inference regret; (b) simple regret. MES methods
are much less sensitive to the number of maxima y‚àó sampled for
the acquisition function (1, 10 or 100) than PES is to the number
of argmaxes x‚àó .

Table 1. The runtime of selecting the next input. PES 100 is significantly slower than other methods. MES-G‚Äôs runtime is comparable to the fastest method EI while it performs better in terms
of simple and inference regrets.
M ETHOD

T IME ( S )

UCB
PI
EI
EST
ES
PES 100
PES 10

0.08 ¬± 0.05
0.10 ¬± 0.02
0.07 ¬± 0.03
0.15 ¬± 0.02
8.07 ¬± 3.02
15.24 ¬± 4.44
1.61 ¬± 0.50

M ETHOD
PES 1
MES-R 100
MES-R 10
MES-R 1
MES-G 100
MES-G 10
MES-G 1

T IME ( S )
0.20 ¬± 0.06
5.85 ¬± 0.86
0.67 ¬± 0.11
0.13 ¬± 0.03
0.12 ¬± 0.02
0.09 ¬± 0.02
0.09 ¬± 0.03

et al., 2014; Wang et al., 2016). Our Matlab code and
test functions are available at https://github.com/
zi-w/Max-value-Entropy-Search/.
5.1. Synthetic Functions
We begin with a comparison on synthetic functions sampled from a 3-dimensional GP, to probe our conjecture that
MES is much more robust to the number of y‚àó sampled to
estimate the acquisition function than PES is to the number of x‚àó samples. For PES, we sample 100 (PES 100),
10 (PES 10) and 1 (PES 1) argmaxes for the acquisition
function. Similarly, we sample 100, 10, 1 y‚àó values for
MES-R and MES-G. We average the results on 100 functions sampled from the same Gaussian kernel with scale
parameter 5.0 and bandwidth parameter 0.0625, and observation noise N (0, 0.012 ).

Figure 1 shows the simple and inference regrets. For both
regret measures, PES is very sensitive to the the number
of x‚àó sampled for the acquisition function: 100 samples
lead to much better results than 10 or 1. In contrast, both
MES-G and MES-R perform competitively even with 1 or
10 samples. Overall, MES-G is slightly better than MESR, and both MES methods performed better than other ES
methods. MES methods performed better than all other
methods with respect to simple regret. For inference regret, MES methods performed similarly to EST, and much
better than all other methods including PES and ES.
In Table 1, we show the runtime of selecting the next input per iteration1 using GP-UCB, PI, EI, EST, ES, PES,
MES-R and MES-G on the synthetic data with fixed GP
hyper-parameters. For PES and MES-R, every x‚àó or y‚àó requires running an optimization sub-procedure, so their running time grows noticeably with the number of samples.
MES-G avoids this optimization, and competes with the
fastest methods EI and UCB.
In the following experiments, we set the number of x‚àó sampled for PES to be 200, and the number of y‚àó sampled for
MES-R and MES-G to be 100 unless otherwise mentioned.
5.2. Optimization Test Functions
We test on three challenging optimization test functions:
the 2-dimensional eggholder function, the 10-dimensional
Shekel function and the 10-dimensional Michalewicz function. All of these functions have many local optima. We
randomly sample 1000 points to learn a good GP hyperparameter setting, and then run the BO methods with the
same hyper-parameters. The first observation is the same
for all methods. We repeat the experiments 10 times. The
averaged simple regret is shown in the appendix, and the
inference regret is shown in Table 2. On the 2-d eggholder
function, PES was able to achieve better function values
faster than all other methods, which verified the good performance of PES when sufficiently many x‚àó are sampled.
However, for higher-dimensional test functions, the 10-d
Shekel and 10-d Michalewicz function, MES methods performed much better than PES and ES, and MES-G performed better than all other methods.
5.3. Tuning Hyper-parameters for Neural Networks
Next, we experiment with Levenberg-Marquardt optimization for training a 1-hidden-layer neural network. The 4 parameters we tune with BO are the number of neurons, the
damping factor ¬µ, the ¬µ-decrease factor, and the ¬µ-increase
factor. We test regression on the Boston housing dataset
1
All the timing experiments were run exclusively on an Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz. The function evaluation time is excluded.

Max-value Entropy Search for Efficient Bayesian Optimization
Table 2. Inference regret RT for optimizing the eggholder function, Shekel function, and Michalewicz function.

M ETHOD

E GGHOLDER

S HEKEL

M ICHALEWICZ

UCB
PI
EI
EST
ES
PES
MES-R
MES-G

141.00 ¬± 70.96
52.04 ¬± 39.03
71.18 ¬± 59.18
55.84 ¬± 24.85
48.85 ¬± 29.11
37.94 ¬± 26.05
54.47 ¬± 37.71
46.56 ¬± 27.05

9.40 ¬± 0.26
6.64 ¬± 2.00
6.63 ¬± 0.87
5.57 ¬± 2.56
6.43 ¬± 2.73
8.73 ¬± 0.67
6.17 ¬± 1.80
5.45 ¬± 2.07

6.07 ¬± 0.53
4.97 ¬± 0.39
4.80 ¬± 0.60
5.33 ¬± 0.46
5.11 ¬± 0.73
5.17 ¬± 0.74
4.97 ¬± 0.59
4.49 ¬± 0.51

4

0.052
UCB
PI
EI
EST
ES
PES
MES-R
MES-G

3.5

2.5

0.048
0.046

rt

rt

3

UCB
PI
EI
EST
ES
PES
MES-R
MES-G

0.05

0.044
0.042

2
0.04
1.5
0.038
1

0.036

(a)

50

t

100

150

(b)

50

t

100

150

Figure 2. Tuning hyper-parameters for training a neural network,
(a) Boston housing dataset; (b) breast cancer dataset. MES methods perform better than other methods on (a), while for (b), MESG, UCB, PES perform similarly and better than others.

and classification on the breast cancer dataset (Bache &
Lichman, 2013). The experiments are repeated 20 times,
and the neural network‚Äôs weight initialization and all other
parameters are set to be the same to ensure a fair comparison. Both of the datasets were randomly split into
train/validation/test sets. We initialize the observation set
to have 10 random function evaluations which were set to
be the same across all the methods. The averaged simple
regret for the regression L2-loss on the validation set of the
Boston housing dataset is shown in Fig. 2(a), and the classification accuracy on the validation set of the breast cancer
dataset is shown in Fig. 2(b). For the classification problem on the breast cancer dataset, MES-G, PES and UCB
achieved a similar simple regret. On the Boston housing
dataset, MES methods achieved a lower simple regret. We
also show the inference regrets for both datasets in Table 3.
5.4. Active Learning for Robot Pushing
We use BO to do active learning for the pre-image learning
problem for pushing (Kaelbling & Lozano-PeÃÅrez, 2017).
The function we optimize takes as input the pushing action
of the robot, and outputs the distance of the pushed object
to the goal location. We use BO to minimize the function in

Table 3. Inference regret RT for tuning neural network hyperparameters on the Boston housing and breast cancer datasets.
M ETHOD

B OSTON

C ANCER (%)

UCB
PI
EI
EST
ES
PES
MES-R
MES-G

1.64 ¬± 0.43
2.15 ¬± 0.99
1.99 ¬± 1.03
1.65 ¬± 0.57
1.79 ¬± 0.61
1.52 ¬± 0.32
1.54 ¬± 0.56
1.51 ¬± 0.61

3.83 ¬± 0.01
4.40 ¬± 0.01
4.40 ¬± 0.01
3.93 ¬± 0.01
4.14 ¬± 0.00
3.84 ¬± 0.01
3.96 ¬± 0.01
3.83 ¬± 0.01

Table 4. Inference regret RT for action selection in robot pushing.
M ETHOD

3- D ACTION

4- D ACTION

UCB
PI
EI
EST
ES
PES
MES-R
MES-G

1.10 ¬± 0.66
2.03 ¬± 1.77
1.89 ¬± 1.87
0.70 ¬± 0.90
0.62 ¬± 0.59
0.81 ¬± 1.27
0.61 ¬± 1.23
0.61 ¬± 1.26

0.56 ¬± 0.44
0.16 ¬± 0.20
0.30 ¬± 0.33
0.24 ¬± 0.17
0.25 ¬± 0.20
0.38 ¬± 0.38
0.16 ¬± 0.10
0.24 ¬± 0.25

order to find a good pre-image for pushing the object to the
designated goal location. The first function we tested has
a 3-dimensional input: robot location (rx , ry ) and pushing
duration tr . We initialize the observation size to be one,
the same across all methods. The second function has a
4-dimensional input: robot location and angle (rx , ry , rŒ∏ ),
and pushing duration tr . We initialize the observation to be
50 random points and set them the same for all the methods.
We select 20 random goal locations for each function to
test if BO can learn where to push for these locations. We
show the simple regret in Fig. 4 and the inference regret in
Table 4. MES methods performed on a par with or better
than their competitors.
5.5. High Dimensional BO with Add-MES
In this section, we test our add-MES algorithm on high
dimensional black-box function optimization problems.
First we compare add-MES and add-GP-UCB (Kandasamy
et al., 2015) on a set of synthetic additive functions with
known additive structure and GP hyper-parameters. Each
function component of the synthetic additive function is
active on at most three input dimensions, and is sampled
from a GP with zero mean and Gaussian kernel (bandwidth = 0.1 and scale = 5). For the parameter of addGP-UCB, we follow (Kandasamy et al., 2015) and set
(m)
(m)
Œ≤t
= |Am | log 2t/5. We set the number of y‚àó sampled for each function component in add-MES-R and addMES-G to be 1. We repeat each experiment for 50 times

Max-value Entropy Search for Efficient Bayesian Optimization
d=20

d=30

40
Add-GP-UCB
Add-MES-R
Add-MES-G

30

rt

rt

rt

20

Add-GP-UCB
Add-MES-R
Add-MES-G

40

15
10

d=100

80

140
Add-GP-UCB
Add-MES-R
Add-MES-G

60

20

120

80

40

10

5
0

60

0
200
t

Add-GP-UCB
Add-MES-R
Add-MES-G

100

rt

Add-GP-UCB
Add-MES-R
Add-MES-G

20

d=50

60

rt

d=10
25

0

400

200
t

20

400

200
t

40

400

200
t

400

200
t

400

Figure 3. Simple regrets for add-GP-UCB and add-MES methods on the synthetic add-GP functions. Both add-MES methods outperform
add-GP-UCB except for add-MES-G on the input dimension d = 100. Add-MES-G achieves the lowest simple regret when d is
relatively low, while for higher d add-MES-R becomes better than add-MES-G.
8

0.9
UCB
PI
EI
EST
ES
PES
MES-R
MES-G

7
6

4

0.7
0.6

rt

rt

5

by a robot which has 14 parameters2 . The other function returns the walking speed of a planar bipedal robot, with 25
parameters to tune (Westervelt et al., 2007). In Fig. 5, we
show the simple regrets achieved by add-GP-UCB and addMES. Add-MES methods performed competitively compared to add-GP-UCB on both tasks.

UCB
PI
EI
EST
ES
PES
MES-R
MES-G

0.8

0.5

3

0.4

2

0.3

1

0.2

9

4
Add-GP-UCB
Add-MES-R
Add-MES-G

8
0.1
10

20

t

30

40

(b)

10

20

30

40

t

Figure 4. BO for active data selection on two robot pushing tasks
for minimizing the distance to a random goal with (a) 3-D actions and (b) 4-D actions. MES methods perform better than other
methods on the 3-D function. For the 4-D function, MES methods
converge faster to a good regret, while PI achieves lower regret in
the very end.

3

7

2.5
6

rt

(a)

rt

0

2
5

1.5

4

1

3

for each dimension setting. The results for simple regret
are shown in Fig. 3. Add-MES methods perform much
better than add-GP-UCB in terms of simple regret. Interestingly, add-MES-G works better in lower dimensional
cases where d = 10, 20, 30, while add-MES-R outperforms
both add-MES-G and add-GP-UCB for higher dimensions
where d = 50, 100. In general, MES-G tends to overestimate the maximum of the function because of the independence assumption, and MES-R tends to underestimate the
maximum of the function because of the imperfect global
optimization of the posterior function samples. We conjecture that MES-R is better for settings where exploitation
is preferred over exploration (e.g., not too many local optima), and MES-G works better if exploration is preferred.
To further verify the performance of add-MES in high dimensional problems, we test on two real-world high dimensional experiments. One is a function that returns the distance between a goal location and two objects being pushed

Add-GP-UCB
Add-MES-R
Add-MES-G

3.5

0.5
200

(a)

t

200

400

(b)

400

t

Figure 5. Simple regrets for add-GP-UCB and add-MES methods
on (a) a robot pushing task with 14 parameters and (b) a planar
bipedal walker optimization task with 25 parameters. Both MES
methods perform competitively comparing to add-GP-UCB.

6. Conclusion
We proposed a new information-theoretic approach, maxvalue entropy search (MES), for optimizing expensive
black-box functions. MES is competitive with or better
than previous entropy search methods, but at a much lower
computational cost. Via additive GPs, MES is adaptable
to high-dimensional settings. We theoretically connected
MES to other popular Bayesian optimization methods including entropy search, GP-UCB, PI, and EST, and showed
a bound on the simple regret for a variant of MES. Empirically, MES performs well on a variety of tasks.
2

We implemented the function in (Catto, 2011).

Max-value Entropy Search for Efficient Bayesian Optimization

Acknowledgements
We thank Prof. Leslie Pack Kaelbling and Prof. TomaÃÅs
Lozano-PeÃÅrez for discussions on active learning and
Dr. William Huber for his solution to ‚ÄúExtreme Value
Theory - Show: Normal to Gumbel‚Äù at stats.
stackexchange.com, which leads to our Gumbel approximation in Section 3.1. We gratefully acknowledge
support from NSF CAREER award 1553284, NSF grants
1420927 and 1523767, from ONR grant N00014-14-10486, and from ARO grant W911NF1410433. We thank
MIT Supercloud and the Lincoln Laboratory Supercomputing Center for providing computational resources. Any
opinions, findings, and conclusions or recommendations
expressed in this material are those of the authors and do
not necessarily reflect the views of our sponsors.

References
Auer, Peter. Using confidence bounds for exploitation-exploration
tradeoffs. Journal of Machine Learning Research, 3:397‚Äì422,
2002.
Bache, Kevin and Lichman, Moshe. UCI machine learning repository. 2013.
Brochu, Eric, Cora, Vlad M, and De Freitas, Nando. A tutorial on
Bayesian optimization of expensive cost functions, with application to active user modeling and hierarchical reinforcement
learning. Technical Report TR-2009-023, University of British
Columbia, 2009.
Calandra, Roberto, Seyfarth, AndreÃÅ, Peters, Jan, and Deisenroth,
Marc Peter. An experimental comparison of Bayesian optimization for bipedal locomotion. In International Conference
on Robotics and Automation (ICRA), 2014.
Catto, Erin. Box2D, a 2D physics engine for games. http:
//box2d.org, 2011.
Duvenaud, David K, Nickisch, Hannes, and Rasmussen, Carl E.
Additive Gaussian processes. In Advances in Neural Information Processing Systems (NIPS), 2011.
Fisher, Ronald Aylmer. The genetical theory of natural selection:
a complete variorum edition. Oxford University Press, 1930.
Hennig, Philipp and Schuler, Christian J. Entropy search for
information-efficient global optimization. Journal of Machine
Learning Research, 13:1809‚Äì1837, 2012.
HernaÃÅndez-Lobato, JoseÃÅ Miguel, Hoffman, Matthew W, and
Ghahramani, Zoubin. Predictive entropy search for efficient
global optimization of black-box functions. In Advances in
Neural Information Processing Systems (NIPS), 2014.

Kandasamy, Kirthevasan, Schneider, Jeff, and Poczos, Barnabas.
High dimensional Bayesian optimisation and bandits via additive models. In International Conference on Machine Learning
(ICML), 2015.
Krause, Andreas and Ong, Cheng S. Contextual Gaussian process bandit optimization. In Advances in Neural Information
Processing Systems (NIPS), 2011.
Kushner, Harold J. A new method of locating the maximum point
of an arbitrary multipeak curve in the presence of noise. Journal of Fluids Engineering, 86(1):97‚Äì106, 1964.
Lizotte, Daniel J, Wang, Tao, Bowling, Michael H, and Schuurmans, Dale. Automatic gait optimization with Gaussian process regression. In International Conference on Artificial Intelligence (IJCAI), 2007.
MocÃÜkus, J. On Bayesian methods for seeking the extremum. In
Optimization Techniques IFIP Technical Conference, 1974.
Neal, R.M. Bayesian Learning for Neural networks. Lecture
Notes in Statistics 118. Springer, 1996.
Rahimi, Ali, Recht, Benjamin, et al. Random features for largescale kernel machines. In Advances in Neural Information Processing Systems (NIPS), 2007.
Rasmussen, Carl Edward and Williams, Christopher KI. Gaussian
processes for machine learning. The MIT Press, 2006.
Rudin, Walter. Fourier analysis on groups. John Wiley & Sons,
2011.
Snoek, Jasper, Larochelle, Hugo, and Adams, Ryan P. Practical Bayesian optimization of machine learning algorithms. In
Advances in Neural Information Processing Systems (NIPS),
2012.
Srinivas, Niranjan, Krause, Andreas, Kakade, Sham M, and
Seeger, Matthias. Gaussian process optimization in the bandit setting: no regret and experimental design. In International
Conference on Machine Learning (ICML), 2010.
Thornton, Chris, Hutter, Frank, Hoos, Holger H, and LeytonBrown, Kevin. Auto-WEKA: combined selection and hyperparameter optimization of classification algorithms. In ACM
SIGKDD Conference on Knowledge Discovery and Data Mining (KDD), 2013.
Vanhatalo, Jarno, RiihimaÃàki, Jaakko, Hartikainen, Jouni, JylaÃànki,
Pasi, Tolvanen, Ville, and Vehtari, Aki. Gpstuff: Bayesian
modeling with gaussian processes. Journal of Machine Learning Research, 14(Apr):1175‚Äì1179, 2013.
Wang, Zi, Zhou, Bolei, and Jegelka, Stefanie. Optimization as
estimation with Gaussian processes in bandit settings. In International Conference on Artificial Intelligence and Statistics
(AISTATS), 2016.

Hoffman, Matthew W and Ghahramani, Zoubin. Output-space
predictive entropy search for flexible global optimization. In
NIPS workshop on Bayesian Optimization, 2015.

Wang, Zi, Jegelka, Stefanie, Kaelbling, Leslie Pack, and LozanoPeÃÅrez, TomaÃÅs. Focused model-learning and planning for nonGaussian continuous state-action systems. In International
Conference on Robotics and Automation (ICRA), 2017.

Kaelbling, Leslie Pack and Lozano-PeÃÅrez, TomaÃÅs. Learning composable models of primitive actions. In International Conference on Robotics and Automation (ICRA), 2017.

Westervelt, Eric R, Grizzle, Jessy W, Chevallereau, Christine,
Choi, Jun Ho, and Morris, Benjamin. Feedback control of dynamic bipedal robot locomotion, volume 28. CRC press, 2007.

