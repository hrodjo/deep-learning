SARAH: A Novel Method for Machine Learning Problems
Using Stochastic Recursive Gradient

Lam M. Nguyen 1 Jie Liu 1 Katya Scheinberg 1 2 Martin Takáč 1

Abstract

Problems of this type arise frequently in supervised learning applications (Hastie et al., 2009). Given a training set
{(xi , yi )}ni=1 with xi ∈ Rd , yi ∈ R, the least squares re-

In this paper, we propose a StochAstic Recursive grAdient algoritHm (SARAH), as well as its
practical variant SARAH+, as a novel approach
to the finite-sum minimization problems. Different from the vanilla SGD and other modern
stochastic methods such as SVRG, S2GD, SAG
and SAGA, SARAH admits a simple recursive
framework for updating stochastic gradient estimates; when comparing to SAG/SAGA, SARAH
does not require a storage of past gradients. The
linear convergence rate of SARAH is proven under strong convexity assumption. We also prove
a linear convergence rate (in the strongly convex
case) for an inner loop of SARAH, the property
that SVRG does not possess. Numerical experiments demonstrate the efficiency of our algorithm.

def

gression model, for example, is written as (1) with fi (w) =
(xTi w−yi )2 + λ2 kwk2 , where k·k denotes the `2 -norm. The
`2 -regularized logistic regression for binary classification
def
is written with fi (w) = log(1 + exp(−yi xTi w)) + λ2 kwk2
(yi ∈ {−1, 1}).
In recent years, many advanced optimization methods have
been developed for problem (1). While the objective function is smooth and convex, the traditional optimization
methods, such as gradient descent (GD) or Newton method
are often impractical for this problem, when n – the number of training samples and hence the number of fi ’s – is
very large. In particular, GD updates iterates as follows
wt+1 = wt − ηt ∇P (wt ),

Under strong convexity assumption on P and with appropriate choice of ηt , GD converges at a linear rate in terms of
objective function values P (wt ). However, when n is large,
computing ∇P (wt ) at each iteration can be prohibitive.

1. Introduction
We are interested in solving a problem of the form


X
def 1
fi (w) ,
min
P (w) =

n
w∈Rd 



t = 0, 1, 2, . . . .

(1)

i∈[n]

def

where each fi , i ∈ [n] = {1, . . . , n}, is convex with a
Lipschitz continuous gradient. Throughout the paper, we
assume that there exists an optimal solution w∗ of (1).
1

Department of Industrial and Systems Engineering,
Lehigh University, USA. 2 On leave at The University of
Oxford, UK. All authors were supported by NSF Grant
CCF-1618717.
Katya Scheinberg was partially supported
by NSF Grants DMS 13-19356, CCF-1320137 and CCF1618717.
Correspondence to: Lam M. Nguyen <lamnguyen.mltd@gmail.com>, Jie Liu <jie.liu.2018@gmail.com>,
Katya Scheinberg <katyas@lehigh.edu>, Martin Takáč
<Takac.MT@gmail.com>.
Proceedings of the 34 th International Conference on Machine
Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017
by the author(s).

As an alternative, stochastic gradient descent (SGD)1 , originating from the seminal work of Robbins and Monro in
1951 (Robbins & Monro, 1951), has become the method
of choice for solving (1). At each step, SGD picks an index i ∈ [n] uniformly at random, and updates the iterate as
wt+1 = wt − ηt ∇fi (wt ), which is up-to n times cheaper
than an iteration of a full gradient method. The convergence rate of SGD is slower than that of GD, in particular, it
is sublinear in the strongly convex case. The tradeoff, however, is advantageous due to the tremendous per-iteration
savings and the fact that low accuracy solutions are sufficient. This trade-off has been thoroughly analyzed in (Bottou, 1998). Unfortunately, in practice SGD method is often
too slow and its performance is too sensitive to the variance in the sample gradients ∇fi (wt ). Use of mini-batches
(averaging multiple sample gradients ∇fi (wt )) was used
in (Shalev-Shwartz et al., 2007; Cotter et al., 2011; Takáč
1
We mark here that even though stochastic gradient is referred
to as SG in literature, the term stochastic gradient descent (SGD)
has been widely used in many important works of large-scale
learning, including SAG/SAGA, SDCA, SVRG and MISO.

SARAH: A Novel Method for Machine Learning Problems Using Stochastic Recursive Gradient
Table 1: Comparisons between different algorithms for strongly
convex functions. κ = L/µ is the condition number.
Method

Complexity

GD
SGD
SVRG

O (nκ log (1/))
O (1/)
O ((n + κ) log (1/))

O ((n + κ) log (1/))
SAG/SAGA
SARAH
O ((n + κ) log (1/))

Fixed
Learning
Rate
3
7
3

Low
Storage
Cost
3
3
3

3

7

3

3

Table 2: Comparisons between different algorithms for convex
functions.
Method
GD
SGD
SVRG
SAGA
SARAH
SARAH (one outer
loop)

Complexity
O (n/)
2
O 1/
√
O (n + ( n/))
O (n + (n/))
O ((n + (1/)) log(1/))

O n + (1/2 )

et al., 2013) to reduce the variance and improve convergence rate by constant factors. Using diminishing sequence
{ηt } is used to control the variance (Shalev-Shwartz et al.,
2011; Bottou et al., 2016), but the practical convergence
of SGD is known to be very sensitive to the choice of this
sequence, which needs to be hand-picked.
Recently, a class of more sophisticated algorithms have
emerged, which use the specific finite-sum form of (1) and
combine some deterministic and stochastic aspects to reduce variance of the steps. The examples of these methods are SAG/SAGA (Le Roux et al., 2012; Defazio et al.,
2014), SDCA (Shalev-Shwartz & Zhang, 2013), SVRG
(Johnson & Zhang, 2013; Xiao & Zhang, 2014), DIAG
(Mokhtari et al., 2017), MISO (Mairal, 2013) and S2GD
(Konečný & Richtárik, 2013), all of which enjoy faster convergence rate than that of SGD and use a fixed learning rate
parameter η. In this paper we introduce a new method in
this category, SARAH, which further improves several aspects of the existing methods. In Table 1 we summarize
complexity and some other properties of the existing methods and SARAH when applied to strongly convex problems. Although SVRG and SARAH have the same convergence rate, we introduce a practical variant of SARAH that
outperforms SVRG in our experiments.
In addition, theoretical results for complexity of the methods or their variants when applied to general convex functions have been derived (Schmidt et al., 2016; Defazio
et al., 2014; Reddi et al., 2016; Allen-Zhu & Yuan, 2016;
Allen-Zhu, 2017). In Table 2 we summarize the key complexity results, noting that convergence rate is now sublinear.

Our Contributions. In this paper, we propose a novel
algorithm which combines some of the good properties of
existing algorithms, such as SAGA and SVRG, while aiming to improve on both of these methods. In particular, our
algorithm does not take steps along a stochastic gradient
direction, but rather along an accumulated direction using
past stochastic gradient information (as in SAGA) and occasional exact gradient information (as in SVRG). We summarize the key properties of the proposed algorithm below.
• Similarly to SVRG, SARAH’s iterations are divided
into the outer loop where a full gradient is computed
and the inner loop where only stochastic gradient is
computed. Unlike the case of SVRG, the steps of
the inner loop of SARAH are based on accumulated
stochastic information.
• Like SAG/SAGA and SVRG, SARAH has a sublinear rate of convergence for general convex functions,
and a linear rate of convergence for strongly convex
functions.
• SARAH uses a constant learning rate, whose size is
larger than that of SVRG. We analyze and discuss the
optimal choice of the learning rate and the number
of inner loop steps. However, unlike SAG/SAGA but
similar to SVRG, SARAH does not require a storage
of n past stochastic gradients.
• We also prove a linear convergence rate (in the
strongly convex case) for the inner loop of SARAH,
the property that SVRG does not possess. We show
that the variance of the steps inside the inner loop goes
to zero, thus SARAH is theoretically more stable and
reliable than SVRG.
• We provide a practical variant of SARAH based on
the convergence properties of the inner loop, where
the simple stable stopping criterion for the inner loop
is used (see Section 4 for more details). This variant shows how SARAH can be made more stable than
SVRG in practice.

2. Stochastic Recursive Gradient Algorithm
Now we are ready to present our SARAH (Algorithm 1).
The key step of the algorithm is a recursive update of the
stochastic gradient estimate (SARAH update)
vt = ∇fit (wt ) − ∇fit (wt−1 ) + vt−1 ,

(2)

followed by the iterate update:
wt+1 = wt − ηvt .

(3)

For comparison, SVRG update can be written in a similar
way as
vt = ∇fit (wt ) − ∇fit (w0 ) + v0 .

(4)

SARAH: A Novel Method for Machine Learning Problems Using Stochastic Recursive Gradient

Algorithm 1 SARAH
Parameters: the learning rate η > 0 and the inner loop
size m.
Initialize: w̃0
Iterate:
for s = 1, 2, . . . do
w0 = w̃P
s−1
n
v0 = n1 i=1 ∇fi (w0 )
w1 = w0 − ηv0
Iterate:
for t = 1, . . . , m − 1 do
Sample it uniformly at random from [n]
vt = ∇fit (wt ) − ∇fit (wt−1 ) + vt−1
wt+1 = wt − ηvt
end for
Set w̃s = wt with t chosen uniformly at random from
{0, 1, . . . , m}
end for
Observe that in SVRG, vt is an unbiased estimator of the
gradient, while it is not true for SARAH. Specifically, 2
E[vt |Ft ] = ∇P (wt )−∇P (wt−1 )+vt−1 6= ∇P (wt ), (5)
where 3 Ft = σ(w0 , i1 , i2 , . . . , it−1 ) is the σ-algebra generated by w0 , i1 , i2 , . . . , it−1 ; F0 = F1 = σ(w0 ). Hence,
SARAH is different from SGD and SVRG type of methods,
however, the following total expectation holds, E[vt ] =
E[∇P (wt )], differentiating SARAH from SAG/SAGA.
SARAH is similar to SVRG since they both contain outer
loops which require one full gradient evaluation per outer
iteration followed by one full gradient descent step with a
given learning rate. The difference lies in the inner loop,
where SARAH updates the stochastic step direction vt recursively by adding and subtracting component gradients
to and from the previous vt−1 (t ≥ 1) in (2). Each inner iteration evaluates 2 stochastic gradients and hence the total
work per outer iteration is O(n+m) in terms of the number
of gradient evaluations. Note that due to its nature, without
running the inner loop, i.e., m = 1, SARAH reduces to the
GD algorithm.

3. Theoretical Analysis
To proceed with the analysis of the proposed algorithm, we
will make the following common assumptions.
Assumption 1 (L-smooth). Each fi : Rd → R, i ∈ [n], is
L-smooth, i.e., there exists a constant L > 0 such that
k∇fi (w) − ∇fi (w0 )k ≤ Lkw − w0 k, ∀w, w0 ∈ Rd .
2
E[·|Ft ] = Eit [·], which is expectation with respect to the
random choice of index it (conditioned on w0 , i1 , i2 , . . . , it−1 ).
3
Ft also contains all the information of w0 , . . . , wt as well as
v0 , . . . , vt−1 .

Note
Pn that this assumption implies that P (w) =
1
i=1 fi (w) is also L-smooth. The following strong conn
vexity assumption will be made for the appropriate parts of
the analysis, otherwise, it would be dropped.
Assumption 2a (µ-strongly convex). The function P :
Rd → R, is µ-strongly convex, i.e., there exists a constant
µ > 0 such that ∀w, w0 ∈ Rd ,
P (w) ≥ P (w0 ) + ∇P (w0 )T (w − w0 ) + µ2 kw − w0 k2 .
Another, stronger, assumption of µ-strong convexity for (1)
will also be imposed when required in our analysis. Note
that Assumption 2b implies Assumption 2a but not vice
versa.
Assumption 2b. Each function fi : Rd → R, i ∈ [n], is
strongly convex with µ > 0.
Under Assumption 2a, let us define the (unique) optimal
solution of (1) as w∗ , Then strong convexity of P implies
that
2µ[P (w) − P (w∗ )] ≤ k∇P (w)k2 , ∀w ∈ Rd .

(6)

We note here, for future use, that for strongly convex functions of the form (1), arising in machine learning applicadef
tions, the condition number is defined as κ = L/µ. Furthermore, we should also notice that Assumptions 2a and
2b both cover a wide range of problems, e.g. l2 -regularized
empirical risk minimization problems with convex losses.
Finally, as a special case of the strong convexity of all fi ’s
with µ = 0, we state the general convexity assumption,
which we will use for convergence analysis.
Assumption 3. Each function fi : Rd → R, i ∈ [n], is
convex, i.e.,
fi (w) ≥ fi (w0 ) + ∇fi (w0 )T (w − w0 ),

∀i ∈ [n].

Again, we note that Assumption 2b implies Assumption 3,
but Assumption 2a does not. Hence in our analysis, depending on the result we aim at, we will require Assumption 3 to hold by itself, or Assumption 2a and Assumption 3
to hold together, or Assumption 2b to hold by itself. We
will always use Assumption 1.
Our iteration complexity analysis aims to bound the number of outer iterations T (or total number of stochastic
gradient evaluations) which is needed to guarantee that
k∇P (wT )k2 ≤ . In this case we will say that wT is an
-accurate solution. However, as is common practice for
stochastic gradient algorithms, we aim to obtain the bound
on the number of iterations, which is required to guarantee
the bound on the expected squared norm of a gradient, i.e.,
E[k∇P (wT )k2 ] ≤ .

(7)

SARAH: A Novel Method for Machine Learning Problems Using Stochastic Recursive Gradient
A Simple Example with SVRG

600

200

200

x2

400

x2

400

0

0

-200

-200

-400

-400

-600
-600

-400

-200

0

200

A Simple Example with SARAH

600

400

-600
-600

600

-400

-200

x1

0

200

400

600

x1

Figure 1: A two-dimensional example of minw P (w) with n = 5
for SVRG (left) and SARAH (right).

10

4

10

2

rcv1, Moving Average with Span 100

rcv1, Moving Average with Span 10

10 3
10 2

10

10 -1

10 -2

10

1

10 0

kvt k2

kvt k2

10 0

10 -2

-4

10 -3
10 -4

10 -6

10 -5

SARAH
SVRG
SGD+
FISTA

10 -8

SARAH
SVRG
SGD+
FISTA

10 -6
10 -7

10 -10
0

5

10

15

Number of Effective Passes

20

0

0.5

1

1.5

2

2.5

3

3.5

4

Number of Effective Passes

Figure 2: An example of `2 -regularized logistic regression on
rcv1 training dataset for SARAH, SVRG, SGD+ and FISTA with
multiple outer iterations (left) and a single outer iteration (right).

3.1. Linearly Diminishing Step-Size in a Single Inner
Loop
The most important property of the SVRG algorithm is the
variance reduction of the steps. This property holds as the
number of outer iteration grows, but it does not hold, if only
the number of inner iterations increases. In other words, if
we simply run the inner loop for many iterations (without
executing additional outer loops), the variance of the steps
does not reduce in the case of SVRG, while it goes to zero
in the case of SARAH. To illustrate this effect, let us take a
look at Figures 1 and 2.
In Figure 1, we applied one outer loop of SVRG and
SARAH to a sum of 5 quadratic functions in a twodimensional space, where the optimal solution is at the origin, the black lines and black dots indicate the trajectory of
each algorithm and the red point indicates the final iterate.
Initially, both SVRG and SARAH take steps along stochastic gradient directions towards the optimal solution. However, later iterations of SVRG wander randomly around the
origin with large deviation from it, while SARAH follows a
much more stable convergent trajectory, with a final iterate
falling in a small neighborhood of the optimal solution.
In Figure 2, the x-axis denotes the number of effective
passes which is equivalent to the number of passes through
all of the data in the dataset, the cost of each pass being
equal to the cost of one full gradient evaluation; and y-axis
represents kvt k2 . Figure 2 shows the evolution of kvt k2

for SARAH, SVRG, SGD+ (SGD with decreasing learning rate) and FISTA (an accelerated version of GD (Beck
& Teboulle, 2009)) with m = 4n, where the left plot shows
the trend over multiple outer iterations and the right plot
shows a single outer iteration4 . We can see that for SVRG,
kvt k2 decreases over the outer iterations, while it has an
increasing trend or oscillating trend for each inner loop.
In contrast, SARAH enjoys decreasing trends both in the
outer and the inner loop iterations.
We will now show that the stochastic steps computed by
SARAH converge linearly in the inner loop. We present
two linear convergence results based on our two different
assumptions of µ-strong convexity. These results substantiate our conclusion that SARAH uses more stable stochastic gradient estimates than SVRG. The following theorem
is our first result to demonstrate the linear convergence of
our stochastic recursive step vt .
Theorem 1a. Suppose that Assumptions 1, 2a and 3 hold.
Consider vt defined by (2) in SARAH (Algorithm 1) with
η < 2/L. Then, for any t ≥ 1,

i
h

2
− 1 µ2 η 2 E[kvt−1 k2 ]
E[kvt k2 ] ≤ 1 − ηL

h

it
2
− 1 µ2 η 2 E[k∇P (w0 )k2 ].
≤ 1 − ηL
This result implies that by choosing η = O(1/L), we obtain the linear convergence of kvt k2 in expectation with the
rate (1 − 1/κ2 ). Below we show that a better convergence
rate can be obtained under a stronger convexity assumption.
Theorem 1b. Suppose that Assumptions 1 and 2b hold.
Consider vt defined by (2) in SARAH (Algorithm 1) with
η ≤ 2/(µ + L). Then the following bound holds, ∀ t ≥ 1,


2
E[kvt k2 ] ≤ 1 − 2µLη
µ+L E[kvt−1 k ]

t
≤ 1 − 2µLη
E[k∇P (w0 )k2 ].
µ+L
Again, by setting η = O(1/L), we derive the linear convergence with the rate of (1 − 1/κ), which is a significant
improvement over the result of Theorem 1a, when the problem is severely ill-conditioned.
3.2. Convergence Analysis
In this section, we derive the general convergence rate results for Algorithm 1. First, we present two important Lemmas as the foundation of our theory. Then, we proceed to
prove sublinear convergence rate of a single outer iteration
when applied to general convex functions. In the end, we
4

In the plots of Figure 2, since the data for SVRG is noisy, we
smooth it by using moving average filters with spans 100 for the
left plot and 10 for the right one.

SARAH: A Novel Method for Machine Learning Problems Using Stochastic Recursive Gradient

prove that the algorithm with multiple outer iterations has
linear convergence rate in the strongly convex case.
We begin with proving two useful lemmas that do not require any convexity assumption. The first Lemma 1 bounds
the sum of expected values of k∇P (wt )k2 . The second,
Lemma 2, bounds E[k∇P (wt ) − vt k2 ].
Lemma 1. Suppose that Assumption 1 holds. Consider
SARAH (Algorithm 1). Then, we have
m
X

E[k∇P (wt )k2 ] ≤

t=0

+

m
X

2
E[P (w0 ) − P (w∗ )]
η

E[k∇P (wt ) − vt k2 ] − (1 − Lη)

t=0

m
X

(8)

Hence, by Lemma 1 with η ≤ 1/L, we have
Pm
2
t=0 E[k∇P (wt )k ]
Pm
2
≤ η E[P (w0 ) − P (w∗ )] + t=0 E[k∇P (wt ) − vt k2 ]
(11)

≤

2
η E[P (w0 )

− P (w∗ )] +

(12)

2
η(m+1) E[P (w̃s−1 )

≤

t=0

E[k∇P (wt ) − vt k2 ] =

t
X

E[kvj − vj−1 k2 ]

j=1

−

t
X

E[k∇P (wj ) − ∇P (wj−1 )k2 ].

j=1

Now we are ready to provide our main theoretical results.
3.2.1. G ENERAL C ONVEX C ASE
Following from Lemma 2, we can obtain the following upper bound for E[k∇P (wt ) − vt k2 ] for convex functions
fi , i ∈ [n].
Lemma 3. Suppose that Assumptions 1 and 3 hold. Consider vt defined as (2) in SARAH (Algorithm 1) with η <
2/L. Then we have that for any t ≥ 1,
i
ηL h
E[kv0 k2 ] − E[kvt k2 ]
E[k∇P (wt ) − vt k2 ] ≤
2 − ηL
ηL
≤
E[kv0 k2 ].
(9)
2 − ηL
Using the above lemmas, we can state and prove one of our
core theorems as follows.
Theorem 2. Suppose that Assumptions 1 and 3 hold. Consider SARAH (Algorithm 1) with η ≤ 1/L. Then for any
s ≥ 1, we have
E[k∇P (w̃s )k2 ] ≤

2
E[P (w̃s−1 ) − P (w∗ )]
η(m + 1)
ηL
+
E[k∇P (w̃s−1 )k2 ]. (10)
2 − ηL

Proof. Since v0 = ∇P (w0 ) implies k∇P (w0 ) − v0 k2 = 0
then by Lemma 3, we can write
Pm
mηL
2
2
(11)
t=0 E[k∇P (wt ) − vt k ] ≤ 2−ηL E[kv0 k ].

(12)

Since we are considering one outer iteration, with s ≥ 1,
then we have v0 = ∇P (w0 ) = ∇P (w̃s−1 ) (since w0 =
w̃s−1 ), and w̃s = wt , where t is picked uniformly at random from {0, 1, . . . , m}. Therefore, the following holds,
Pm
1
2
E[k∇P (w̃s )k2 ] = m+1
t=0 E[k∇P (wt )k ]

E[kvt k2 ].

Lemma 2. Suppose that Assumption 1 holds. Consider vt
defined by (2) in SARAH (Algorithm 1). Then for any t ≥ 1,

mηL
2
2−ηL E[kv0 k ].

+

− P (w∗ )]

ηL
2
2−ηL E[k∇P (w̃s−1 )k ].

Theorem 2, in the case when η ≤ 1/L implies that
E[k∇P (w̃s )k2 ] ≤

2
η(m+1) E[P (w̃s−1 )

− P (w∗ )]

+ ηLE[k∇P (w̃s−1 )k2 ].
q
2
By choosing the learning rate η = L(m+1)
(with m such
q
2
that L(m+1)
≤ 1/L) we can derive the following convergence result,
E[k∇P (w̃s )k2 ]
q
2L
≤ m+1
E[P (w̃s−1 ) − P (w∗ ) + k∇P (w̃s−1 )k2 ].
Clearly, this result shows a sublinear convergence rate for
SARAH under general convexity assumption within a single inner loop, with increasing m, and consequently, we
have the following result for complexity bound.
Corollary 1. Suppose that Assumptions 1 and 3 hold. Consider SARAH (Algorithm 1)qwithin a single outer iteration
2
where m ≥ 2L − 1 is
with the learning rate η = L(m+1)
the total number of iterations, then k∇Pq
(wt )k2 converges

2L
sublinearly in expectation with a rate of m+1
, and therefore, the total complexity to achieve an -accurate solution
defined in (7) is O(n + 1/2 ).

We now turn to estimating convergence of SARAH with
multiple outer steps. Simply using Theorem 2 for each of
the outer steps we have the following result.
Theorem 3. Suppose that Assumptions 1 and 3 hold. Consider SARAH (Algorithm 1) and define
δk =

2
η(m+1) E[P (w̃k )

− P (w∗ )], k = 0, 1, . . . , s − 1,

and δ = max0≤k≤s−1 δk . Then we have
E[k∇P (w̃s )k2 ] − ∆ ≤ αs (k∇P (w̃0 )k2 − ∆),


ηL
ηL
where ∆ = δ 1 + 2(1−ηL)
, and α = 2−ηL
.

(13)

SARAH: A Novel Method for Machine Learning Problems Using Stochastic Recursive Gradient

Learning Rate

1.2589

Convergence Rate

σm (SARAH)
αm (SVRG)

0.7943

0.5012

0.3162

0.1995

0.1259
0

0.5

1

1.5
×10

6

10

5

Evolutions of Convergence Rates

Evolutions of Convergence Rates
1.6

σm (SARAH)
αm (SVRG)

10

3

10

2

σm (SARAH)
αm (SVRG)

1.4

10 4

10 1
10 0
10 -1

2

m

10

Convergence Rate

Evolutions of Learning Rates

1.9953

1.2
1
0.8

0.6

0.4
0

0.5

7

1

1.5

m

2
×10

0.8

1

7

1.2

1.4

1.6

1.8

m

2
×10

7

Figure 3: Theoretical comparisons of learning rates (left) and convergence rates (middle and right) with n = 1, 000, 000 for SVRG and
SARAH in one inner loop.

Based on Theorem 3, we have the following total complexity for SARAH in the general convex case.
Corollary 2. Let us choose ∆ = /4, α = 1/2 (with η =
2/(3L)), and m = O(1/) in Theorem 3. Then, the total
complexity to achieve an -accuracy solution defined in (7)
is O((n + (1/)) log(1/)).
3.2.2. S TRONGLY C ONVEX C ASE
We now turn to the discussion of the linear convergence
rate of SARAH under the strong convexity assumption on
P . From Theorem 2, for any s ≥ 1, using property (6) of
the µ-strongly convex P , we have
E[k∇P (w̃s )k2 ] ≤

2
η(m+1) E[P (w̃s−1 )

+
(6)

≤



1
µη(m+1)

+

− P (w∗ )]

ηL
2
2−ηL E[k∇P (w̃s−1 )k ]

ηL
2−ηL



E[k∇P (w̃s−1 )k2 ],

and equivalently,
E[k∇P (w̃s )k2 ] ≤ σm E[k∇P (w̃s−1 )k2 ].

(14)

def

ηL
1
Let us define σm = µη(m+1)
+ 2−ηL
. Then by choosing
η and m such that σm < 1, and applying (14) recursively,
we are able to reach the following convergence result.

Theorem 4. Suppose that Assumptions 1, 2a and 3 hold.
Consider SARAH (Algorithm 1) with the choice of η and m
such that
def

σm =

ηL
1
+
< 1.
µη(m + 1) 2 − ηL

(15)

η < 1/L required by SARAH. In addition, with the same
values of m and η, the rate or convergence of (the outer
iterations) of SARAH is always smaller than that of SVRG.
σm =
<

ηL
1
1
1
µη(m+1) + 2−ηL = µη(m+1) + 2/(ηL)−1
1
1
µη(1−2Lη)m + 0.5/(ηL)−1 = αm .

Remark 2. To further demonstrate the better convergence
properties of SARAH, let us consider following optimization problem
min
0<η<1/L

σm ,

min
0<η<1/4L

αm ,

which can be interpreted as the best convergence rates for
different values of m, for both SARAH and SVRG. After
simple calculations, we plot both learning rates and the
corresponding theoretical rates of convergence, as shown
in Figure 3, where the right plot is a zoom-in on a part
of the middle plot. The left plot shows that the optimal
learning rate for SARAH is significantly larger than that of
SVRG, while the other two plots show significant improvement upon outer iteration convergence rates for SARAH
over SVRG.
Based on Theorem 4, we are able to derive the following
total complexity for SARAH in the strongly convex case.
Corollary 3. Fix  ∈ (0, 1), and let us run SARAH with
η = 1/(2L) and m = 4.5κ for T iterations where
T = dlog(k∇P (w̃0 )k2 /)/ log(9/7)e, then we can derive
an -accuracy solution defined in (7). Furthermore, we
can obtain the total complexity of SARAH, to achieve the
-accuracy solution, as O ((n + κ) log(1/)) .

Then, we have
E[k∇P (w̃s )k2 ] ≤ (σm )s k∇P (w̃0 )k2 .
Remark 1. Theorem 4 implies that any η < 1/L will work
for SARAH. Let us compare our convergence rate to that of
SVRG. The linear rate of SVRG, as presented in (Johnson
& Zhang, 2013), is given by
αm =

1
µη(1−2Lη)m

+

2ηL
1−2ηL

< 1.

4. A Practical Variant
While SVRG is an efficient variance-reducing stochastic
gradient method, one of its main drawbacks is the sensitivity of the practical performance with respect to the choice
of m. It is know that m should be around O(κ),5 while it
still remains unknown that what the exact best choice is. In
this section, we propose a practical variant of SARAH as
5

We observe that it implies that the learning rate has to
satisfy η < 1/(4L), which is a tighter restriction than

In practice, when n is large, P (w) is often considered as a
regularized Empirical Loss Minimization problem with regularization parameter λ = n1 , then κ ∼ O(n).

SARAH: A Novel Method for Machine Learning Problems Using Stochastic Recursive Gradient

Algorithm 2 SARAH+
Parameters: the learning rate η > 0, 0 < γ ≤ 1 and the
maximum inner loop size m.
Initialize: w̃0
Iterate:
for s = 1, 2, . . . do
w0 = w̃P
s−1
n
v0 = n1 i=1 ∇fi (w0 )
w1 = w0 − ηv0
t=1
while kvt−1 k2 > γkv0 k2 and t < m do
Sample it uniformly at random from [n]
vt = ∇fit (wt ) − ∇fit (wt−1 ) + vt−1
wt+1 = wt − ηvt
t=t+1
end while
Set w̃s = wt
end for
Different from SARAH, SARAH+ provides a possibility of
earlier termination and unnecessary careful choices of m,
and it also covers the classical gradient descent when we
set γ = 1 (since the while loop does not proceed). In Figure 4 we present the numerical performance of SARAH+
with different γs on rcv1 and news20 datasets. The size
of the inner loop provides a trade-off between the fast sublinear convergence in the inner loop and linear convergence
in the outer loop. From the results, it appears that γ = 1/8
is the optimal choice. With a larger γ, i.e. γ > 1/8, the
iterates in the inner loop do not provide sufficient reduction, before another full gradient computation is required,
while with γ < 1/8 an unnecessary number of inner steps
is performed without gaining substantial progress. Clearly
γ is another parameter that requires tuning, however, in our
experiments, the performance of SARAH+ has been very
robust with respect to the choices of γ and did not vary
much from one data set to another.
Similarly to SVRG, kvt k2 decreases in the outer iterations
of SARAH+. However, unlike SVRG, SARAH+ also inherits from SARAH the consistent decrease of kvt k2 in
expectation in the inner loops. It is not possible to apply
the same idea of adaptively terminating the inner loop of

rcv1

news20

0

10

P(w) - P(w *)

10

P(w) - P(w *)

SARAH+ (Algorithm 2), which provides an automatic and
adaptive choice of the inner loop size m. Guided by the linear convergence of the steps in the inner loop, demonstrated
in Figure 2, we introduce a stopping criterion based on the
values of kvt k2 while upper-bounding the total number of
steps by a large enough m for robustness. The other modification compared to SARAH (Algorithm 1) is the more
practical choice w̃s = wt , where t is the last index of the
particular inner loop, instead of randomly selected intermediate index.

10 -5

γ=1
γ=1/2
γ=1/4
γ=1/8
γ=1/16
γ=1/64
γ=1/256

10 -10

10 -15

0

10 -5

γ=1
γ=1/2
γ=1/4
γ=1/8
γ=1/16
γ=1/64
γ=1/256

10 -10

10 -15
0

5

10

15

20

25

30

0

5

Number of Effective Passes

10

15

20

25

Number of Effective Passes

Figure 4: An example of `2 -regularized logistic regression on
rcv1 (left) and news20 (right) training datasets for SARAH+ with
different γs on loss residuals P (w) − P (w∗ ).
Table 3: Summary of datasets used for experiments.
Dataset

d

n (train)

Sparsity

n (test)

L

covtype
ijcnn1
news20
rcv1

54
22
1,355,191
47,236

406,709
91, 701
13, 997
677,399

22.12%
59.09%
0.03375%
0.1549%

174,303
49, 990
5, 999
20,242

1.90396
1.77662
0.2500
0.2500

SVRG based on the reduction in kvt k2 , as kvt k2 may have
side fluctuations as shown in Figure 2.

5. Numerical Experiments
To support the theoretical analyses and insights, we
present our empirical experiments, comparing SARAH and
SARAH+ with the state-of-the-art first-order methods for
`2 -regularized logistic regression problems with
fi (w) = log(1 + exp(−yi xTi w)) + λ2 kwk2 ,
on datasets covtype, ijcnn1, news20 and rcv1 6 . For ijcnn1
and rcv1 we use the predefined testing and training sets,
while covtype and news20 do not have test data, hence we
randomly split the datasets with 70% for training and 30%
for testing. Some statistics of the datasets are summarized
in Table 3.
The penalty parameter λ is set to 1/n as is common practice (Le Roux et al., 2012). Note that like SVRG/S2GD and
SAG/SAGA, SARAH also allows an efficient sparse implementation named “lazy updates” (Konečný et al., 2016).
We conduct and compare numerical results of SARAH
with SVRG, SAG, SGD+ and FISTA. SVRG (Johnson &
Zhang, 2013) and SAG (Le Roux et al., 2012) are classic
modern stochastic methods. SGD+ is SGD with decreasing learning rate η = η0 /(k + 1) where k is the number
of effective passes and η0 is some initial constant learning
rate. FISTA (Beck & Teboulle, 2009) is the Fast Iterative
Shrinkage-Thresholding Algorithm, well-known as an efficient accelerated version of the gradient descent. Even
though for each method, there is a theoretical safe learning
rate, we compare the results for the best learning rates in
hindsight.
Figure 5 shows numerical results in terms of loss residuals
6
All datasets are available at http://www.csie.ntu.
edu.tw/˜cjlin/libsvmtools/datasets/.

SARAH: A Novel Method for Machine Learning Problems Using Stochastic Recursive Gradient

SARAH+
SARAH
SVRG
SAG
SGD+
FISTA

10 -10

10 -15

10

10 -5

SARAH+
SARAH
SVRG
SAG
SGD+
FISTA

10 -10

10 -15
0

10

20

30

40

5

10

15

20

25

Test Error Rate

0.26

SARAH+
SARAH
SVRG
SAG
SGD+
FISTA

10 -10

5

10

15

20

25

30

0

10

20

30

40

Number of Effective Passes

news20

rcv1

0.14

SARAH+
SARAH
SVRG
SAG
SGD+
FISTA

0.095

0.28

10 -5

Number of Effective Passes

0.09

SARAH+
SARAH
SVRG
SAG
SGD+
FISTA

0.13

Test Error Rate

SARAH+
SARAH
SVRG
SAG
SGD+
FISTA

rcv1

0

10 -15
0

0.1

Test Error Rate

SARAH+
SARAH
SVRG
SAG
SGD+
FISTA

10 -10

30

ijcnn1

0.3

10 -5

Number of Effective Passes

covtype

0.32

10

10 -15
0

Number of Effective Passes

0.34

news20

0

P(w) - P(w *)

10 -5

ijcnn1

0

0.085

0.12
0.11

0.036

SARAH+
SARAH
SVRG
SAG
SGD+
FISTA

0.034

Test Error Rate

10

P(w) - P(w *)

covtype

0

P(w) - P(w *)

P(w) - P(w *)

10

0.1
0.09

0.08

0.032
0.03
0.028
0.026

0.08
0.024

0.075

0.24

0.07
0.022

0

5

10

15

20

25

30

35

40

0

Number of Effective Passes

5

10

15

20

25

30

0

5

10

15

20

25

30

0

5

Number of Effective Passes

Number of Effective Passes

10

15

20

25

30

35

40

Number of Effective Passes

∗

Figure 5: Comparisons of loss residuals P (w) − P (w ) (top) and test errors (bottom) from different modern stochastic methods on
covtype, ijcnn1, news20 and rcv1.
SVRG(covtype)

Table 4: Summary of best parameters for all the algorithms on
different datasets.

(2n, 0.9/L)
(0.5n, 0.8/L)
(0.5n, 0.9/L)
(0.7n, 0.7/L)

SVRG
(m∗ , η ∗ )
(n, 0.8/L)
(n, 0.5/L)
(n, 0.5/L)
(0.5n, 0.9/L)

SAG
(η ∗ )

SGD+
(η ∗ )

FISTA
(η ∗ )

0.3/L
0.7/L
0.1/L
0.1/L

0.06/L
0.1/L
0.2/L
0.1/L

50/L
90/L
30/L
120/L

m*/8
m*/4
m*/2
m*
2m*
4m*
8m*

10 0

P(w) - P(w *)

covtype
ijcnn1
news20
rcv1

SARAH
(m∗ , η ∗ )

P(w) - P(w *)

Dataset

SVRG(ijcnn1)

10 0

10 -5

m*/8
m*/4
m*/2
m*
2m*
4m*
8m*

10 -10

10 -5

10 -10

10 -15

10 -15
0

10

20

30

40

0

Number of Effective Passes

10

In particular, to validate the efficiency of our practical variant SARAH+, we provide an insight into how important
the choices of m and η are for SVRG and SARAH in Table 4 and Figure 6. Table 4 presents the optimal choices
of m and η for each of the algorithm, while Figure 6
shows the behaviors of SVRG and SARAH with different
choices of m for covtype and ijcnn1, where m∗ s denote
the best choices. In Table 4, the optimal learning rates of
SARAH vary less among different datasets compared to all
the other methods and they approximate the theoretical upper bound for SARAH (1/L); on the contrary, for the other
methods the empirical optimal rates can exceed their theoretical limits (SVRG with 1/(4L), SAG with 1/(16L),
FISTA with 1/L). This empirical studies suggest that it
is much easier to tune and find the ideal learning rate for
SARAH. As observed in Figure 6, the behaviors of both
SARAH and SVRG are quite sensitive to the choices of m.
With improper choices of m, the loss residuals can be increased considerably from 10−15 to 10−3 on both covtype
in 40 effective passes and ijcnn1 in 17 effective passes for

30

m*/8
m*/4
m*/2
m*
2m*
4m*
8m*

P(w) - P(w *)

10 0

10 -5

m*/8
m*/4
m*/2
m*
2m*
4m*
8m*

10 -10

40

SARAH(ijcnn1)

10 0

P(w) - P(w *)

(top) and test errors (bottom) on the four datasets, SARAH
is sometimes comparable or a little worse than other methods at the beginning. However, it quickly catches up to or
surpasses all other methods, demonstrating a faster rate of
decrease across all experiments. We observe that on covtype and rcv1, SARAH, SVRG and SAG are comparable
with some advantage of SARAH on covtype. On ijcnn1
and news20, SARAH and SVRG consistently surpass the
other methods.

20

Number of Effective Passes

SARAH(covtype)

10 -5

10 -10

10 -15

10 -15
0

10

20

30

Number of Effective Passes

40

0

10

20

30

40

Number of Effective Passes

∗

Figure 6: Comparisons of loss residuals P (w) − P (w ) for different inner loop sizes with SVRG (top) and SARAH (bottom) on
covtype and ijcnn1.

SARAH/SVRG.

6. Conclusion
We propose a new variance reducing stochastic recursive gradient algorithm SARAH, which combines some of
the properties of well known existing algorithms, such as
SAGA and SVRG. For smooth convex functions, we show
a sublinear convergence rate, while for strongly convex
cases, we prove the linear convergence rate and the computational complexity as those of SVRG and SAG. However,
compared to SVRG, SARAH’s convergence rate constant
is smaller and the algorithms is more stable both theoretically and numerically. Additionally, we prove the linear
convergence for inner loops of SARAH which support the
claim of stability. Based on this convergence we derive a
practical version of SARAH, with a simple stopping criterion for the inner loops.

SARAH: A Novel Method for Machine Learning Problems Using Stochastic Recursive Gradient

Acknowledgements
The authors would like to thank the reviewers for useful
suggestions which helped to improve the exposition in the
paper.

References
Allen-Zhu, Zeyuan. Katyusha: The First Direct Acceleration of Stochastic Gradient Methods. Proceedings of the
49th Annual ACM on Symposium on Theory of Computing (to appear), 2017.
Allen-Zhu, Zeyuan and Yuan, Yang. Improved SVRG
for Non-Strongly-Convex or Sum-of-Non-Convex Objectives. In ICML, pp. 1080–1089, 2016.
Beck, Amir and Teboulle, Marc. A fast iterative shrinkagethresholding algorithm for linear inverse problems.
SIAM J. Imaging Sciences, 2(1):183–202, 2009.
Bottou, Léon. Online learning and stochastic approximations. In Saad, David (ed.), Online Learning in Neural
Networks, pp. 9–42. Cambridge University Press, New
York, NY, USA, 1998. ISBN 0-521-65263-4.
Bottou, Léon, Curtis, Frank E, and Nocedal, Jorge. Optimization methods for large-scale machine learning.
arXiv:1606.04838, 2016.
Cotter, Andrew, Shamir, Ohad, Srebro, Nati, and Sridharan,
Karthik. Better mini-batch algorithms via accelerated
gradient methods. In NIPS, pp. 1647–1655, 2011.
Defazio, Aaron, Bach, Francis, and Lacoste-Julien, Simon.
SAGA: A fast incremental gradient method with support
for non-strongly convex composite objectives. In NIPS,
pp. 1646–1654, 2014.
Hastie, Trevor, Tibshirani, Robert, and Friedman, Jerome.
The Elements of Statistical Learning: Data Mining, Inference, and Prediction. Springer Series in Statistics,
2nd edition, 2009.
Johnson, Rie and Zhang, Tong. Accelerating stochastic
gradient descent using predictive variance reduction. In
NIPS, pp. 315–323, 2013.
Konečný, Jakub, Liu, Jie, Richtárik, Peter, and Takáč, Martin. Mini-batch semi-stochastic gradient descent in the
proximal setting. IEEE Journal of Selected Topics in
Signal Processing, 10:242–255, 2016.
Konečný, Jakub and Richtárik, Peter. Semi-stochastic gradient descent methods. arXiv:1312.1666, 2013.
Le Roux, Nicolas, Schmidt, Mark, and Bach, Francis. A
stochastic gradient method with an exponential convergence rate for finite training sets. In NIPS, pp. 2663–
2671, 2012.

Mairal, Julien. Optimization with first-order surrogate
functions. In ICML, pp. 783–791, 2013.
Mokhtari, Aryan, Gürbüzbalaban, Mert, and Ribeiro, Alejandro. A double incremental aggregated gradient
method with linear convergence rate for large-scale optimization. Proceedings of IEEE International Conference on Acoustic, Speech and Signal Processing (to appear), 2017.
Nesterov, Yurii. Introductory lectures on convex optimization : a basic course. Applied optimization. Kluwer
Academic Publ., Boston, Dordrecht, London, 2004.
ISBN 1-4020-7553-7.
Reddi, Sashank J., Hefny, Ahmed, Sra, Suvrit, Póczos,
Barnabás, and Smola, Alexander J. Stochastic variance
reduction for nonconvex optimization. In ICML, pp.
314–323, 2016.
Robbins, Herbert and Monro, Sutton. A stochastic approximation method. The Annals of Mathematical Statistics,
22(3):400–407, 1951.
Schmidt, Mark, Le Roux, Nicolas, and Bach, Francis. Minimizing finite sums with the stochastic average gradient.
Mathematical Programming, pp. 1–30, 2016.
Shalev-Shwartz, Shai and Zhang, Tong. Stochastic dual
coordinate ascent methods for regularized loss. Journal
of Machine Learning Research, 14(1):567–599, 2013.
Shalev-Shwartz, Shai, Singer, Yoram, and Srebro, Nathan.
Pegasos: Primal estimated sub-gradient solver for SVM.
In ICML, pp. 807–814, 2007.
Shalev-Shwartz, Shai, Singer, Yoram, Srebro, Nathan, and
Cotter, Andrew. Pegasos: Primal estimated sub-gradient
solver for SVM. Mathematical Programming, 127(1):
3–30, 2011.
Takáč, Martin, Bijral, Avleen Singh, Richtárik, Peter, and
Srebro, Nathan. Mini-batch primal and dual methods for
SVMs. In ICML, pp. 1022–1030, 2013.
Xiao, Lin and Zhang, Tong. A proximal stochastic gradient method with progressive variance reduction. SIAM
Journal on Optimization, 24(4):2057–2075, 2014.

