Depth-Width Tradeoffs in Approximating Natural Functions with Neural
Networks
Itay Safran 1 Ohad Shamir 1

Abstract
We provide several new depth-based separation
results for feed-forward neural networks, proving
that various types of simple and natural functions
can be better approximated using deeper networks than shallower ones, even if the shallower
networks are much larger. This includes indicators of balls and ellipses; non-linear functions
which are radial with respect to the L1 norm; and
smooth non-linear functions. We also show that
these gaps can be observed experimentally: Increasing the depth indeed allows better learning
than increasing width, when training neural networks to learn an indicator of a unit ball.

1. Introduction
Deep learning, in the form of artificial neural networks, has
seen a dramatic resurgence in the past recent years, achieving great performance improvements in various fields of
artificial intelligence such as computer vision and speech
recognition. While empirically successful, our theoretical
understanding of deep learning is still limited at best.
An emerging line of recent works has studied the expressive power of neural networks: What functions can and
cannot be represented by networks of a given architecture
(see related work section below). A particular focus has
been the trade-off between the network’s width and depth:
On the one hand, it is well-known that large enough networks of depth 2 can already approximate any continuous
d
target function on [0, 1] to arbitrary accuracy (Cybenko,
1989; Hornik, 1991). On the other hand, it has long been
evident that deeper networks tend to perform better than
shallow ones, a phenomenon supported by the intuition that
depth, providing compositional expressibility, is necessary
for efficiently representing some functions. Moreover, re1

Weizmann Institute of Science, Rehovot, Israel. Correspondence to: Itay Safran <itay.safran@weizmann.ac.il>, Ohad
Shamir <ohad.shamir@weizmann.ac.il>.
th

Proceedings of the 34 International Conference on Machine
Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017
by the author(s).

cent empirical evidence suggests that standard feedforward
deep networks are harder to optimize than shallower networks which lead to worse training error and testing error
(He et al., 2015).
To demonstrate the power of depth in neural networks, a
clean and precise approach is to prove the existence of
functions which can be expressed (or well-approximated)
by moderately-sized networks of a given depth, yet cannot
be approximated well by shallower networks, even if their
size is much larger. However, the mere existence of such
functions is not enough: Ideally, we would like to show
such depth separation results using natural, interpretable
functions, of the type we may expect neural networks to
successfully train on. Proving that depth is necessary for
such functions can give us a clearer and more useful insight
into what various neural network architectures can and cannot express in practice.
In this paper, we provide several contributions to this
emerging line of work. We focus on standard, vanilla feedforward networks (using some fixed activation function,
such as the popular ReLU), and measure expressiveness
directly in terms of approximation error, defined as the expected squared loss with respect to some distribution over
the input domain. In this setting, we show the following:
• We prove that the indicator of the Euclidean unit ball,
x 7→ 1 (kxk ≤ 1) in Rd , which can be easily approximated to accuracy  using a 3-layer network with
O(d2 /) neurons, cannot be approximated to an accuracy higher than O(1/d4 ) using a 2-layer network,
unless its width is exponential in d. In fact, we show
the same result more generally, for any indicator of
an ellipsoid x 7→ 1 (kAx + bk ≤ r) (where A is a
non-singular matrix and b is a vector). The proof is
based on a reduction from the main result of (Eldan &
Shamir, 2016), which shows a separation between 2layer and 3-layer networks using a more complicated
and less natural radial function.
• We prove that any L1 radial function x 7→
f (kxk1 ), where x ∈ Rd and f : R → R is
piecewise-linear, cannot be approximated to accuracy
 by a depth 2 ReLU network of width less than

Depth-Width Tradeoffs in Approximating Natural Functions with Neural Networks

Ω̃(min{1/, exp(Ω(d))}). In contrast, such functions
can be represented exactly by 3-layer ReLU networks.
• We show that this depth/width trade-off can also be
observed experimentally: Specifically, that when using standard backpropagation to learn the indicators
of the L1 and L2 unit balls, 3-layer nets give significantly better performance compared to 2-layer nets
(even if much larger). Our theoretical results indicate that this gap in performance is due to approximation error issues. This experiment also highlights
the fact that our separation result is for a natural function that is not just well-approximated by some 3-layer
network, but can also be learned well from data using
standard methods.
• Finally, we prove that any member of a wide family of non-linear and twice-differentiable functions
(including for instance x 7→ x2 in [0, 1]), which
can be approximated to accuracy  using ReLU networks of depth and width O(poly(log(1/))), cannot be approximated to similar accuracy by constantdepth ReLU networks, unless their width is at least
Ω(poly(1/)). We note that a similar result appeared online concurrently and independently of ours
in (Yarotsky, 2016; Liang & Srikant, 2016), but the
setting is a bit different (see related work below for
more details).
R ELATED W ORK
The question of studying the effect of depth in neural network has received considerable attention recently, and studied under various settings. Many of these works consider a somewhat different setting than ours, and hence are
not directly comparable. These include networks which
are not plain-vanilla ones (e.g. (Cohen et al., 2016; Delalleau & Bengio, 2011; Martens & Medabalimi, 2014)),
measuring quantities other than approximation error (e.g.
(Bianchini & Scarselli, 2014; Poole et al., 2016)), focusing only on approximation upper bounds (e.g. (Shaham
et al., 2016)), or measuring approximation error in terms
of L∞ -type bounds, i.e. supx |f (x) − f˜(x))| rather than
L2 -type bounds Ex (f (x) − f˜(x))2 (e.g. (Yarotsky, 2016;
Liang & Srikant, 2016)). We note that the latter distinction is important: Although L∞ bounds are more common
in the approximation theory literature, L2 bounds are more
natural in the context of statistical machine learning problems (where we care about the expected loss over some distribution). Moreover, L2 approximation lower bounds are
stronger, in the sense that an L2 lower bound easily translates to a lower bound on L∞ lower bound, but not vice
versa1 .
1
To give a trivial example, ReLU networks always express
continuous functions, and therefore can never approximate a dis-

A noteworthy paper in the same setting as ours is (Telgarsky, 2016), which proves a separation result between
the expressivity of ReLU networks of depth k and depth
o (k/ log (k)) (for any k). This holds even for onedimensional functions, where a depth k network is shown
to realize a saw-tooth function with exp(O(k)) oscillations, whereas any network of depth o (k/ log (k)) would
require a width super-polynomial in k to approximate it by
more than a constant. In fact, we ourselves rely on this
construction in the proofs of our results in section 5. On
the flip side, in our paper we focus on separation in terms
of the accuracy or dimension, rather than a parameter k.
Moreover, the construction there relies on a highly oscillatory function, with Lipschitz constant exponential in k
almost everywhere. In contrast, in our paper we focus on
simpler functions, of the type that are likely to be learnable
from data using standard methods.
Our separation results in Sec. 5 (for smooth non-linear
functions) are closely related to those of (Yarotsky, 2016;
Liang & Srikant, 2016), which appeared online concurrently and independently of our work, and the proof ideas
are quite similar. However, these papers focused on L∞
bounds rather than L2 bounds. Moreover, (Yarotsky, 2016)
considers a class of functions different than ours in their
positive results, and (Liang & Srikant, 2016) consider networks employing a mix of ReLU and threshold activations,
whereas we consider a purely ReLU network.
Another relevant and insightful work is (Poggio et al.,
2016), which considers width vs. depth and provide general results on expressibility of functions with a compositional nature. However, the focus there is on worse-case approximation over general classes of functions, rather than
separation results in terms of specific functions as we do
here, and the details and setting is somewhat orthogonal to
ours.

2. Preliminaries
In general, we let bold-faced letters such as x =
(x1 , . . . , xd ) denote vectors, and capital letters denote matrices or probabilistic events. k·k denotes the Euclidean
norm, and k·k1 the 1-norm. 1 (·) denotes the indicator
function. We use the standard asymptotic notation O(·) and
Ω(·) to hide constants, and Õ(·) and Ω̃(·) to hide constants
and factors logarithmic in the problem parameters.
Neural Networks. We consider feed-forward neural networks, computing functions from Rd to R. The network
is composed of layers of neurons, where each neuron computes a function of the form x 7→ σ(w> x + b), where w
continuous function such as x 7→ 1 (x ≥ 0) in an L∞ sense, yet
can easily approximate it in an L2 sense given any continuous
distribution.

Depth-Width Tradeoffs in Approximating Natural Functions with Neural Networks

is a weight vector, b is a bias term and σ : R 7→ R is a
non-linear activation function, such as the ReLU function
σ(z) = [z]+ = max{0, z}. Letting σ(W x +b) be a shorthand for σ(w1> x + b1 ), . . . , σ(wn> x + bn ) , we define a
layer of n neurons as x 7→ σ(W x + b). By denoting the
output of the ith layer as Oi , we can define a network of
arbitrary depth recursively by Oi+1 = σ(Wi+1 Oi + bi+1 ),
where Wi , bi represent the matrix of weights and bias of
the ith layer, respectively. Following a standard convention
for multi-layer networks, the final layer h is a purely linear
function with no bias, i.e. Oh = Wh · Oh−1 . We define the
depth of the network as the number of layers l, and denote
the number of neurons ni in the ith layer as the size of the
layer. We define the width of a network as maxi∈{1,...,l} ni .
Finally, a ReLU network is a neural network where all the
non-linear activations are the ReLU function. We use “2layer” and “3-layer” to denote networks of depth 2 and 3.
In particular, in our notation a 2-layer ReLU network has
the form
n1
X
vi · [wi> x + bi ]+
x 7→
i=1

for some parameters v1 , b1 , . . . , vn1 , bn1 and ddimensional vectors w1 , . . . , wn1 . Similarly, a 3-layer
ReLU network has the form


n2
n1
X
X
 >

ui 
vi,j wi,j x + bi,j + ci 
+

i=1

j=1

+

for some parameters {ui , vi,j , bi,j , ci , wi,j }.
Approximation error. Given some function f on a domain
X endowed with some probability distribution (with density function µ), we define theR quality of its approximation
by some other function f˜ as X (f (x) − f˜(x))2 µ(x)dx =
Ex∼µ [(f (x) − f˜(x))2 ]. We refer to this as approximation in the L2 -norm sense. In one of our results (Thm. 6),
we also consider approximation in the L∞ -norm sense, defined as supx∈X |f (x) − f˜(x)|. Clearly, this upper-bounds
the (square root of the) L2 approximation error defined
above, so as discussed in the introduction, lower bounds
on the L2 approximation error (w.r.t. any distribution) are
stronger than lower bounds on the L∞ approximation error.

3. Indicators of L2 Balls and Ellipsoids
We begin by considering one of the simplest possible function classes on Rd , namely indicators of L2 balls (and more
generally, ellipsoids). The ability to compute such functions is necessary for many useful primitives, for example determining if the distance between two points in Euclidean space is below or above some threshold (either with
respect to the Euclidean distance, or a more general Mahalanobis distance). In this section, we show a depth separation result for such functions: Although they can be easily

approximated with 3-layer networks, no 2-layer network
can approximate it to high accuracy w.r.t. any distribution,
unless its width is exponential in the dimension. This is
formally stated in the following theorem:
Theorem 1 (Inapproximability with 2-layer networks).
The following holds for some positive universal constants
c1 , c2 , c3 , c4 , and any network employing an activation
function satisfying Assumptions 1 and 2 in Eldan & Shamir
(2016): For any d > c1 , and any non-singular matrix A ∈ Rd×d , b ∈ Rd and r ∈ (0, ∞), there exists a continuous probability distribution γ on Rd , such
that for any function g computed by a 2-layer network of
width at most c3 exp(c4 d), and for the function f (x) =
1 (kAx + bk ≤ r), we have
Z
c2
2
(f (x) − g(x)) · γ(x)dx ≥ 4 .
d
d
R
We note that the assumptions from (Eldan & Shamir, 2016)
are very mild, and apply to all standard activation functions,
including ReLU, sigmoid and threshold. For completeness, the fully stated assumptions are presented in Subsection A.1
The formal proof of Thm. 1 (provided below) is based on a
reduction from the main result of (Eldan & Shamir, 2016),
which shows the existence of a certain radial function (depending on the input x only through its norm) and a probability distribution which cannot be expressed by a 2-layer
network, whose width is less than exponential in the dimension d to more than constant accuracy. A closer look
at the proof reveals that this function (denoted as g̃) can
be expressed as a sum of Θ(d2 ) indicators of L2 balls of
various radii. We argue that if we could have accurately
approximated a given L2 ball indicator with respect to all
distributions, then we could have approximated all the indicators whose sum add up to g̃, and hence reach a contradiction. By a linear transformation argument, we show the
same contradiction would have occured if we could have
approximated the indicators of an non-degenerate ellipse
with respect to any distribution. The formal proof is provided below:
Proof of Thm. 1. Assume by contradiction that for f as described in the theorem, and for any distribution γ, there
exists a 2-layer network f˜γ of width at most c3 exp(c4 d),
such that
Z

2
c2
f (x) − f˜γ (x) γ(x)dx ≤  ≤ 4 .
d
x∈Rd
Let Â and b̂ be a d × d non-singular matrix and vector respectively, to be determined later. We begin by performing
a change of variables, y = Âx+ b̂ ⇐⇒ x = Â−1 (y− b̂),

Depth-Width Tradeoffs in Approximating Natural Functions with Neural Networks






dx = det Â−1  · dy, which yields
Z

2



 
f Â−1 y − b̂ − f˜γ Â−1 y − b̂
y∈Rd



 



· γ Â−1 y − b̂ · det Â−1  · dy ≤ . (1)
In particular, let us choose the distribution γ defined as
γ(z) = | det(Â)| · µ(Âz + b̂), where µ is the (continuous)
distribution used in the main result of (Eldan &
R Shamir,
2016) (note that γ is indeed a distribution, since z γ (z) =
R
(det(Â)) z µ(Âz+ b̂)dz, which by the change of variables
R
x = Âz + b̂, dx = | det(Â)|dz equals x µ(x)dx = 1).
Plugging the definition of γ in Eq. (1), and using the fact
that | det(Â−1 )| · | det(Â)| = 1, we get
Z
 




2
f Â−1 y − b̂ − f˜γ Â−1 y − b̂
y∈Rd

· µ (y) dy ≤ .

(2)

Letting z > 0 be an arbitrary parameter, we now pick Â =
z
z
r A and b̂ = r b. Recalling the definition of f as x 7→
1 (kAx + bk ≤ r), we get that
Z


r
z 2
A−1 y − b
1 (kyk ≤ z) − f˜γ
z
r
y∈Rd
· µ (y) dy ≤ .

(3)


Note that f˜γ zr A−1 y − zr b expresses a 2-layer network composed with a linear transformation of the input,
and hence can be expressed in turn by a 2-layer network
(as we can absorb the linear transformation into the parameters of eachqneuron in the first layer). Therefore, letting
R
kf kL2 (µ) =
f 2 (y)dy denote the norm in L2 (µ) funcy
tion space, we showed the following: For any z > 0, there
exists a 2-layer network f˜z such that


√


≤ .
(4)
 1 (k·k ≤ z) − f˜z (·) 
L2 (µ)

With this key result in hand, we now turn to complete the
proof. We consider the function g̃ from (Eldan & Shamir,
2016), for which it was proven that no 2-layer network can
approximate it w.r.t. µ to better than constant accuracy,
unless its width is exponential in the dimension d. In particular g̃ can be written as
g̃(x) =

n
X

i · 1 (kxk ∈ [ai , bi ]) ,

i=1

where [ai , bi ] are disjoint intervals, i ∈ {−1, +1}, and
n = Θ(d2 ) where d is the dimension. Since g̃ can also be
written as
n
X
i=1

i (1 (kxk ≤ bi ) − 1 (kxk ≤ ai )) ,

we get by Eq. (4) and the triangle inequality that


n


X


i · (f˜bi (·) − f˜ai (·)
g̃(·) −


i=1
L2 (µ)

n

X


≤
|i |  1 (k·k ≤ bi ) − f˜bi 
i=1

L2 (µ)





+ 1 (k·k ≤ ai ) − f˜ai (·)
√



L2 (µ)

≤ 2n .
However, since a linear combination of 2n 2-layer neural
networks of width at most w is P
still a 2-layer network, of
n
width at most 2nw, we get that i=1 i · (f˜bi (·) − f˜ai (·))
is a 2-layer network, of width at most Θ(d2 ) · c3 exp(c
√4 d),
=
which approximates
g̃
to
an
accuracy
of
less
than
2n
p
√
Θ(d2 ) · c2 /d4 = Θ(1) · c2 . Hence, by picking c2 , c3 , c4
sufficiently small, we get a contradiction to the result of
(Eldan & Shamir, 2016), that no 2-layer network of width
smaller than c exp(cd) (for some constant c) can approximate g̃ to more than constant accuracy, for a sufficiently
large dimension d.
To complement Thm. 1, we also show that such indicator functions can be easily approximated with 3-layer networks. The argument is quite simple: Using an activation
such as ReLU or Sigmoid, we can use one layer to approximate any Lipschitz continuous function on any bounded
interval, and in particular x 7→ x2 . Given a vector x ∈ Rd ,
we can apply this construction on each coordinate xi seperPd
2
ately, hence approximating x 7→ kxk = i=1 x2i . Similarly, we can approximate x 7→ kAx + bk for arbitrary
fixed matrices A and vectors b. Finally, with a 3-layer network, we can use the second layer to compute a continuous
approximation to the threshold function z 7→ 1 (z ≤ r).
Composing these two layers, we get an arbitrarily good approximation to the function x 7→ 1 (kAx + bk ≤ r) w.r.t.
any continuous distribution, with the network size scaling
polynomially with the dimension d and the required accuracy. In the theorem below, we formalize this intuition,
where for simplicity we focus on approximating the indicator of the unit ball:
Theorem 2 (Approximability with 3-layer networks).
Given δ > 0, for any activation function σ satisfying Assumption 1 in Eldan & Shamir (2016) and any continuous
probability distribution µ on Rd , there exists a constant cσ
dependent only on σ, and a function
by a o
3n g expressible
p
layer network of width at most max 8cσ d2 /δ, cσ 1/2δ ,
such that the following holds:
Z
2
(g (x) − 1 (kxk2 ≤ 1)) µ (x) dx ≤ δ,
Rd

where cσ is a constant depending solely on σ.

Depth-Width Tradeoffs in Approximating Natural Functions with Neural Networks

The proof of the theorem appears in the supplementary material

0.3

3-layer, width 100
2-layer, width 100
2-layer, width 200
2-layer, width 400
2-layer, width 800

0.28

In this subsection, we empirically demonstrate that indicator functions of L2 balls are indeed easier to learn with a
3-layer network, compared to a 2-layer network (even if
the 2-layer network is significantly larger). This indicates
that the depth/width trade-off for indicators of balls, predicted by our theory, can indeed be observed experimentally. Moreover, it highlights the fact that our separation
result is for simple natural functions, that can be learned
reasonably well from data using standard methods.
For our experiment, we sampled 5 · 105 data instances in
R100 , with a direction chosen uniformly at random and a
norm drawn uniformly at random from the interval [0, 2].
To each instance, we associated a target value computed
according to the target function f (x) = 1 (kxk2 ≤ 1). Another 5 · 104 examples were generated in a similar manner
and used as a validation set.
We trained 5 ReLU networks on this dataset:
• One 3-layer network, with a first hidden layer of size
100, a second hidden layer of size 20, and a linear
output neuron.
• Four 2-layer networks, with hidden layer of sizes
100, 200, 400 and 800, and a linear output neuron.
Training was performed with backpropagation, using the
TensorFlow library. We used the squared loss `(y, y 0 ) =
(y − y 0 )2 and batches of size 100. For all networks, we
chose a momentum parameter of 0.95, and a learning rate
starting at 0.1, decaying by a multiplicative factor of 0.95
every 1000 batches, and stopping at 10−4 .
The results are presented in Fig. 1. As can be clearly seen,
the 3-layer network achieves significantly better performance than the 2-layer networks. This is true even though
some of these networks are significantly larger and with
more parameters (for example, the 2-layer, width 800 network has ˜80K parameters, vs. ˜10K parameters for the 3layer network). This gap in performance is the exact opposite of what might be expected based on parameter counting
alone. Moreover, increasing the width of the 2-layer networks exhibits diminishing returns: The performance improvement in doubling the width from 100 to 200 is much
larger than doubling the width from 200 to 400 or 400 to
800. This indicates that one would need a much larger 2layer network to match the 3-layer, width 100 network’s
performance. Thus, we conclude that the network’s depth
indeed plays a crucial role, and that 3-layer networks are
inherently more suitable to express indicator functions of
the type we studied.

0.24

0.22

0.2

0.18

0.16

0.14

0.12
0

20

40

60

80

100

120

140

160

180

200

Batch number (x1000)
0.3

RMSE (validation set)

3.1. An Experiment

RMSE (training set)

0.26

3-layer, width 100
2-layer, width 100
2-layer, width 200
2-layer, width 400
2-layer, width 800

0.25

0.2

0.15
0

20

40

60

80

100

120

140

160

180

200

Batch number (x1000)

Figure 1. The experiment results, depicting the network’s root
mean square error over the training set (top) and validation set
(bottom), as a function of the number of batches processed. Best
viewed in color.

4. L1 Radial Functions; ReLU Networks
Having considered functions depending on the L2 norm,
we now turn to consider functions depending on the L1
norm. Focusing on ReLU networks, we will show a certain separation result holding for any non-linear function,
which depends on the input x only via its 1-norm kxk1 .
Theorem 3. Let f : [0, ∞) 7→ R be a function such that
for some r, δ > 0 and  ∈ (0, 1/2),
inf Ex uniform on [r,(1+)r] [(f (x) − (ax − b))2 ] > δ .

a,b∈R

Then there exists a distribution γ over {x : kxk1 ≤ (1 +
)r}, such that if a 2-layer ReLU network F (x) satisfies
Z
2
(f (kxk1 ) − F (x)) γ(x)dx ≤ δ/2,
x

then its width must be at least Ω̃(min {1/, exp(Ω(d))})
(where the Ω̃ notation hides constants and factors logarithmic in , d).
The proof appears in the supplementary material. We note
that δ controls how ‘linearly inapproximable’ is f in a narrow interval (of width ) around r, and that δ is generally dependent on . To give a concrete example, suppose
that f (z) = [z − 1]+ , which cannot be approximated by
a linear function to an accuracy better than O(2 ) in an neighborhood of 1. By taking r = 1− 2 and δ = O(2 ), we
get that no 2-layer network can approximate the function

Depth-Width Tradeoffs in Approximating Natural Functions with Neural Networks

[kxk1 − 1]+ (at least with respect to some distribution), unless its width is Ω̃(min {1/, exp(Ω(d))}). On the flip side,
f (kxk1 ) can be expressed exactly by a 3-layer, width 2d
Pd
ReLU network: x 7→ [ i=1 ([xi ]+ + [−xi ]+ ) − 1]+ , where
the output neuron is simply the identity function. The same
argument would work for any piecewise-linear f . More
generally, the same kind of argument would work for any
function f exhibiting a non-linear behavior at some points:
Such functions can be well-approximated by 3-layer networks (by approximating f with a piecewise-linear function), yet any approximating 2-layer network will have a
lower bound on its size as specified in the theorem.
Intuitively, the proof relies on showing that any good 2layer approximation of f (kxk1 ) must capture the nonlinear behavior of f close to “most” points x satisfying
kxk1 ≈ r. However, a 2-layer ReLU network x 7→
PN
j=1 aj [hwj , xi + bj ]+ is piecewise linear, with nonlinearities only at the union of the N hyperplanes ∪j {x :
hwj , xi + bj = 0}. This implies that “most” points x
s.t. kxk1 ≈ r must be -close to a hyperplane {x :
hwj , xi + bj = 0}. However, the geometry of the L1 ball
{x : kxk = r} is such that the  neighborhood of any single hyperplane can only cover a “small” portion of that ball,
yet we need to cover most of the L1 ball. Using this and
an appropriate construction, we show that required number
of hyperplanes is at least 1/, as long as  > exp(−O(d))
(and if  is smaller than that, we can simply use one neuron/hyperplane for each of the 2d facets of the L1 ball, and
get a covering using 2d neurons/hyperplanes). The formal
proof appears in the supplementary material.
We note that the bound in Thm. 3 is of a weaker nature
than the bound in the previous section, in that the lower
bound is only polynomial rather than exponential (albeit
w.r.t. different problem parameters:  vs. d). Nevertheless,
we believe this does point out that L1 balls also pose a geometric difficulty for 2-layer networks, and conjecture that
our lower bound can be considerably improved: Indeed, at
the moment we do not know how to approximate a function
such as x 7→ [kxk1 − 1]+ with 2-layer networks to better
than constant accuracy, using less than Ω(2d ) neurons.
Finally, we performed an experiment similar to the one presented in Subsection 3.1, where we verified that the bounds
we derived are indeed reflected in differences in empirical performance, when training 2-layer nets versus 3-layer
nets. The reader is referred to Sec. B for the full details of
the experiment and its results.

5. C 2 Nonlinear Functions; ReLU Networks

sults in this paper, the separation is for depths which can be
larger than 3, depending on the required approximation error. Also, the results will all be with respect to the uniform
distribution µd over [0, 1]d . As mentioned earlier, the results and techniques in this section are closely related to the
independent results of (Yarotsky, 2016; Liang & Srikant,
2016), but our emphasis is on L2 rather than L∞ approximation bounds, and we focus on somewhat different network architectures and function classes.
Clearly, not all C 2 functions are difficult to approximate
(e.g. a linear function can be expressed exactly with a 2layer network). Instead, we consider functions which have
a certain degree of non-linearity, in the sense that its Hessians are non-zero along some direction, on a significant
portion of the domain. Formally, we make the following
definition:
Definition 1. Let µd denote the uniform distribution on
d
d
[0, 1] . For a function f : [0, 1] → R and some λ > 0,
denote
σλ (f ) =

µd (U ) ,

where Sd−1 = {x : kxk2 = 1} is the d-dimensional unit
hypersphere, and U is the set of all connected and measurd
able subsets of [0, 1] .
In words, σλ (f ) is the measure (w.r.t. the uniform distrid
bution on [0, 1] ) of the largest connected set in the domain
of f , where at any point, f has curvature at least λ along
some fixed direction v. The “prototypical” functions f we
are interested in is when σλ (f ) is lower bounded by a constant (e.g. it is 1 if f is strongly convex). We stress that
our results in this section will hold equally well by considering the condition v> H(f )(x)v ≤ −λ as well, however
for the sake of simplicity we focus on the former condition
appearing in Def. 1. Our goal is to show a depth separation result inidividually for any such function (that is, for
any such function, there is a gap in the attainable error between deeper and shallower networks, even if the shallow
network is considerably larger).
As usual, we start with an inapproximability result. Specifically, we prove the following lower bound on the attainable
approximation error of f , using a ReLU neural network of
a given depth and width:
d

Theorem 4. For any C 2 function f : [0, 1] → R, any
λ > 0, and any function g on [0, 1]d expressible by a ReLU
network of depth l and maximal width m, it holds that
Z

In this section, we establish a depth separation result for approximating continuously twice-differentiable (C 2 ) functions using ReLU neural networks. Unlike the previous re-

sup
v∈Sd−1 , U ∈U s.t. v> H(f )(x)v≥λ ∀x∈U

(f (x) − g(x)2 µd (x) dx ≥

[0,1]d

where c > 0 is a universal constant.

c · λ2 · σλ5
,
(2m)4l

Depth-Width Tradeoffs in Approximating Natural Functions with Neural Networks

The theorem conveys a key tradeoff between depth and
width when approximating a C 2 function using ReLU networks: The error cannot decay faster than polynomially in
the width m, yet the bound deteriorates exponentially in the
depth l. As we show later on, this deterioration does not
stem from the looseness in the bound: For well-behaved f ,
it is indeed possible to construct ReLU networks, where the
approximation error decays exponentially with depth.
The proof of Thm. 4 appears in the supplementary material, and is based on a series of intermediate results. First,
we show that any strictly curved function (in a sense similar to Definition 1) cannot be well-approximated in an
L2 sense by piecewise linear functions, unless the number of linear regions is large. To that end, we first establish some necessary tools based on Legendre polynomials. We then prove a result specific to the one-dimensional
case, including an explicit lower bound if the target function is quadratic (Thm. 9) or strongly convex or concave
(Thm. 10). We then expand the construction to get an error lower bound in general dimension d, depending on the
number of linear regions in the approximating piecewiselinear function. Finally, we note that any ReLU network
induces a piecewise-linear function, and bound the number
of linear regions induced by a ReLU network of a given
width and depth (using a lemma borrowed from (Telgarsky, 2016)). Combining this with the previous lower bound
yields Thm. 4.
We now turn to complement this lower bound with an approximability result, showing that with more depth, a wide
family of functions to which Thm. 4 applies can be approximated with exponentially high accuracy. Specifically,
we consider functions which can be approximated using a
moderate number of multiplications and additions, where
the values of intermediate computations are bounded (for
example, a special case is any function approximable by a
moderately-sized Boolean circuit, or a polynomial).

Figure 2. ReLU approximation of the function x 7→ x2 obtained
by extracting 5 bits. The number of linear segments grows exponentially with the number of bits and the approximating network
size.

and formally proven as follows:
Proof of Thm. 5. We begin by observing that by using a
simple linear change of variables on x, we may assume
without loss of generality that x ∈ [0, 1], as we can just
rescale x to the interval [0, 1], and then map it back to its
original domain [−M, M ], where the error will multiply by

a factor of 2M . Then by requiring accuracy 2M
instead of
, the result will follow.
The key behind the proof is that performing bit-wise operations on the first k bits of x ∈ [0, 1] yields anPestimation
∞
of the product to accuracy 21−k M . Let x = i=1 2−i xi
be the binary representation of x where xi is the ith bit of
x, then
x·y =

2

sup

|f (x, y) − g (x, y)| ≤ .

(x,y)∈[−M,M ]2

The idea of the construction is that depth allows us to compute highly-oscillating functions, which can extract highorder bits from the binary representation of the inputs.
Given these bits, one can compute the product by a procedure resembling long multiplication, as shown in Fig. 2,

2−i xi · y

i=1

The key result to show this is the following, which implies
that the multiplication of two (bounded-size) numbers can
be approximated by a ReLU network, with error decaying
exponentially with depth:
Theorem 5. Let f : [−M, M ] → R, f (x, y) = x · y and
let  > 0 be arbitrary.
Then exists a ReLU
 neural network


+ 13 and depth 2 log M
+9
g of width 4 log M


satisfying

∞
X

=

k
X

2−i xi · y +

i=1

∞
X

2−i xi · y.

(5)

i=k+1

But since
 ∞
  ∞

 X
  X


 

−i
−i
2 xi · y  ≤ 
2 · y  = 2−k |y| ≤ 21−k M,


 

i=k+1

i=k+1

Eq. (5) implies


k


X


−i
2 xi · y  ≤ 21−k M.
x · y −


i=1


, it suffices to show the
Requiring that 22−k M ≤ 2M
existence of a network which approximates the function

Pk

8M
−i
.
i=1 2 xi · y to accuracy 2 , where k = 2 log


Depth-Width Tradeoffs in Approximating Natural Functions with Neural Networks

This way both approximations will be at most 2 , resulting
in the desired accuracy of .
Before specifying the architecture which extracts the ith bit
of x, we first describe the last 2 layers of the network. Let
the penultimate layer comprise of k neurons, each receiving both y and
 xi as input, and having the set of weights
2−i , 1, −1 . Thus, the output of the ith neuron in the
penultimate layer is
 −i

2 y + xi − 1 + = 2−i xi y.
Let the final single output neuron have the set of weights
(1, . . . , 1, 0) ∈ Rk+1 , this way, the output of the network
Pk
will be i=1 2−i xi · y as required.
We now specify the architecture which extracts the first
most significant k bits of x. In Telgarsky (2016), the author demonstrates how the composition of the function
ϕ (x) = [2x]+ − [4x − 2]+
with itself i times, ϕi , yields a highly oscillatory triangle
wave function in the domain [0, 1]. Furthermore, we observe that ϕ (x) = 0 ∀x ≤ 0, and thus ϕi (x) = 0 ∀x ≤ 0.
Now, a linear shift of the input of ϕi by 2−i−1 , and composing the output with




1
1
1
1
1
1
−
,
x−
+
x−
−
σδ (x) =
2δ
4δ
2 +
2δ
4δ
2 +
which converges to 1[x≥0.5] (x) as δ → 0, results
 in an approximation of x 7→ xi : σδ ϕi x − 2−i−1 . We stress
that choosing δ such that the network approximates the bitwise product to accuracy 2 will require δ to be of magnitude 1 , but this posesno problem as representing such a
number requires log 1 bits, which is also the magnitude
of the size of the network, as suggested by the following
analysis.
Next, we compute the size of the network required to implement the above approximation. To compute ϕ only two
neurons are required, therefore ϕi can be computed using
i layers with 2 neurons in each, and finally composing this
with σδ requires a subsequent layer with 2 more neurons.
To implement the ith bit extractor we therefore require a
network of size 2×(i + 1). Using dummy neurons to propagate the ith bit for i < k, the architecture extracting the
k most significant bits of x will be of size 2k × (k + 1).
Adding the final component performing the multiplication
estimation will require 2 more layers of width k and 1 respectively, and an increase of the width by 1 to propagate
y to the penultimate layer, resulting in a network of size
(2k + 1) × (k + 1).
Thm. 5 shows that multiplication can be performed very
accurately by deep networks. Moreover, additions can be

computed by ReLU networks exactly, using only a single layer with 4 neurons: Let α, β ∈ R be arbitrary, then
(x, y) 7→ α · x + β · y is given in terms of ReLU summation
by
α [x]+ − α [−x]+ + β [y]+ − β [−y]+ .
Repeating these arguments, we see that any function which
can be approximated by a bounded number of operations
involving additions and multiplications, can also be approximated well by moderately-sized networks. This is
formalized in the following theorem, which provides an approximation error upper bound (in the L∞ sense, which is
stronger than L2 for upper bounds):
Theorem 6. Let Ft,M, be the family of functions on the
d
domain [0, 1] with the property that f ∈ Ft,M, is approximable to accuracy  with respect to the infinity norm,
using at most t operations involving weighted addition,
(x, y) 7→ α · x + β · y, where α, β ∈ R are fixed; and multiplication, (x, y) 7→ x · y, where each intermediate computation stage is bounded in the interval [−M, M ]. Then
there exists a universal constant c, and
g
 a ReLU network

of width and depth at most c t log 1 + t2 log (M ) , such
that
sup |f (x) − g (x)| ≤ 2.
x∈[0,1]d

As discussed in Sec. 2, this type of L∞ approximation
bound implies an L2 approximation bound with respect
to any distribution. The proof of the theorem appears in
Sec. A.
Combining Thm. 4 and Thm. 6, we can state the following corollary, which formally shows how depth can be exponentially more valuable than width as a function of the
target accuracy :
Corollary 1. Suppose f ∈ C 2 ∩Ft(),M (), , where t () =
O (poly (log (1/))) and M () = O (poly (1/)). Then
approximating f to accuracy  in the L2 norm using a fixed
depth ReLU network requires width at least poly(1/),
whereas there exists a ReLU network of depth and width at
most p (log (1/)) which approximates f to accuracy  in
the infinity norm, where p is a polynomial depending solely
on f .
Proof. The lower bound follows immediately from Thm. 4.
For the upper bound, observe that Thm. 6 implies an  approximation by a network of width and depth at most


2
c t (/2) log (2/) + (t (/2)) log (M (/2)) ,
which by the assumption of Corollary 1, can be bounded by
p (log (1/)) for some polynomial p which depends solely
on f .

Depth-Width Tradeoffs in Approximating Natural Functions with Neural Networks

Acknowledgements
This research is supported in part by an FP7 Marie Curie
CIG grant, Israel Science Foundation grant 425/13, and
the Intel ICRI-CI Institute. We would like to thank Shai
Shalev-Shwartz for some illuminating discussions, and
Eran Amar for his valuable help with the experiments.

References
Bianchini, M. and Scarselli, F. On the complexity of shallow and deep neural network classifiers. In ESANN,
2014.
Cohen, Nadav, Sharir, Or, and Shashua, Amnon. On the
expressive power of deep learning: A tensor analysis. In
29th Annual Conference on Learning Theory, pp. 698–
728, 2016.
Cybenko, George. Approximation by superpositions of a
sigmoidal function. Mathematics of control, signals and
systems, 2(4):303–314, 1989.
Delalleau, O. and Bengio, Y. Shallow vs. deep sum-product
networks. In NIPS, pp. 666–674, 2011.
Eldan, Ronen and Shamir, Ohad. The power of depth for
feedforward neural networks. In 29th Annual Conference on Learning Theory, pp. 907–940, 2016.
He, Kaiming, Zhang, Xiangyu, Ren, Shaoqing, and Sun,
Jian. Deep residual learning for image recognition. arXiv
preprint arXiv:1512.03385, 2015.
Hornik, Kurt. Approximation capabilities of multilayer
feedforward networks. Neural networks, 4(2):251–257,
1991.
Liang, Shiyu and Srikant, R. Why deep neural networks?
arXiv preprint arXiv:1610.04161, 2016.
Martens, J. and Medabalimi, V. On the expressive efficiency of sum product networks. arXiv preprint
arXiv:1411.7717, 2014.
Poggio, Tomaso, Mhaskar, Hrushikesh, Rosasco, Lorenzo,
Miranda, Brando, and Liao, Qianli.
Why and
when can deep–but not shallow–networks avoid the
curse of dimensionality: a review. arXiv preprint
arXiv:1611.00740, 2016.
Poole, Ben, Lahiri, Subhaneil, Raghu, Maithreyi, SohlDickstein, Jascha, and Ganguli, Surya. Exponential
expressivity in deep neural networks through transient
chaos. In Advances In Neural Information Processing
Systems, pp. 3360–3368, 2016.

Shaham, Uri, Cloninger, Alexander, and Coifman,
Ronald R. Provable approximation properties for deep
neural networks. Applied and Computational Harmonic
Analysis, 2016.
Telgarsky, Matus. Benefits of depth in neural networks.
arXiv preprint arXiv:1602.04485, 2016.
Yarotsky, Dmitry. Error bounds for approximations with
deep relu networks. arXiv preprint arXiv:1610.01145,
2016.

